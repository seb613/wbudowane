
lab4.elf:     file format elf32-littlenios2
lab4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000dbe0 memsz 0x0000dbe0 flags r-x
    LOAD off    0x0000ec00 vaddr 0x0002dc00 paddr 0x0002f6f4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000111e8 vaddr 0x000311e8 paddr 0x000311e8 align 2**12
         filesz 0x00000000 memsz 0x000073dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d850  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  0002da80  0002da80  0000ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0002dc00  0002f6f4  0000ec00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  000311e8  000311e8  000111e8  2**2
                  ALLOC, SMALL_DATA
  6 .OnChip_Memory 00000000  000385c4  000385c4  000106f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000106f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b90  00000000  00000000  00010718  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001fb68  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007ae6  00000000  00000000  00030e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008eb8  00000000  00000000  000388f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002600  00000000  00000000  000417b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038a2  00000000  00000000  00043db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00047652  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  0004c140  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00050522  2**0
                  CONTENTS, READONLY
 18 .cpu          00000011  00000000  00000000  00050528  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00050539  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005053a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0005053b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00050544  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0005054d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00050556  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  0005055f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004573  00000000  00000000  00050572  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004bd43  00000000  00000000  00054ae5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
0002da80 l    d  .rodata	00000000 .rodata
0002dc00 l    d  .rwdata	00000000 .rwdata
000311e8 l    d  .bss	00000000 .bss
000385c4 l    d  .OnChip_Memory	00000000 .OnChip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000204f4 l     F .text	00000008 __fp_unlock
00020508 l     F .text	0000019c __sinit.part.1
000206a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002dc00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000232a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000232d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000233c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000234b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002359c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00023770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002f668 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000239e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0002f66c l     O .rwdata	00000004 lockid
00031208 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002f670 l     O .rwdata	00000004 lockid
00031210 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0002541c l     F .text	00000048 OS_InitMisc
00025464 l     F .text	0000006c OS_InitRdyList
000255d0 l     F .text	000000e4 OS_InitTCBList
0002533c l     F .text	000000e0 OS_InitEventList
000254d0 l     F .text	00000080 OS_InitTaskIdle
00025550 l     F .text	00000080 OS_InitTaskStat
00025840 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00027550 l     F .text	000000f4 OS_FlagTaskRdy
00027310 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002b628 l     F .text	00000034 alt_dev_reg
0002e5d4 l     O .rwdata	0000106c JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002b9a0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0002bc44 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002c420 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002c660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002cac0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002cc20 l     F .text	0000003c alt_get_errno
0002cc5c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00031274 g     O .bss	00000004 alt_instruction_exception_handler
0002f6be g     O .rwdata	00000002 OSTaskNameSize
00022f64 g     F .text	00000054 _isatty_r
000236b4 g     F .text	000000bc alt_main
00020388 g     F .text	000000c0 _puts_r
000384c4 g     O .bss	00000100 alt_irq
00022c8c g     F .text	00000060 _lseek_r
00027d70 g     F .text	000000d8 OS_MemInit
0002f6f4 g       *ABS*	00000000 __flash_rwdata_start
0002b5c8 g     F .text	00000060 OSTimeSet
00024090 g     F .text	00000610 OSEventPendMulti
000385c4 g       *ABS*	00000000 __alt_heap_start
0002d298 g     F .text	00000024 OSTaskCreateHook
000312a0 g     O .bss	00002000 task1_stk
0002f696 g     O .rwdata	00000002 OSMboxEn
000246f8 g     F .text	0000004c OSIntEnter
00022240 g     F .text	0000005c __sseek
00020854 g     F .text	00000010 __sinit
0002f6a6 g     O .rwdata	00000002 OSQEn
000206ac g     F .text	00000078 __sfmoreglue
00023d64 g     F .text	000000cc __malloc_unlock
0002d300 g     F .text	00000020 OSTaskStatHook
00031218 g     O .bss	00000001 OSLockNesting
0002f6e4 g     O .rwdata	00000002 OSDataSize
00031219 g     O .bss	00000001 OSRunning
0002192c g     F .text	0000015c memmove
0002d340 g     F .text	00000020 OSInitHookBegin
0002f6dc g     O .rwdata	00000002 OSTmrSize
0002083c g     F .text	00000018 _cleanup
0003121c g     O .bss	00000004 OSIdleCtr
0002d048 g     F .text	00000024 altera_nios2_gen2_irq_init
0002d118 g       .text	00000000 OSStartTsk
00025b70 g     F .text	000002d4 OS_TCBInit
00020000 g     F .entry	0000000c __reset
0002f6e2 g     O .rwdata	00000002 OSTmrWheelTblSize
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002f682 g     O .rwdata	00000002 OSEventSize
00031220 g     O .bss	00000001 OSPrioHighRdy
00022f08 g     F .text	0000005c _fstat_r
0002d2bc g     F .text	00000024 OSTaskDelHook
000311f4 g     O .bss	00000004 errno
000221bc g     F .text	00000008 __seofread
0002d0f8 g       .text	00000000 OSStartHighRdy
0002a048 g     F .text	000001e4 OSTaskCreateExt
00026e58 g     F .text	00000060 OSFlagPendGetFlagsRdy
0002f6c2 g     O .rwdata	00000002 OSTaskStatStkSize
00025fd4 g     F .text	00000308 OSFlagAccept
000283b4 g     F .text	000000b8 OSQFlush
00027e48 g     F .text	00000140 OSQAccept
00031200 g     O .bss	00000004 alt_argv
00037640 g       *ABS*	00000000 _gp
00029e9c g     F .text	000001ac OSTaskCreate
000299ac g     F .text	000004f0 OSTaskChangePrio
00031214 g     O .bss	00000004 alt_heapsem
00025e44 g     F .text	00000190 OSDebugInit
0002a22c g     F .text	00000344 OSTaskDel
00020000 g       *ABS*	00000000 __alt_mem_OnChip_Memory
0002e454 g     O .rwdata	00000180 alt_fd_list
000352a0 g     O .bss	00000370 OSFlagTbl
0002511c g     F .text	000000b8 OS_EventTaskRemove
0002d3c4 g     F .text	00000090 alt_find_dev
000217e4 g     F .text	00000148 memcpy
0002f6ac g     O .rwdata	00000002 OSRdyTblSize
000204fc g     F .text	0000000c _cleanup_r
0002cba4 g     F .text	0000007c alt_io_redirect
0002da80 g       *ABS*	00000000 __DTOR_END__
00020448 g     F .text	00000014 puts
0002d650 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023e30 g     F .text	00000120 OSEventNameGet
0002f690 g     O .rwdata	00000002 OSFlagMax
00024744 g     F .text	000000f8 OSIntExit
0002f6ca g     O .rwdata	00000002 OSTCBSize
00031221 g     O .bss	00000001 OSPrioCur
0002bea0 g     F .text	000002bc altera_avalon_jtag_uart_read
000230b0 g     F .text	00000064 .hidden __udivsi3
00023404 g     F .text	000000ac isatty
0002f6b0 g     O .rwdata	00000002 OSStkWidth
0002f6a4 g     O .rwdata	00000002 OSPtrSize
0002f684 g     O .rwdata	00000002 OSEventTblSize
0002d06c g       .text	00000000 OSCtxSw
000311f0 g     O .bss	00000004 __malloc_top_pad
00031224 g     O .bss	00000004 OSTCBList
000311f8 g     O .bss	00000004 alt_fd_list_lock
000208a4 g     F .text	000004c8 __sfvwrite_r
00035610 g     O .bss	00000c30 OSMemTbl
00031228 g     O .bss	00000001 OSTickStepState
00022114 g     F .text	00000054 _sbrk_r
0002f6a8 g     O .rwdata	00000002 OSQMax
00036240 g     O .bss	00000800 OSTaskStatStk
000279ac g     F .text	000000f0 OSMemNameGet
0002f688 g     O .rwdata	00000002 OSFlagEn
00022ea8 g     F .text	00000060 _read_r
0002f6ce g     O .rwdata	00000002 OSTimeTickHookEn
00028864 g     F .text	00000168 OSQPost
00027644 g     F .text	000000a4 OS_FlagUnlink
0002f660 g     O .rwdata	00000004 alt_max_fd
00025708 g     F .text	00000068 OS_MemCopy
00025770 g     F .text	000000d0 OS_Sched
000224ac g     F .text	000000f0 _fclose_r
000278bc g     F .text	000000f0 OSMemGet
0002a858 g     F .text	000001b4 OSTaskNameSet
00022828 g     F .text	00000030 fflush
000311ec g     O .bss	00000004 __malloc_max_sbrked_mem
0003122c g     O .bss	00000004 OSCtxSwCtr
0002d320 g     F .text	00000020 OSTimeTickHook
0002f692 g     O .rwdata	00000002 OSFlagNameSize
000251d4 g     F .text	00000100 OS_EventTaskRemoveMulti
00024fcc g     F .text	00000150 OS_EventTaskWaitMulti
0002f6aa g     O .rwdata	00000002 OSQSize
000235d8 g     F .text	000000dc lseek
00029314 g     F .text	0000020c OSSemPend
0002f640 g     O .rwdata	00000004 _global_impure_ptr
00021bb0 g     F .text	00000564 _realloc_r
0002f694 g     O .rwdata	00000002 OSLowestPrio
000385c4 g       *ABS*	00000000 __bss_end
0002c9d0 g     F .text	000000f0 alt_iic_isr_register
0002d3a0 g     F .text	00000024 OSTCBInitHook
0002f6da g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0002cf40 g     F .text	00000108 alt_tick
0002f67c g     O .rwdata	00000002 OSEventEn
0002f6d6 g     O .rwdata	00000002 OSTmrCfgNameSize
00020874 g     F .text	00000018 __fp_lock_all
0002c984 g     F .text	0000004c alt_ic_irq_enabled
00027470 g     F .text	000000e0 OS_FlagInit
0002cea4 g     F .text	0000009c alt_alarm_stop
0002f6b8 g     O .rwdata	00000002 OSTaskIdleStkSize
00031268 g     O .bss	00000004 alt_irq_active
00028f4c g     F .text	000000b0 OSSemAccept
00027bb0 g     F .text	000000d8 OSMemPut
000276e8 g     F .text	000001d4 OSMemCreate
00031230 g     O .bss	00000004 OSIdleCtrMax
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002e42c g     O .rwdata	00000028 alt_dev_null
0002f6cc g     O .rwdata	00000002 OSTicksPerSec
0002d06c g       .text	00000000 OSIntCtxSw
0002c640 g     F .text	00000020 alt_dcache_flush_all
00031234 g     O .bss	00000004 OSTCBFreeList
0002f6f4 g       *ABS*	00000000 __ram_rwdata_end
00029520 g     F .text	0000016c OSSemPendAbort
0002f658 g     O .rwdata	00000008 alt_dev_list
00023a20 g     F .text	00000100 write
0002f6d0 g     O .rwdata	00000002 OSVersionNbr
0002dc00 g       *ABS*	00000000 __ram_rodata_end
00023310 g     F .text	000000b8 fstat
0002f678 g     O .rwdata	00000004 OSEndiannessTest
00023114 g     F .text	00000058 .hidden __umodsi3
0002f68a g     O .rwdata	00000002 OSFlagGrpSize
000385c4 g       *ABS*	00000000 end
0002b858 g     F .text	00000148 altera_avalon_jtag_uart_init
000259d8 g     F .text	000000cc OS_TaskStat
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002da80 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
0002c498 g     F .text	0000007c alt_avalon_timer_sc_init
0002c15c g     F .text	000002c4 altera_avalon_jtag_uart_write
00020864 g     F .text	00000004 __sfp_lock_acquire
00021700 g     F .text	000000e4 memchr
000256b4 g     F .text	00000054 OS_MemClr
0002d13c g     F .text	0000015c OSTaskStkInit
0002026c g     F .text	00000038 task1
0002297c g     F .text	00000310 _free_r
00024d24 g     F .text	00000198 OS_EventTaskRdy
0002d8cc g     F .text	00000180 __call_exitprocs
00031238 g     O .bss	00000001 OSCPUUsage
0002f648 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
000202a4 g     F .text	00000038 task2
0003126c g     O .bss	00000004 _alt_tick_rate
0002846c g     F .text	0000028c OSQPend
0002b118 g     F .text	00000104 OSTimeDly
00031270 g     O .bss	00000004 _alt_nticks
000237ac g     F .text	00000104 read
0002b694 g     F .text	00000060 alt_sys_init
0002d7b4 g     F .text	00000118 __register_exitproc
00031239 g     O .bss	00000001 OSTaskCtr
0002b21c g     F .text	0000017c OSTimeDlyHMSM
0002bd48 g     F .text	00000068 altera_avalon_jtag_uart_close
0002316c g     F .text	00000028 .hidden __mulsi3
0002dc00 g       *ABS*	00000000 __ram_rwdata_start
0002da80 g       *ABS*	00000000 __ram_rodata_start
00031278 g     O .bss	00000028 __malloc_current_mallinfo
0002f67e g     O .rwdata	00000002 OSEventMax
0002968c g     F .text	00000110 OSSemPost
000248c8 g     F .text	000000dc OSSchedUnlock
0002b6f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002d55c g     F .text	000000f4 alt_get_fd
0003123c g     O .bss	00000004 OSMemFreeList
00024a14 g     F .text	000000b0 OSStatInit
0002724c g     F .text	000000c4 OSFlagQuery
0002f6b4 g     O .rwdata	00000002 OSTaskCreateExtEn
00022458 g     F .text	00000054 _close_r
0002d738 g     F .text	0000007c memcmp
00024d04 g     F .text	00000020 OS_Dummy
0002b7b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000385c4 g       *ABS*	00000000 __alt_stack_base
0002b804 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022304 g     F .text	00000154 __swsetup_r
00036a40 g     O .bss	000001e0 OSQTbl
00020724 g     F .text	00000118 __sfp
0002e024 g     O .rwdata	00000408 __malloc_av_
00020870 g     F .text	00000004 __sinit_lock_release
00031240 g     O .bss	00000004 OSTCBHighRdy
00022168 g     F .text	00000054 __sread
00031244 g     O .bss	00000004 OSQFreeList
0002d454 g     F .text	00000108 alt_find_file
0002c69c g     F .text	000000a4 alt_dev_llist_insert
00023c44 g     F .text	00000120 __malloc_lock
00023934 g     F .text	000000b0 sbrk
00023f50 g     F .text	00000140 OSEventNameSet
000227cc g     F .text	0000005c _fflush_r
00031248 g     O .bss	00000001 OSRdyGrp
000311e8 g       *ABS*	00000000 __bss_start
00021a88 g     F .text	00000128 memset
000202dc g     F .text	000000ac main
00031204 g     O .bss	00000004 alt_envp
000311e8 g     O .bss	00000004 __malloc_max_total_mem
0002b754 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002dacc g     O .rodata	00000100 OSUnMapTbl
0002f6ae g     O .rwdata	00000002 OSSemEn
00026eb8 g     F .text	00000394 OSFlagPost
0002229c g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
0002259c g     F .text	00000014 fclose
00024ebc g     F .text	00000110 OS_EventTaskWait
000332a0 g     O .bss	00002000 task2_stk
00025aa4 g     F .text	000000cc OS_TaskStatStkChk
0002a570 g     F .text	00000150 OSTaskDelReq
00020ef4 g     F .text	0000080c _malloc_r
0002f664 g     O .rwdata	00000004 alt_errno
000249a4 g     F .text	00000070 OSStart
00023be4 g     F .text	00000060 __env_unlock
00020d6c g     F .text	000000c4 _fwalk
0002aa0c g     F .text	000001d4 OSTaskResume
00027c88 g     F .text	000000e8 OSMemQuery
0002f6c0 g     O .rwdata	00000002 OSTaskStatEn
0002f69a g     O .rwdata	00000002 OSMemMax
000289cc g     F .text	00000170 OSQPostFront
00022fb8 g     F .text	00000084 .hidden __divsi3
00031249 g     O .bss	00000003 OSRdyTbl
0002f674 g     O .rwdata	00000002 OSDebugEn
00022858 g     F .text	00000124 _malloc_trim_r
0002da80 g       *ABS*	00000000 __CTOR_END__
0002f68c g     O .rwdata	00000002 OSFlagNodeSize
0002f6d4 g     O .rwdata	00000002 OSTmrCfgMax
00027f88 g     F .text	000001ac OSQCreate
0002a6c0 g     F .text	00000198 OSTaskNameGet
0002da80 g       *ABS*	00000000 __flash_rodata_start
00028b3c g     F .text	0000020c OSQPostOpt
00024ac4 g     F .text	00000220 OSTimeTick
0002f6bc g     O .rwdata	00000002 OSTaskMax
0002da80 g       *ABS*	00000000 __DTOR_LIST__
00028ffc g     F .text	000000d8 OSSemCreate
0002f6e0 g     O .rwdata	00000002 OSTmrWheelSize
0002f6b6 g     O .rwdata	00000002 OSTaskDelEn
0002979c g     F .text	00000110 OSSemQuery
00028134 g     F .text	00000280 OSQDel
000286f8 g     F .text	0000016c OSQPendAbort
0002b65c g     F .text	00000038 alt_irq_init
000238b0 g     F .text	00000084 alt_release_fd
0002d6ec g     F .text	00000014 atexit
000222a4 g     F .text	00000060 _write_r
0002483c g     F .text	0000008c OSSchedLock
000262dc g     F .text	00000108 OSFlagCreate
0002f644 g     O .rwdata	00000004 _impure_ptr
000311fc g     O .bss	00000004 alt_argc
000225b0 g     F .text	0000021c __sflush_r
0002c7a0 g     F .text	00000060 _do_dtors
0002f686 g     O .rwdata	00000002 OSEventMultiEn
000263e4 g     F .text	00000248 OSFlagDel
0003124c g     O .bss	00000004 OSEventFreeList
00020020 g       .exceptions	00000000 alt_irq_entry
000268a0 g     F .text	000005b8 OSFlagPend
0002f6d2 g     O .rwdata	00000002 OSTmrEn
0002088c g     F .text	00000018 __fp_unlock_all
0002f650 g     O .rwdata	00000008 alt_fs_list
000258b4 g     F .text	00000074 OS_StrCopy
0002f69c g     O .rwdata	00000002 OSMemNameSize
0002d360 g     F .text	00000020 OSInitHookEnd
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002f6c8 g     O .rwdata	00000002 OSTCBPrioTblMax
0002f6c4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0002c820 g     F .text	00000050 alt_ic_isr_register
0002f698 g     O .rwdata	00000002 OSMemEn
0002f6a2 g     O .rwdata	00000002 OSMutexEn
0002f6f4 g       *ABS*	00000000 _edata
000385c4 g       *ABS*	00000000 _end
00031250 g     O .bss	00000001 OSIntNesting
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002bdb0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002b398 g     F .text	000001d4 OSTimeDlyResume
00026754 g     F .text	0000014c OSFlagNameSet
0002abe0 g     F .text	000001c0 OSTaskStkChk
0002c8f8 g     F .text	0000008c alt_ic_irq_disable
0002f69e g     O .rwdata	00000002 OSMemSize
000221c4 g     F .text	0000007c __swrite
0002f64c g     O .rwdata	00000004 __malloc_trim_threshold
00031254 g     O .bss	00000004 OSTCBCur
0002d700 g     F .text	00000038 exit
0002f6a0 g     O .rwdata	00000002 OSMemTblSize
00020e30 g     F .text	000000c4 _fwalk_reent
0002303c g     F .text	00000074 .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020868 g     F .text	00000004 __sfp_lock_release
000246a0 g     F .text	00000058 OSInit
0002af84 g     F .text	00000124 OSTaskQuery
00028ea4 g     F .text	000000a8 OS_QInit
00025928 g     F .text	00000054 OS_StrLen
00027a9c g     F .text	00000114 OSMemNameSet
0002f6ba g     O .rwdata	00000002 OSTaskProfileEn
00031258 g     O .bss	00000004 OSTime
00036c20 g     O .bss	00000800 OSTaskIdleStk
0002da4c g     F .text	00000034 _exit
0002c514 g     F .text	0000012c alt_alarm_start
0002662c g     F .text	00000128 OSFlagNameGet
0002b56c g     F .text	0000005c OSTimeGet
00022cec g     F .text	000001bc __smakebuf_r
0002045c g     F .text	00000098 strlen
0002d2e0 g     F .text	00000020 OSTaskSwHook
0002cd48 g     F .text	0000015c open
00037420 g     O .bss	00000b40 OSEventTbl
00037f60 g     O .bss	00000510 OSTCBTbl
000298ac g     F .text	00000100 OSSemSet
0002c800 g     F .text	00000020 alt_icache_flush_all
0002f6e8 g     O .rwdata	00000004 alt_priority_mask
000290d4 g     F .text	00000240 OSSemDel
0003125c g     O .bss	00000004 OSFlagFreeList
0002c870 g     F .text	00000088 alt_ic_irq_enable
0002f680 g     O .rwdata	00000002 OSEventNameSize
00031260 g     O .bss	00000001 OSStatRdy
00038470 g     O .bss	00000054 OSTCBPrioTbl
00023b20 g     F .text	000000c4 __env_lock
0002f6c6 g     O .rwdata	00000002 OSTaskSwHookEn
0002f6ec g     O .rwdata	00000008 alt_alarm_list
0002f68e g     O .rwdata	00000002 OSFlagWidth
0002c740 g     F .text	00000060 _do_ctors
000231d0 g     F .text	000000d8 close
0003120c g     O .bss	00000004 alt_envsem
00031264 g     O .bss	00000004 OSIdleCtrRun
00024ce4 g     F .text	00000020 OSVersion
0002f6d8 g     O .rwdata	00000002 OSTmrCfgWheelSize
00023518 g     F .text	00000084 alt_load
0002b0a8 g     F .text	00000070 OS_TaskStkClr
0002f6b2 g     O .rwdata	00000002 OSTaskCreateEn
000252d4 g     F .text	00000068 OS_EventWaitListInit
0002d380 g     F .text	00000020 OSTaskIdleHook
0002086c g     F .text	00000004 __sinit_lock_acquire
0002ada0 g     F .text	000001e4 OSTaskSuspend
0002597c g     F .text	0000005c OS_TaskIdle
0002f6de g     O .rwdata	00000002 OSTmrTblSize
00028d48 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	00246f80 	call	246f8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	10a13104 	addi	r2,r2,-31548
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10a13104 	addi	r2,r2,-31548
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	00247440 	call	24744 <OSIntExit>
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a70d17 	ldw	r2,-25548(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a70d17 	ldw	r2,-25548(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d69d9014 	ori	gp,gp,30272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	10847a14 	ori	r2,r2,4584

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18e17114 	ori	r3,r3,34244

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00235180 	call	23518 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00236b40 	call	236b4 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0e68>

0002026c <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
   2026c:	defffd04 	addi	sp,sp,-12
   20270:	dfc00215 	stw	ra,8(sp)
   20274:	df000115 	stw	fp,4(sp)
   20278:	df000104 	addi	fp,sp,4
   2027c:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
   20280:	010000f4 	movhi	r4,3
   20284:	2136a004 	addi	r4,r4,-9600
   20288:	00204480 	call	20448 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
   2028c:	000f883a 	mov	r7,zero
   20290:	018000c4 	movi	r6,3
   20294:	000b883a 	mov	r5,zero
   20298:	0009883a 	mov	r4,zero
   2029c:	002b21c0 	call	2b21c <OSTimeDlyHMSM>
  }
   202a0:	003ff706 	br	20280 <__alt_data_end+0xfffe0e80>

000202a4 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
   202a4:	defffd04 	addi	sp,sp,-12
   202a8:	dfc00215 	stw	ra,8(sp)
   202ac:	df000115 	stw	fp,4(sp)
   202b0:	df000104 	addi	fp,sp,4
   202b4:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
   202b8:	010000f4 	movhi	r4,3
   202bc:	2136a504 	addi	r4,r4,-9580
   202c0:	00204480 	call	20448 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
   202c4:	000f883a 	mov	r7,zero
   202c8:	018000c4 	movi	r6,3
   202cc:	000b883a 	mov	r5,zero
   202d0:	0009883a 	mov	r4,zero
   202d4:	002b21c0 	call	2b21c <OSTimeDlyHMSM>
  }
   202d8:	003ff706 	br	202b8 <__alt_data_end+0xfffe0eb8>

000202dc <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   202dc:	defff904 	addi	sp,sp,-28
   202e0:	dfc00615 	stw	ra,24(sp)
   202e4:	df000515 	stw	fp,20(sp)
   202e8:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
   202ec:	d8000415 	stw	zero,16(sp)
   202f0:	d8000315 	stw	zero,12(sp)
   202f4:	00820004 	movi	r2,2048
   202f8:	d8800215 	stw	r2,8(sp)
   202fc:	008000f4 	movhi	r2,3
   20300:	1084a804 	addi	r2,r2,4768
   20304:	d8800115 	stw	r2,4(sp)
   20308:	00800044 	movi	r2,1
   2030c:	d8800015 	stw	r2,0(sp)
   20310:	01c00044 	movi	r7,1
   20314:	018000f4 	movhi	r6,3
   20318:	318ca704 	addi	r6,r6,12956
   2031c:	000b883a 	mov	r5,zero
   20320:	010000b4 	movhi	r4,2
   20324:	21009b04 	addi	r4,r4,620
   20328:	002a0480 	call	2a048 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
   2032c:	d8000415 	stw	zero,16(sp)
   20330:	d8000315 	stw	zero,12(sp)
   20334:	00820004 	movi	r2,2048
   20338:	d8800215 	stw	r2,8(sp)
   2033c:	008000f4 	movhi	r2,3
   20340:	108ca804 	addi	r2,r2,12960
   20344:	d8800115 	stw	r2,4(sp)
   20348:	00800084 	movi	r2,2
   2034c:	d8800015 	stw	r2,0(sp)
   20350:	01c00084 	movi	r7,2
   20354:	018000f4 	movhi	r6,3
   20358:	3194a704 	addi	r6,r6,21148
   2035c:	000b883a 	mov	r5,zero
   20360:	010000b4 	movhi	r4,2
   20364:	2100a904 	addi	r4,r4,676
   20368:	002a0480 	call	2a048 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
   2036c:	00249a40 	call	249a4 <OSStart>
  return 0;
   20370:	0005883a 	mov	r2,zero
}
   20374:	e037883a 	mov	sp,fp
   20378:	dfc00117 	ldw	ra,4(sp)
   2037c:	df000017 	ldw	fp,0(sp)
   20380:	dec00204 	addi	sp,sp,8
   20384:	f800283a 	ret

00020388 <_puts_r>:
   20388:	defff604 	addi	sp,sp,-40
   2038c:	dc000715 	stw	r16,28(sp)
   20390:	2021883a 	mov	r16,r4
   20394:	2809883a 	mov	r4,r5
   20398:	dc400815 	stw	r17,32(sp)
   2039c:	dfc00915 	stw	ra,36(sp)
   203a0:	2823883a 	mov	r17,r5
   203a4:	002045c0 	call	2045c <strlen>
   203a8:	10c00044 	addi	r3,r2,1
   203ac:	d8800115 	stw	r2,4(sp)
   203b0:	008000f4 	movhi	r2,3
   203b4:	10b6aa04 	addi	r2,r2,-9560
   203b8:	d8800215 	stw	r2,8(sp)
   203bc:	00800044 	movi	r2,1
   203c0:	d8800315 	stw	r2,12(sp)
   203c4:	00800084 	movi	r2,2
   203c8:	dc400015 	stw	r17,0(sp)
   203cc:	d8c00615 	stw	r3,24(sp)
   203d0:	dec00415 	stw	sp,16(sp)
   203d4:	d8800515 	stw	r2,20(sp)
   203d8:	80000226 	beq	r16,zero,203e4 <_puts_r+0x5c>
   203dc:	80800e17 	ldw	r2,56(r16)
   203e0:	10001426 	beq	r2,zero,20434 <_puts_r+0xac>
   203e4:	81400217 	ldw	r5,8(r16)
   203e8:	2880030b 	ldhu	r2,12(r5)
   203ec:	10c8000c 	andi	r3,r2,8192
   203f0:	1800061e 	bne	r3,zero,2040c <_puts_r+0x84>
   203f4:	29001917 	ldw	r4,100(r5)
   203f8:	00f7ffc4 	movi	r3,-8193
   203fc:	10880014 	ori	r2,r2,8192
   20400:	20c6703a 	and	r3,r4,r3
   20404:	2880030d 	sth	r2,12(r5)
   20408:	28c01915 	stw	r3,100(r5)
   2040c:	d9800404 	addi	r6,sp,16
   20410:	8009883a 	mov	r4,r16
   20414:	00208a40 	call	208a4 <__sfvwrite_r>
   20418:	1000091e 	bne	r2,zero,20440 <_puts_r+0xb8>
   2041c:	00800284 	movi	r2,10
   20420:	dfc00917 	ldw	ra,36(sp)
   20424:	dc400817 	ldw	r17,32(sp)
   20428:	dc000717 	ldw	r16,28(sp)
   2042c:	dec00a04 	addi	sp,sp,40
   20430:	f800283a 	ret
   20434:	8009883a 	mov	r4,r16
   20438:	00208540 	call	20854 <__sinit>
   2043c:	003fe906 	br	203e4 <__alt_data_end+0xfffe0fe4>
   20440:	00bfffc4 	movi	r2,-1
   20444:	003ff606 	br	20420 <__alt_data_end+0xfffe1020>

00020448 <puts>:
   20448:	008000f4 	movhi	r2,3
   2044c:	10bd9104 	addi	r2,r2,-2492
   20450:	200b883a 	mov	r5,r4
   20454:	11000017 	ldw	r4,0(r2)
   20458:	00203881 	jmpi	20388 <_puts_r>

0002045c <strlen>:
   2045c:	208000cc 	andi	r2,r4,3
   20460:	10002026 	beq	r2,zero,204e4 <strlen+0x88>
   20464:	20800007 	ldb	r2,0(r4)
   20468:	10002026 	beq	r2,zero,204ec <strlen+0x90>
   2046c:	2005883a 	mov	r2,r4
   20470:	00000206 	br	2047c <strlen+0x20>
   20474:	10c00007 	ldb	r3,0(r2)
   20478:	18001826 	beq	r3,zero,204dc <strlen+0x80>
   2047c:	10800044 	addi	r2,r2,1
   20480:	10c000cc 	andi	r3,r2,3
   20484:	183ffb1e 	bne	r3,zero,20474 <__alt_data_end+0xfffe1074>
   20488:	10c00017 	ldw	r3,0(r2)
   2048c:	01ffbff4 	movhi	r7,65279
   20490:	39ffbfc4 	addi	r7,r7,-257
   20494:	00ca303a 	nor	r5,zero,r3
   20498:	01a02074 	movhi	r6,32897
   2049c:	19c7883a 	add	r3,r3,r7
   204a0:	31a02004 	addi	r6,r6,-32640
   204a4:	1946703a 	and	r3,r3,r5
   204a8:	1986703a 	and	r3,r3,r6
   204ac:	1800091e 	bne	r3,zero,204d4 <strlen+0x78>
   204b0:	10800104 	addi	r2,r2,4
   204b4:	10c00017 	ldw	r3,0(r2)
   204b8:	19cb883a 	add	r5,r3,r7
   204bc:	00c6303a 	nor	r3,zero,r3
   204c0:	28c6703a 	and	r3,r5,r3
   204c4:	1986703a 	and	r3,r3,r6
   204c8:	183ff926 	beq	r3,zero,204b0 <__alt_data_end+0xfffe10b0>
   204cc:	00000106 	br	204d4 <strlen+0x78>
   204d0:	10800044 	addi	r2,r2,1
   204d4:	10c00007 	ldb	r3,0(r2)
   204d8:	183ffd1e 	bne	r3,zero,204d0 <__alt_data_end+0xfffe10d0>
   204dc:	1105c83a 	sub	r2,r2,r4
   204e0:	f800283a 	ret
   204e4:	2005883a 	mov	r2,r4
   204e8:	003fe706 	br	20488 <__alt_data_end+0xfffe1088>
   204ec:	0005883a 	mov	r2,zero
   204f0:	f800283a 	ret

000204f4 <__fp_unlock>:
   204f4:	0005883a 	mov	r2,zero
   204f8:	f800283a 	ret

000204fc <_cleanup_r>:
   204fc:	014000b4 	movhi	r5,2
   20500:	29492b04 	addi	r5,r5,9388
   20504:	0020e301 	jmpi	20e30 <_fwalk_reent>

00020508 <__sinit.part.1>:
   20508:	defff704 	addi	sp,sp,-36
   2050c:	00c000b4 	movhi	r3,2
   20510:	dfc00815 	stw	ra,32(sp)
   20514:	ddc00715 	stw	r23,28(sp)
   20518:	dd800615 	stw	r22,24(sp)
   2051c:	dd400515 	stw	r21,20(sp)
   20520:	dd000415 	stw	r20,16(sp)
   20524:	dcc00315 	stw	r19,12(sp)
   20528:	dc800215 	stw	r18,8(sp)
   2052c:	dc400115 	stw	r17,4(sp)
   20530:	dc000015 	stw	r16,0(sp)
   20534:	18c13f04 	addi	r3,r3,1276
   20538:	24000117 	ldw	r16,4(r4)
   2053c:	20c00f15 	stw	r3,60(r4)
   20540:	2080bb04 	addi	r2,r4,748
   20544:	00c000c4 	movi	r3,3
   20548:	20c0b915 	stw	r3,740(r4)
   2054c:	2080ba15 	stw	r2,744(r4)
   20550:	2000b815 	stw	zero,736(r4)
   20554:	05c00204 	movi	r23,8
   20558:	00800104 	movi	r2,4
   2055c:	2025883a 	mov	r18,r4
   20560:	b80d883a 	mov	r6,r23
   20564:	81001704 	addi	r4,r16,92
   20568:	000b883a 	mov	r5,zero
   2056c:	80000015 	stw	zero,0(r16)
   20570:	80000115 	stw	zero,4(r16)
   20574:	80000215 	stw	zero,8(r16)
   20578:	8080030d 	sth	r2,12(r16)
   2057c:	80001915 	stw	zero,100(r16)
   20580:	8000038d 	sth	zero,14(r16)
   20584:	80000415 	stw	zero,16(r16)
   20588:	80000515 	stw	zero,20(r16)
   2058c:	80000615 	stw	zero,24(r16)
   20590:	0021a880 	call	21a88 <memset>
   20594:	058000b4 	movhi	r22,2
   20598:	94400217 	ldw	r17,8(r18)
   2059c:	054000b4 	movhi	r21,2
   205a0:	050000b4 	movhi	r20,2
   205a4:	04c000b4 	movhi	r19,2
   205a8:	b5885a04 	addi	r22,r22,8552
   205ac:	ad487104 	addi	r21,r21,8644
   205b0:	a5089004 	addi	r20,r20,8768
   205b4:	9cc8a704 	addi	r19,r19,8860
   205b8:	85800815 	stw	r22,32(r16)
   205bc:	85400915 	stw	r21,36(r16)
   205c0:	85000a15 	stw	r20,40(r16)
   205c4:	84c00b15 	stw	r19,44(r16)
   205c8:	84000715 	stw	r16,28(r16)
   205cc:	00800284 	movi	r2,10
   205d0:	8880030d 	sth	r2,12(r17)
   205d4:	00800044 	movi	r2,1
   205d8:	b80d883a 	mov	r6,r23
   205dc:	89001704 	addi	r4,r17,92
   205e0:	000b883a 	mov	r5,zero
   205e4:	88000015 	stw	zero,0(r17)
   205e8:	88000115 	stw	zero,4(r17)
   205ec:	88000215 	stw	zero,8(r17)
   205f0:	88001915 	stw	zero,100(r17)
   205f4:	8880038d 	sth	r2,14(r17)
   205f8:	88000415 	stw	zero,16(r17)
   205fc:	88000515 	stw	zero,20(r17)
   20600:	88000615 	stw	zero,24(r17)
   20604:	0021a880 	call	21a88 <memset>
   20608:	94000317 	ldw	r16,12(r18)
   2060c:	00800484 	movi	r2,18
   20610:	8c400715 	stw	r17,28(r17)
   20614:	8d800815 	stw	r22,32(r17)
   20618:	8d400915 	stw	r21,36(r17)
   2061c:	8d000a15 	stw	r20,40(r17)
   20620:	8cc00b15 	stw	r19,44(r17)
   20624:	8080030d 	sth	r2,12(r16)
   20628:	00800084 	movi	r2,2
   2062c:	80000015 	stw	zero,0(r16)
   20630:	80000115 	stw	zero,4(r16)
   20634:	80000215 	stw	zero,8(r16)
   20638:	80001915 	stw	zero,100(r16)
   2063c:	8080038d 	sth	r2,14(r16)
   20640:	80000415 	stw	zero,16(r16)
   20644:	80000515 	stw	zero,20(r16)
   20648:	80000615 	stw	zero,24(r16)
   2064c:	b80d883a 	mov	r6,r23
   20650:	000b883a 	mov	r5,zero
   20654:	81001704 	addi	r4,r16,92
   20658:	0021a880 	call	21a88 <memset>
   2065c:	00800044 	movi	r2,1
   20660:	84000715 	stw	r16,28(r16)
   20664:	85800815 	stw	r22,32(r16)
   20668:	85400915 	stw	r21,36(r16)
   2066c:	85000a15 	stw	r20,40(r16)
   20670:	84c00b15 	stw	r19,44(r16)
   20674:	90800e15 	stw	r2,56(r18)
   20678:	dfc00817 	ldw	ra,32(sp)
   2067c:	ddc00717 	ldw	r23,28(sp)
   20680:	dd800617 	ldw	r22,24(sp)
   20684:	dd400517 	ldw	r21,20(sp)
   20688:	dd000417 	ldw	r20,16(sp)
   2068c:	dcc00317 	ldw	r19,12(sp)
   20690:	dc800217 	ldw	r18,8(sp)
   20694:	dc400117 	ldw	r17,4(sp)
   20698:	dc000017 	ldw	r16,0(sp)
   2069c:	dec00904 	addi	sp,sp,36
   206a0:	f800283a 	ret

000206a4 <__fp_lock>:
   206a4:	0005883a 	mov	r2,zero
   206a8:	f800283a 	ret

000206ac <__sfmoreglue>:
   206ac:	defffc04 	addi	sp,sp,-16
   206b0:	dc800215 	stw	r18,8(sp)
   206b4:	2825883a 	mov	r18,r5
   206b8:	dc000015 	stw	r16,0(sp)
   206bc:	01401a04 	movi	r5,104
   206c0:	2021883a 	mov	r16,r4
   206c4:	913fffc4 	addi	r4,r18,-1
   206c8:	dfc00315 	stw	ra,12(sp)
   206cc:	dc400115 	stw	r17,4(sp)
   206d0:	002316c0 	call	2316c <__mulsi3>
   206d4:	8009883a 	mov	r4,r16
   206d8:	11401d04 	addi	r5,r2,116
   206dc:	1023883a 	mov	r17,r2
   206e0:	0020ef40 	call	20ef4 <_malloc_r>
   206e4:	1021883a 	mov	r16,r2
   206e8:	10000726 	beq	r2,zero,20708 <__sfmoreglue+0x5c>
   206ec:	11000304 	addi	r4,r2,12
   206f0:	10000015 	stw	zero,0(r2)
   206f4:	14800115 	stw	r18,4(r2)
   206f8:	11000215 	stw	r4,8(r2)
   206fc:	89801a04 	addi	r6,r17,104
   20700:	000b883a 	mov	r5,zero
   20704:	0021a880 	call	21a88 <memset>
   20708:	8005883a 	mov	r2,r16
   2070c:	dfc00317 	ldw	ra,12(sp)
   20710:	dc800217 	ldw	r18,8(sp)
   20714:	dc400117 	ldw	r17,4(sp)
   20718:	dc000017 	ldw	r16,0(sp)
   2071c:	dec00404 	addi	sp,sp,16
   20720:	f800283a 	ret

00020724 <__sfp>:
   20724:	defffb04 	addi	sp,sp,-20
   20728:	dc000015 	stw	r16,0(sp)
   2072c:	040000f4 	movhi	r16,3
   20730:	843d9004 	addi	r16,r16,-2496
   20734:	dcc00315 	stw	r19,12(sp)
   20738:	2027883a 	mov	r19,r4
   2073c:	81000017 	ldw	r4,0(r16)
   20740:	dfc00415 	stw	ra,16(sp)
   20744:	dc800215 	stw	r18,8(sp)
   20748:	20800e17 	ldw	r2,56(r4)
   2074c:	dc400115 	stw	r17,4(sp)
   20750:	1000021e 	bne	r2,zero,2075c <__sfp+0x38>
   20754:	00205080 	call	20508 <__sinit.part.1>
   20758:	81000017 	ldw	r4,0(r16)
   2075c:	2480b804 	addi	r18,r4,736
   20760:	047fffc4 	movi	r17,-1
   20764:	91000117 	ldw	r4,4(r18)
   20768:	94000217 	ldw	r16,8(r18)
   2076c:	213fffc4 	addi	r4,r4,-1
   20770:	20000a16 	blt	r4,zero,2079c <__sfp+0x78>
   20774:	8080030f 	ldh	r2,12(r16)
   20778:	10000c26 	beq	r2,zero,207ac <__sfp+0x88>
   2077c:	80c01d04 	addi	r3,r16,116
   20780:	00000206 	br	2078c <__sfp+0x68>
   20784:	18bfe60f 	ldh	r2,-104(r3)
   20788:	10000826 	beq	r2,zero,207ac <__sfp+0x88>
   2078c:	213fffc4 	addi	r4,r4,-1
   20790:	1c3ffd04 	addi	r16,r3,-12
   20794:	18c01a04 	addi	r3,r3,104
   20798:	247ffa1e 	bne	r4,r17,20784 <__alt_data_end+0xfffe1384>
   2079c:	90800017 	ldw	r2,0(r18)
   207a0:	10001d26 	beq	r2,zero,20818 <__sfp+0xf4>
   207a4:	1025883a 	mov	r18,r2
   207a8:	003fee06 	br	20764 <__alt_data_end+0xfffe1364>
   207ac:	00bfffc4 	movi	r2,-1
   207b0:	8080038d 	sth	r2,14(r16)
   207b4:	00800044 	movi	r2,1
   207b8:	8080030d 	sth	r2,12(r16)
   207bc:	80001915 	stw	zero,100(r16)
   207c0:	80000015 	stw	zero,0(r16)
   207c4:	80000215 	stw	zero,8(r16)
   207c8:	80000115 	stw	zero,4(r16)
   207cc:	80000415 	stw	zero,16(r16)
   207d0:	80000515 	stw	zero,20(r16)
   207d4:	80000615 	stw	zero,24(r16)
   207d8:	01800204 	movi	r6,8
   207dc:	000b883a 	mov	r5,zero
   207e0:	81001704 	addi	r4,r16,92
   207e4:	0021a880 	call	21a88 <memset>
   207e8:	8005883a 	mov	r2,r16
   207ec:	80000c15 	stw	zero,48(r16)
   207f0:	80000d15 	stw	zero,52(r16)
   207f4:	80001115 	stw	zero,68(r16)
   207f8:	80001215 	stw	zero,72(r16)
   207fc:	dfc00417 	ldw	ra,16(sp)
   20800:	dcc00317 	ldw	r19,12(sp)
   20804:	dc800217 	ldw	r18,8(sp)
   20808:	dc400117 	ldw	r17,4(sp)
   2080c:	dc000017 	ldw	r16,0(sp)
   20810:	dec00504 	addi	sp,sp,20
   20814:	f800283a 	ret
   20818:	01400104 	movi	r5,4
   2081c:	9809883a 	mov	r4,r19
   20820:	00206ac0 	call	206ac <__sfmoreglue>
   20824:	90800015 	stw	r2,0(r18)
   20828:	103fde1e 	bne	r2,zero,207a4 <__alt_data_end+0xfffe13a4>
   2082c:	00800304 	movi	r2,12
   20830:	98800015 	stw	r2,0(r19)
   20834:	0005883a 	mov	r2,zero
   20838:	003ff006 	br	207fc <__alt_data_end+0xfffe13fc>

0002083c <_cleanup>:
   2083c:	008000f4 	movhi	r2,3
   20840:	10bd9004 	addi	r2,r2,-2496
   20844:	11000017 	ldw	r4,0(r2)
   20848:	014000b4 	movhi	r5,2
   2084c:	29492b04 	addi	r5,r5,9388
   20850:	0020e301 	jmpi	20e30 <_fwalk_reent>

00020854 <__sinit>:
   20854:	20800e17 	ldw	r2,56(r4)
   20858:	10000126 	beq	r2,zero,20860 <__sinit+0xc>
   2085c:	f800283a 	ret
   20860:	00205081 	jmpi	20508 <__sinit.part.1>

00020864 <__sfp_lock_acquire>:
   20864:	f800283a 	ret

00020868 <__sfp_lock_release>:
   20868:	f800283a 	ret

0002086c <__sinit_lock_acquire>:
   2086c:	f800283a 	ret

00020870 <__sinit_lock_release>:
   20870:	f800283a 	ret

00020874 <__fp_lock_all>:
   20874:	008000f4 	movhi	r2,3
   20878:	10bd9104 	addi	r2,r2,-2492
   2087c:	11000017 	ldw	r4,0(r2)
   20880:	014000b4 	movhi	r5,2
   20884:	2941a904 	addi	r5,r5,1700
   20888:	0020d6c1 	jmpi	20d6c <_fwalk>

0002088c <__fp_unlock_all>:
   2088c:	008000f4 	movhi	r2,3
   20890:	10bd9104 	addi	r2,r2,-2492
   20894:	11000017 	ldw	r4,0(r2)
   20898:	014000b4 	movhi	r5,2
   2089c:	29413d04 	addi	r5,r5,1268
   208a0:	0020d6c1 	jmpi	20d6c <_fwalk>

000208a4 <__sfvwrite_r>:
   208a4:	30800217 	ldw	r2,8(r6)
   208a8:	10006726 	beq	r2,zero,20a48 <__sfvwrite_r+0x1a4>
   208ac:	28c0030b 	ldhu	r3,12(r5)
   208b0:	defff404 	addi	sp,sp,-48
   208b4:	dd400715 	stw	r21,28(sp)
   208b8:	dd000615 	stw	r20,24(sp)
   208bc:	dc000215 	stw	r16,8(sp)
   208c0:	dfc00b15 	stw	ra,44(sp)
   208c4:	df000a15 	stw	fp,40(sp)
   208c8:	ddc00915 	stw	r23,36(sp)
   208cc:	dd800815 	stw	r22,32(sp)
   208d0:	dcc00515 	stw	r19,20(sp)
   208d4:	dc800415 	stw	r18,16(sp)
   208d8:	dc400315 	stw	r17,12(sp)
   208dc:	1880020c 	andi	r2,r3,8
   208e0:	2821883a 	mov	r16,r5
   208e4:	202b883a 	mov	r21,r4
   208e8:	3029883a 	mov	r20,r6
   208ec:	10002726 	beq	r2,zero,2098c <__sfvwrite_r+0xe8>
   208f0:	28800417 	ldw	r2,16(r5)
   208f4:	10002526 	beq	r2,zero,2098c <__sfvwrite_r+0xe8>
   208f8:	1880008c 	andi	r2,r3,2
   208fc:	a4400017 	ldw	r17,0(r20)
   20900:	10002a26 	beq	r2,zero,209ac <__sfvwrite_r+0x108>
   20904:	05a00034 	movhi	r22,32768
   20908:	0027883a 	mov	r19,zero
   2090c:	0025883a 	mov	r18,zero
   20910:	b5bf0004 	addi	r22,r22,-1024
   20914:	980d883a 	mov	r6,r19
   20918:	a809883a 	mov	r4,r21
   2091c:	90004626 	beq	r18,zero,20a38 <__sfvwrite_r+0x194>
   20920:	900f883a 	mov	r7,r18
   20924:	b480022e 	bgeu	r22,r18,20930 <__sfvwrite_r+0x8c>
   20928:	01e00034 	movhi	r7,32768
   2092c:	39ff0004 	addi	r7,r7,-1024
   20930:	80800917 	ldw	r2,36(r16)
   20934:	81400717 	ldw	r5,28(r16)
   20938:	103ee83a 	callr	r2
   2093c:	00805a0e 	bge	zero,r2,20aa8 <__sfvwrite_r+0x204>
   20940:	a0c00217 	ldw	r3,8(r20)
   20944:	98a7883a 	add	r19,r19,r2
   20948:	90a5c83a 	sub	r18,r18,r2
   2094c:	1885c83a 	sub	r2,r3,r2
   20950:	a0800215 	stw	r2,8(r20)
   20954:	103fef1e 	bne	r2,zero,20914 <__alt_data_end+0xfffe1514>
   20958:	0005883a 	mov	r2,zero
   2095c:	dfc00b17 	ldw	ra,44(sp)
   20960:	df000a17 	ldw	fp,40(sp)
   20964:	ddc00917 	ldw	r23,36(sp)
   20968:	dd800817 	ldw	r22,32(sp)
   2096c:	dd400717 	ldw	r21,28(sp)
   20970:	dd000617 	ldw	r20,24(sp)
   20974:	dcc00517 	ldw	r19,20(sp)
   20978:	dc800417 	ldw	r18,16(sp)
   2097c:	dc400317 	ldw	r17,12(sp)
   20980:	dc000217 	ldw	r16,8(sp)
   20984:	dec00c04 	addi	sp,sp,48
   20988:	f800283a 	ret
   2098c:	800b883a 	mov	r5,r16
   20990:	a809883a 	mov	r4,r21
   20994:	00223040 	call	22304 <__swsetup_r>
   20998:	1000ee1e 	bne	r2,zero,20d54 <__sfvwrite_r+0x4b0>
   2099c:	80c0030b 	ldhu	r3,12(r16)
   209a0:	a4400017 	ldw	r17,0(r20)
   209a4:	1880008c 	andi	r2,r3,2
   209a8:	103fd61e 	bne	r2,zero,20904 <__alt_data_end+0xfffe1504>
   209ac:	1880004c 	andi	r2,r3,1
   209b0:	1000421e 	bne	r2,zero,20abc <__sfvwrite_r+0x218>
   209b4:	0039883a 	mov	fp,zero
   209b8:	0025883a 	mov	r18,zero
   209bc:	90001a26 	beq	r18,zero,20a28 <__sfvwrite_r+0x184>
   209c0:	1880800c 	andi	r2,r3,512
   209c4:	84c00217 	ldw	r19,8(r16)
   209c8:	10002126 	beq	r2,zero,20a50 <__sfvwrite_r+0x1ac>
   209cc:	982f883a 	mov	r23,r19
   209d0:	94c09636 	bltu	r18,r19,20c2c <__sfvwrite_r+0x388>
   209d4:	1881200c 	andi	r2,r3,1152
   209d8:	1000a11e 	bne	r2,zero,20c60 <__sfvwrite_r+0x3bc>
   209dc:	81000017 	ldw	r4,0(r16)
   209e0:	b80d883a 	mov	r6,r23
   209e4:	e00b883a 	mov	r5,fp
   209e8:	002192c0 	call	2192c <memmove>
   209ec:	80c00217 	ldw	r3,8(r16)
   209f0:	81000017 	ldw	r4,0(r16)
   209f4:	9005883a 	mov	r2,r18
   209f8:	1ce7c83a 	sub	r19,r3,r19
   209fc:	25cf883a 	add	r7,r4,r23
   20a00:	84c00215 	stw	r19,8(r16)
   20a04:	81c00015 	stw	r7,0(r16)
   20a08:	a0c00217 	ldw	r3,8(r20)
   20a0c:	e0b9883a 	add	fp,fp,r2
   20a10:	90a5c83a 	sub	r18,r18,r2
   20a14:	18a7c83a 	sub	r19,r3,r2
   20a18:	a4c00215 	stw	r19,8(r20)
   20a1c:	983fce26 	beq	r19,zero,20958 <__alt_data_end+0xfffe1558>
   20a20:	80c0030b 	ldhu	r3,12(r16)
   20a24:	903fe61e 	bne	r18,zero,209c0 <__alt_data_end+0xfffe15c0>
   20a28:	8f000017 	ldw	fp,0(r17)
   20a2c:	8c800117 	ldw	r18,4(r17)
   20a30:	8c400204 	addi	r17,r17,8
   20a34:	003fe106 	br	209bc <__alt_data_end+0xfffe15bc>
   20a38:	8cc00017 	ldw	r19,0(r17)
   20a3c:	8c800117 	ldw	r18,4(r17)
   20a40:	8c400204 	addi	r17,r17,8
   20a44:	003fb306 	br	20914 <__alt_data_end+0xfffe1514>
   20a48:	0005883a 	mov	r2,zero
   20a4c:	f800283a 	ret
   20a50:	81000017 	ldw	r4,0(r16)
   20a54:	80800417 	ldw	r2,16(r16)
   20a58:	11005a36 	bltu	r2,r4,20bc4 <__sfvwrite_r+0x320>
   20a5c:	85c00517 	ldw	r23,20(r16)
   20a60:	95c05836 	bltu	r18,r23,20bc4 <__sfvwrite_r+0x320>
   20a64:	00a00034 	movhi	r2,32768
   20a68:	10bfffc4 	addi	r2,r2,-1
   20a6c:	9009883a 	mov	r4,r18
   20a70:	1480012e 	bgeu	r2,r18,20a78 <__sfvwrite_r+0x1d4>
   20a74:	1009883a 	mov	r4,r2
   20a78:	b80b883a 	mov	r5,r23
   20a7c:	0022fb80 	call	22fb8 <__divsi3>
   20a80:	b80b883a 	mov	r5,r23
   20a84:	1009883a 	mov	r4,r2
   20a88:	002316c0 	call	2316c <__mulsi3>
   20a8c:	81400717 	ldw	r5,28(r16)
   20a90:	80c00917 	ldw	r3,36(r16)
   20a94:	100f883a 	mov	r7,r2
   20a98:	e00d883a 	mov	r6,fp
   20a9c:	a809883a 	mov	r4,r21
   20aa0:	183ee83a 	callr	r3
   20aa4:	00bfd816 	blt	zero,r2,20a08 <__alt_data_end+0xfffe1608>
   20aa8:	8080030b 	ldhu	r2,12(r16)
   20aac:	10801014 	ori	r2,r2,64
   20ab0:	8080030d 	sth	r2,12(r16)
   20ab4:	00bfffc4 	movi	r2,-1
   20ab8:	003fa806 	br	2095c <__alt_data_end+0xfffe155c>
   20abc:	0027883a 	mov	r19,zero
   20ac0:	0011883a 	mov	r8,zero
   20ac4:	0039883a 	mov	fp,zero
   20ac8:	0025883a 	mov	r18,zero
   20acc:	90001f26 	beq	r18,zero,20b4c <__sfvwrite_r+0x2a8>
   20ad0:	40005a26 	beq	r8,zero,20c3c <__sfvwrite_r+0x398>
   20ad4:	982d883a 	mov	r22,r19
   20ad8:	94c0012e 	bgeu	r18,r19,20ae0 <__sfvwrite_r+0x23c>
   20adc:	902d883a 	mov	r22,r18
   20ae0:	81000017 	ldw	r4,0(r16)
   20ae4:	80800417 	ldw	r2,16(r16)
   20ae8:	b02f883a 	mov	r23,r22
   20aec:	81c00517 	ldw	r7,20(r16)
   20af0:	1100032e 	bgeu	r2,r4,20b00 <__sfvwrite_r+0x25c>
   20af4:	80c00217 	ldw	r3,8(r16)
   20af8:	38c7883a 	add	r3,r7,r3
   20afc:	1d801816 	blt	r3,r22,20b60 <__sfvwrite_r+0x2bc>
   20b00:	b1c03e16 	blt	r22,r7,20bfc <__sfvwrite_r+0x358>
   20b04:	80800917 	ldw	r2,36(r16)
   20b08:	81400717 	ldw	r5,28(r16)
   20b0c:	e00d883a 	mov	r6,fp
   20b10:	da000115 	stw	r8,4(sp)
   20b14:	a809883a 	mov	r4,r21
   20b18:	103ee83a 	callr	r2
   20b1c:	102f883a 	mov	r23,r2
   20b20:	da000117 	ldw	r8,4(sp)
   20b24:	00bfe00e 	bge	zero,r2,20aa8 <__alt_data_end+0xfffe16a8>
   20b28:	9de7c83a 	sub	r19,r19,r23
   20b2c:	98001f26 	beq	r19,zero,20bac <__sfvwrite_r+0x308>
   20b30:	a0800217 	ldw	r2,8(r20)
   20b34:	e5f9883a 	add	fp,fp,r23
   20b38:	95e5c83a 	sub	r18,r18,r23
   20b3c:	15efc83a 	sub	r23,r2,r23
   20b40:	a5c00215 	stw	r23,8(r20)
   20b44:	b83f8426 	beq	r23,zero,20958 <__alt_data_end+0xfffe1558>
   20b48:	903fe11e 	bne	r18,zero,20ad0 <__alt_data_end+0xfffe16d0>
   20b4c:	8f000017 	ldw	fp,0(r17)
   20b50:	8c800117 	ldw	r18,4(r17)
   20b54:	0011883a 	mov	r8,zero
   20b58:	8c400204 	addi	r17,r17,8
   20b5c:	003fdb06 	br	20acc <__alt_data_end+0xfffe16cc>
   20b60:	180d883a 	mov	r6,r3
   20b64:	e00b883a 	mov	r5,fp
   20b68:	da000115 	stw	r8,4(sp)
   20b6c:	d8c00015 	stw	r3,0(sp)
   20b70:	002192c0 	call	2192c <memmove>
   20b74:	d8c00017 	ldw	r3,0(sp)
   20b78:	80800017 	ldw	r2,0(r16)
   20b7c:	800b883a 	mov	r5,r16
   20b80:	a809883a 	mov	r4,r21
   20b84:	10c5883a 	add	r2,r2,r3
   20b88:	80800015 	stw	r2,0(r16)
   20b8c:	d8c00015 	stw	r3,0(sp)
   20b90:	00227cc0 	call	227cc <_fflush_r>
   20b94:	d8c00017 	ldw	r3,0(sp)
   20b98:	da000117 	ldw	r8,4(sp)
   20b9c:	103fc21e 	bne	r2,zero,20aa8 <__alt_data_end+0xfffe16a8>
   20ba0:	182f883a 	mov	r23,r3
   20ba4:	9de7c83a 	sub	r19,r19,r23
   20ba8:	983fe11e 	bne	r19,zero,20b30 <__alt_data_end+0xfffe1730>
   20bac:	800b883a 	mov	r5,r16
   20bb0:	a809883a 	mov	r4,r21
   20bb4:	00227cc0 	call	227cc <_fflush_r>
   20bb8:	103fbb1e 	bne	r2,zero,20aa8 <__alt_data_end+0xfffe16a8>
   20bbc:	0011883a 	mov	r8,zero
   20bc0:	003fdb06 	br	20b30 <__alt_data_end+0xfffe1730>
   20bc4:	94c0012e 	bgeu	r18,r19,20bcc <__sfvwrite_r+0x328>
   20bc8:	9027883a 	mov	r19,r18
   20bcc:	980d883a 	mov	r6,r19
   20bd0:	e00b883a 	mov	r5,fp
   20bd4:	002192c0 	call	2192c <memmove>
   20bd8:	80800217 	ldw	r2,8(r16)
   20bdc:	80c00017 	ldw	r3,0(r16)
   20be0:	14c5c83a 	sub	r2,r2,r19
   20be4:	1cc7883a 	add	r3,r3,r19
   20be8:	80800215 	stw	r2,8(r16)
   20bec:	80c00015 	stw	r3,0(r16)
   20bf0:	10004326 	beq	r2,zero,20d00 <__sfvwrite_r+0x45c>
   20bf4:	9805883a 	mov	r2,r19
   20bf8:	003f8306 	br	20a08 <__alt_data_end+0xfffe1608>
   20bfc:	b00d883a 	mov	r6,r22
   20c00:	e00b883a 	mov	r5,fp
   20c04:	da000115 	stw	r8,4(sp)
   20c08:	002192c0 	call	2192c <memmove>
   20c0c:	80800217 	ldw	r2,8(r16)
   20c10:	80c00017 	ldw	r3,0(r16)
   20c14:	da000117 	ldw	r8,4(sp)
   20c18:	1585c83a 	sub	r2,r2,r22
   20c1c:	1dad883a 	add	r22,r3,r22
   20c20:	80800215 	stw	r2,8(r16)
   20c24:	85800015 	stw	r22,0(r16)
   20c28:	003fbf06 	br	20b28 <__alt_data_end+0xfffe1728>
   20c2c:	81000017 	ldw	r4,0(r16)
   20c30:	9027883a 	mov	r19,r18
   20c34:	902f883a 	mov	r23,r18
   20c38:	003f6906 	br	209e0 <__alt_data_end+0xfffe15e0>
   20c3c:	900d883a 	mov	r6,r18
   20c40:	01400284 	movi	r5,10
   20c44:	e009883a 	mov	r4,fp
   20c48:	00217000 	call	21700 <memchr>
   20c4c:	10003e26 	beq	r2,zero,20d48 <__sfvwrite_r+0x4a4>
   20c50:	10800044 	addi	r2,r2,1
   20c54:	1727c83a 	sub	r19,r2,fp
   20c58:	02000044 	movi	r8,1
   20c5c:	003f9d06 	br	20ad4 <__alt_data_end+0xfffe16d4>
   20c60:	80800517 	ldw	r2,20(r16)
   20c64:	81400417 	ldw	r5,16(r16)
   20c68:	81c00017 	ldw	r7,0(r16)
   20c6c:	10a7883a 	add	r19,r2,r2
   20c70:	9885883a 	add	r2,r19,r2
   20c74:	1026d7fa 	srli	r19,r2,31
   20c78:	396dc83a 	sub	r22,r7,r5
   20c7c:	b1000044 	addi	r4,r22,1
   20c80:	9885883a 	add	r2,r19,r2
   20c84:	1027d07a 	srai	r19,r2,1
   20c88:	2485883a 	add	r2,r4,r18
   20c8c:	980d883a 	mov	r6,r19
   20c90:	9880022e 	bgeu	r19,r2,20c9c <__sfvwrite_r+0x3f8>
   20c94:	1027883a 	mov	r19,r2
   20c98:	100d883a 	mov	r6,r2
   20c9c:	18c1000c 	andi	r3,r3,1024
   20ca0:	18001c26 	beq	r3,zero,20d14 <__sfvwrite_r+0x470>
   20ca4:	300b883a 	mov	r5,r6
   20ca8:	a809883a 	mov	r4,r21
   20cac:	0020ef40 	call	20ef4 <_malloc_r>
   20cb0:	102f883a 	mov	r23,r2
   20cb4:	10002926 	beq	r2,zero,20d5c <__sfvwrite_r+0x4b8>
   20cb8:	81400417 	ldw	r5,16(r16)
   20cbc:	b00d883a 	mov	r6,r22
   20cc0:	1009883a 	mov	r4,r2
   20cc4:	00217e40 	call	217e4 <memcpy>
   20cc8:	8080030b 	ldhu	r2,12(r16)
   20ccc:	00fedfc4 	movi	r3,-1153
   20cd0:	10c4703a 	and	r2,r2,r3
   20cd4:	10802014 	ori	r2,r2,128
   20cd8:	8080030d 	sth	r2,12(r16)
   20cdc:	bd89883a 	add	r4,r23,r22
   20ce0:	9d8fc83a 	sub	r7,r19,r22
   20ce4:	85c00415 	stw	r23,16(r16)
   20ce8:	84c00515 	stw	r19,20(r16)
   20cec:	81000015 	stw	r4,0(r16)
   20cf0:	9027883a 	mov	r19,r18
   20cf4:	81c00215 	stw	r7,8(r16)
   20cf8:	902f883a 	mov	r23,r18
   20cfc:	003f3806 	br	209e0 <__alt_data_end+0xfffe15e0>
   20d00:	800b883a 	mov	r5,r16
   20d04:	a809883a 	mov	r4,r21
   20d08:	00227cc0 	call	227cc <_fflush_r>
   20d0c:	103fb926 	beq	r2,zero,20bf4 <__alt_data_end+0xfffe17f4>
   20d10:	003f6506 	br	20aa8 <__alt_data_end+0xfffe16a8>
   20d14:	a809883a 	mov	r4,r21
   20d18:	0021bb00 	call	21bb0 <_realloc_r>
   20d1c:	102f883a 	mov	r23,r2
   20d20:	103fee1e 	bne	r2,zero,20cdc <__alt_data_end+0xfffe18dc>
   20d24:	81400417 	ldw	r5,16(r16)
   20d28:	a809883a 	mov	r4,r21
   20d2c:	002297c0 	call	2297c <_free_r>
   20d30:	8080030b 	ldhu	r2,12(r16)
   20d34:	00ffdfc4 	movi	r3,-129
   20d38:	1884703a 	and	r2,r3,r2
   20d3c:	00c00304 	movi	r3,12
   20d40:	a8c00015 	stw	r3,0(r21)
   20d44:	003f5906 	br	20aac <__alt_data_end+0xfffe16ac>
   20d48:	94c00044 	addi	r19,r18,1
   20d4c:	02000044 	movi	r8,1
   20d50:	003f6006 	br	20ad4 <__alt_data_end+0xfffe16d4>
   20d54:	00bfffc4 	movi	r2,-1
   20d58:	003f0006 	br	2095c <__alt_data_end+0xfffe155c>
   20d5c:	00800304 	movi	r2,12
   20d60:	a8800015 	stw	r2,0(r21)
   20d64:	8080030b 	ldhu	r2,12(r16)
   20d68:	003f5006 	br	20aac <__alt_data_end+0xfffe16ac>

00020d6c <_fwalk>:
   20d6c:	defff704 	addi	sp,sp,-36
   20d70:	dd000415 	stw	r20,16(sp)
   20d74:	dfc00815 	stw	ra,32(sp)
   20d78:	ddc00715 	stw	r23,28(sp)
   20d7c:	dd800615 	stw	r22,24(sp)
   20d80:	dd400515 	stw	r21,20(sp)
   20d84:	dcc00315 	stw	r19,12(sp)
   20d88:	dc800215 	stw	r18,8(sp)
   20d8c:	dc400115 	stw	r17,4(sp)
   20d90:	dc000015 	stw	r16,0(sp)
   20d94:	2500b804 	addi	r20,r4,736
   20d98:	a0002326 	beq	r20,zero,20e28 <_fwalk+0xbc>
   20d9c:	282b883a 	mov	r21,r5
   20da0:	002f883a 	mov	r23,zero
   20da4:	05800044 	movi	r22,1
   20da8:	04ffffc4 	movi	r19,-1
   20dac:	a4400117 	ldw	r17,4(r20)
   20db0:	a4800217 	ldw	r18,8(r20)
   20db4:	8c7fffc4 	addi	r17,r17,-1
   20db8:	88000d16 	blt	r17,zero,20df0 <_fwalk+0x84>
   20dbc:	94000304 	addi	r16,r18,12
   20dc0:	94800384 	addi	r18,r18,14
   20dc4:	8080000b 	ldhu	r2,0(r16)
   20dc8:	8c7fffc4 	addi	r17,r17,-1
   20dcc:	813ffd04 	addi	r4,r16,-12
   20dd0:	b080042e 	bgeu	r22,r2,20de4 <_fwalk+0x78>
   20dd4:	9080000f 	ldh	r2,0(r18)
   20dd8:	14c00226 	beq	r2,r19,20de4 <_fwalk+0x78>
   20ddc:	a83ee83a 	callr	r21
   20de0:	b8aeb03a 	or	r23,r23,r2
   20de4:	84001a04 	addi	r16,r16,104
   20de8:	94801a04 	addi	r18,r18,104
   20dec:	8cfff51e 	bne	r17,r19,20dc4 <__alt_data_end+0xfffe19c4>
   20df0:	a5000017 	ldw	r20,0(r20)
   20df4:	a03fed1e 	bne	r20,zero,20dac <__alt_data_end+0xfffe19ac>
   20df8:	b805883a 	mov	r2,r23
   20dfc:	dfc00817 	ldw	ra,32(sp)
   20e00:	ddc00717 	ldw	r23,28(sp)
   20e04:	dd800617 	ldw	r22,24(sp)
   20e08:	dd400517 	ldw	r21,20(sp)
   20e0c:	dd000417 	ldw	r20,16(sp)
   20e10:	dcc00317 	ldw	r19,12(sp)
   20e14:	dc800217 	ldw	r18,8(sp)
   20e18:	dc400117 	ldw	r17,4(sp)
   20e1c:	dc000017 	ldw	r16,0(sp)
   20e20:	dec00904 	addi	sp,sp,36
   20e24:	f800283a 	ret
   20e28:	002f883a 	mov	r23,zero
   20e2c:	003ff206 	br	20df8 <__alt_data_end+0xfffe19f8>

00020e30 <_fwalk_reent>:
   20e30:	defff704 	addi	sp,sp,-36
   20e34:	dd000415 	stw	r20,16(sp)
   20e38:	dfc00815 	stw	ra,32(sp)
   20e3c:	ddc00715 	stw	r23,28(sp)
   20e40:	dd800615 	stw	r22,24(sp)
   20e44:	dd400515 	stw	r21,20(sp)
   20e48:	dcc00315 	stw	r19,12(sp)
   20e4c:	dc800215 	stw	r18,8(sp)
   20e50:	dc400115 	stw	r17,4(sp)
   20e54:	dc000015 	stw	r16,0(sp)
   20e58:	2500b804 	addi	r20,r4,736
   20e5c:	a0002326 	beq	r20,zero,20eec <_fwalk_reent+0xbc>
   20e60:	282b883a 	mov	r21,r5
   20e64:	2027883a 	mov	r19,r4
   20e68:	002f883a 	mov	r23,zero
   20e6c:	05800044 	movi	r22,1
   20e70:	04bfffc4 	movi	r18,-1
   20e74:	a4400117 	ldw	r17,4(r20)
   20e78:	a4000217 	ldw	r16,8(r20)
   20e7c:	8c7fffc4 	addi	r17,r17,-1
   20e80:	88000c16 	blt	r17,zero,20eb4 <_fwalk_reent+0x84>
   20e84:	84000304 	addi	r16,r16,12
   20e88:	8080000b 	ldhu	r2,0(r16)
   20e8c:	8c7fffc4 	addi	r17,r17,-1
   20e90:	817ffd04 	addi	r5,r16,-12
   20e94:	b080052e 	bgeu	r22,r2,20eac <_fwalk_reent+0x7c>
   20e98:	8080008f 	ldh	r2,2(r16)
   20e9c:	9809883a 	mov	r4,r19
   20ea0:	14800226 	beq	r2,r18,20eac <_fwalk_reent+0x7c>
   20ea4:	a83ee83a 	callr	r21
   20ea8:	b8aeb03a 	or	r23,r23,r2
   20eac:	84001a04 	addi	r16,r16,104
   20eb0:	8cbff51e 	bne	r17,r18,20e88 <__alt_data_end+0xfffe1a88>
   20eb4:	a5000017 	ldw	r20,0(r20)
   20eb8:	a03fee1e 	bne	r20,zero,20e74 <__alt_data_end+0xfffe1a74>
   20ebc:	b805883a 	mov	r2,r23
   20ec0:	dfc00817 	ldw	ra,32(sp)
   20ec4:	ddc00717 	ldw	r23,28(sp)
   20ec8:	dd800617 	ldw	r22,24(sp)
   20ecc:	dd400517 	ldw	r21,20(sp)
   20ed0:	dd000417 	ldw	r20,16(sp)
   20ed4:	dcc00317 	ldw	r19,12(sp)
   20ed8:	dc800217 	ldw	r18,8(sp)
   20edc:	dc400117 	ldw	r17,4(sp)
   20ee0:	dc000017 	ldw	r16,0(sp)
   20ee4:	dec00904 	addi	sp,sp,36
   20ee8:	f800283a 	ret
   20eec:	002f883a 	mov	r23,zero
   20ef0:	003ff206 	br	20ebc <__alt_data_end+0xfffe1abc>

00020ef4 <_malloc_r>:
   20ef4:	defff504 	addi	sp,sp,-44
   20ef8:	dc800315 	stw	r18,12(sp)
   20efc:	dfc00a15 	stw	ra,40(sp)
   20f00:	df000915 	stw	fp,36(sp)
   20f04:	ddc00815 	stw	r23,32(sp)
   20f08:	dd800715 	stw	r22,28(sp)
   20f0c:	dd400615 	stw	r21,24(sp)
   20f10:	dd000515 	stw	r20,20(sp)
   20f14:	dcc00415 	stw	r19,16(sp)
   20f18:	dc400215 	stw	r17,8(sp)
   20f1c:	dc000115 	stw	r16,4(sp)
   20f20:	288002c4 	addi	r2,r5,11
   20f24:	00c00584 	movi	r3,22
   20f28:	2025883a 	mov	r18,r4
   20f2c:	18807f2e 	bgeu	r3,r2,2112c <_malloc_r+0x238>
   20f30:	047ffe04 	movi	r17,-8
   20f34:	1462703a 	and	r17,r2,r17
   20f38:	8800a316 	blt	r17,zero,211c8 <_malloc_r+0x2d4>
   20f3c:	8940a236 	bltu	r17,r5,211c8 <_malloc_r+0x2d4>
   20f40:	0023c440 	call	23c44 <__malloc_lock>
   20f44:	00807dc4 	movi	r2,503
   20f48:	1441e92e 	bgeu	r2,r17,216f0 <_malloc_r+0x7fc>
   20f4c:	8804d27a 	srli	r2,r17,9
   20f50:	1000a126 	beq	r2,zero,211d8 <_malloc_r+0x2e4>
   20f54:	00c00104 	movi	r3,4
   20f58:	18811e36 	bltu	r3,r2,213d4 <_malloc_r+0x4e0>
   20f5c:	8804d1ba 	srli	r2,r17,6
   20f60:	12000e44 	addi	r8,r2,57
   20f64:	11c00e04 	addi	r7,r2,56
   20f68:	4209883a 	add	r4,r8,r8
   20f6c:	04c000f4 	movhi	r19,3
   20f70:	2109883a 	add	r4,r4,r4
   20f74:	9cf80904 	addi	r19,r19,-8156
   20f78:	2109883a 	add	r4,r4,r4
   20f7c:	9909883a 	add	r4,r19,r4
   20f80:	24000117 	ldw	r16,4(r4)
   20f84:	213ffe04 	addi	r4,r4,-8
   20f88:	24009726 	beq	r4,r16,211e8 <_malloc_r+0x2f4>
   20f8c:	80800117 	ldw	r2,4(r16)
   20f90:	01bfff04 	movi	r6,-4
   20f94:	014003c4 	movi	r5,15
   20f98:	1184703a 	and	r2,r2,r6
   20f9c:	1447c83a 	sub	r3,r2,r17
   20fa0:	28c00716 	blt	r5,r3,20fc0 <_malloc_r+0xcc>
   20fa4:	1800920e 	bge	r3,zero,211f0 <_malloc_r+0x2fc>
   20fa8:	84000317 	ldw	r16,12(r16)
   20fac:	24008e26 	beq	r4,r16,211e8 <_malloc_r+0x2f4>
   20fb0:	80800117 	ldw	r2,4(r16)
   20fb4:	1184703a 	and	r2,r2,r6
   20fb8:	1447c83a 	sub	r3,r2,r17
   20fbc:	28fff90e 	bge	r5,r3,20fa4 <__alt_data_end+0xfffe1ba4>
   20fc0:	3809883a 	mov	r4,r7
   20fc4:	018000f4 	movhi	r6,3
   20fc8:	9c000417 	ldw	r16,16(r19)
   20fcc:	31b80904 	addi	r6,r6,-8156
   20fd0:	32000204 	addi	r8,r6,8
   20fd4:	82013426 	beq	r16,r8,214a8 <_malloc_r+0x5b4>
   20fd8:	80c00117 	ldw	r3,4(r16)
   20fdc:	00bfff04 	movi	r2,-4
   20fe0:	188e703a 	and	r7,r3,r2
   20fe4:	3c45c83a 	sub	r2,r7,r17
   20fe8:	00c003c4 	movi	r3,15
   20fec:	18811f16 	blt	r3,r2,2146c <_malloc_r+0x578>
   20ff0:	32000515 	stw	r8,20(r6)
   20ff4:	32000415 	stw	r8,16(r6)
   20ff8:	10007f0e 	bge	r2,zero,211f8 <_malloc_r+0x304>
   20ffc:	00807fc4 	movi	r2,511
   21000:	11c0fd36 	bltu	r2,r7,213f8 <_malloc_r+0x504>
   21004:	3806d0fa 	srli	r3,r7,3
   21008:	01c00044 	movi	r7,1
   2100c:	30800117 	ldw	r2,4(r6)
   21010:	19400044 	addi	r5,r3,1
   21014:	294b883a 	add	r5,r5,r5
   21018:	1807d0ba 	srai	r3,r3,2
   2101c:	294b883a 	add	r5,r5,r5
   21020:	294b883a 	add	r5,r5,r5
   21024:	298b883a 	add	r5,r5,r6
   21028:	38c6983a 	sll	r3,r7,r3
   2102c:	29c00017 	ldw	r7,0(r5)
   21030:	2a7ffe04 	addi	r9,r5,-8
   21034:	1886b03a 	or	r3,r3,r2
   21038:	82400315 	stw	r9,12(r16)
   2103c:	81c00215 	stw	r7,8(r16)
   21040:	30c00115 	stw	r3,4(r6)
   21044:	2c000015 	stw	r16,0(r5)
   21048:	3c000315 	stw	r16,12(r7)
   2104c:	2005d0ba 	srai	r2,r4,2
   21050:	01400044 	movi	r5,1
   21054:	288a983a 	sll	r5,r5,r2
   21058:	19406f36 	bltu	r3,r5,21218 <_malloc_r+0x324>
   2105c:	28c4703a 	and	r2,r5,r3
   21060:	10000a1e 	bne	r2,zero,2108c <_malloc_r+0x198>
   21064:	00bfff04 	movi	r2,-4
   21068:	294b883a 	add	r5,r5,r5
   2106c:	2088703a 	and	r4,r4,r2
   21070:	28c4703a 	and	r2,r5,r3
   21074:	21000104 	addi	r4,r4,4
   21078:	1000041e 	bne	r2,zero,2108c <_malloc_r+0x198>
   2107c:	294b883a 	add	r5,r5,r5
   21080:	28c4703a 	and	r2,r5,r3
   21084:	21000104 	addi	r4,r4,4
   21088:	103ffc26 	beq	r2,zero,2107c <__alt_data_end+0xfffe1c7c>
   2108c:	02bfff04 	movi	r10,-4
   21090:	024003c4 	movi	r9,15
   21094:	21800044 	addi	r6,r4,1
   21098:	318d883a 	add	r6,r6,r6
   2109c:	318d883a 	add	r6,r6,r6
   210a0:	318d883a 	add	r6,r6,r6
   210a4:	998d883a 	add	r6,r19,r6
   210a8:	333ffe04 	addi	r12,r6,-8
   210ac:	2017883a 	mov	r11,r4
   210b0:	31800104 	addi	r6,r6,4
   210b4:	34000017 	ldw	r16,0(r6)
   210b8:	31fffd04 	addi	r7,r6,-12
   210bc:	81c0041e 	bne	r16,r7,210d0 <_malloc_r+0x1dc>
   210c0:	0000fb06 	br	214b0 <_malloc_r+0x5bc>
   210c4:	1801030e 	bge	r3,zero,214d4 <_malloc_r+0x5e0>
   210c8:	84000317 	ldw	r16,12(r16)
   210cc:	81c0f826 	beq	r16,r7,214b0 <_malloc_r+0x5bc>
   210d0:	80800117 	ldw	r2,4(r16)
   210d4:	1284703a 	and	r2,r2,r10
   210d8:	1447c83a 	sub	r3,r2,r17
   210dc:	48fff90e 	bge	r9,r3,210c4 <__alt_data_end+0xfffe1cc4>
   210e0:	80800317 	ldw	r2,12(r16)
   210e4:	81000217 	ldw	r4,8(r16)
   210e8:	89400054 	ori	r5,r17,1
   210ec:	81400115 	stw	r5,4(r16)
   210f0:	20800315 	stw	r2,12(r4)
   210f4:	11000215 	stw	r4,8(r2)
   210f8:	8463883a 	add	r17,r16,r17
   210fc:	9c400515 	stw	r17,20(r19)
   21100:	9c400415 	stw	r17,16(r19)
   21104:	18800054 	ori	r2,r3,1
   21108:	88800115 	stw	r2,4(r17)
   2110c:	8a000315 	stw	r8,12(r17)
   21110:	8a000215 	stw	r8,8(r17)
   21114:	88e3883a 	add	r17,r17,r3
   21118:	88c00015 	stw	r3,0(r17)
   2111c:	9009883a 	mov	r4,r18
   21120:	0023d640 	call	23d64 <__malloc_unlock>
   21124:	80800204 	addi	r2,r16,8
   21128:	00001b06 	br	21198 <_malloc_r+0x2a4>
   2112c:	04400404 	movi	r17,16
   21130:	89402536 	bltu	r17,r5,211c8 <_malloc_r+0x2d4>
   21134:	0023c440 	call	23c44 <__malloc_lock>
   21138:	00800184 	movi	r2,6
   2113c:	01000084 	movi	r4,2
   21140:	04c000f4 	movhi	r19,3
   21144:	1085883a 	add	r2,r2,r2
   21148:	9cf80904 	addi	r19,r19,-8156
   2114c:	1085883a 	add	r2,r2,r2
   21150:	9885883a 	add	r2,r19,r2
   21154:	14000117 	ldw	r16,4(r2)
   21158:	10fffe04 	addi	r3,r2,-8
   2115c:	80c0d926 	beq	r16,r3,214c4 <_malloc_r+0x5d0>
   21160:	80c00117 	ldw	r3,4(r16)
   21164:	81000317 	ldw	r4,12(r16)
   21168:	00bfff04 	movi	r2,-4
   2116c:	1884703a 	and	r2,r3,r2
   21170:	81400217 	ldw	r5,8(r16)
   21174:	8085883a 	add	r2,r16,r2
   21178:	10c00117 	ldw	r3,4(r2)
   2117c:	29000315 	stw	r4,12(r5)
   21180:	21400215 	stw	r5,8(r4)
   21184:	18c00054 	ori	r3,r3,1
   21188:	10c00115 	stw	r3,4(r2)
   2118c:	9009883a 	mov	r4,r18
   21190:	0023d640 	call	23d64 <__malloc_unlock>
   21194:	80800204 	addi	r2,r16,8
   21198:	dfc00a17 	ldw	ra,40(sp)
   2119c:	df000917 	ldw	fp,36(sp)
   211a0:	ddc00817 	ldw	r23,32(sp)
   211a4:	dd800717 	ldw	r22,28(sp)
   211a8:	dd400617 	ldw	r21,24(sp)
   211ac:	dd000517 	ldw	r20,20(sp)
   211b0:	dcc00417 	ldw	r19,16(sp)
   211b4:	dc800317 	ldw	r18,12(sp)
   211b8:	dc400217 	ldw	r17,8(sp)
   211bc:	dc000117 	ldw	r16,4(sp)
   211c0:	dec00b04 	addi	sp,sp,44
   211c4:	f800283a 	ret
   211c8:	00800304 	movi	r2,12
   211cc:	90800015 	stw	r2,0(r18)
   211d0:	0005883a 	mov	r2,zero
   211d4:	003ff006 	br	21198 <__alt_data_end+0xfffe1d98>
   211d8:	01002004 	movi	r4,128
   211dc:	02001004 	movi	r8,64
   211e0:	01c00fc4 	movi	r7,63
   211e4:	003f6106 	br	20f6c <__alt_data_end+0xfffe1b6c>
   211e8:	4009883a 	mov	r4,r8
   211ec:	003f7506 	br	20fc4 <__alt_data_end+0xfffe1bc4>
   211f0:	81000317 	ldw	r4,12(r16)
   211f4:	003fde06 	br	21170 <__alt_data_end+0xfffe1d70>
   211f8:	81c5883a 	add	r2,r16,r7
   211fc:	11400117 	ldw	r5,4(r2)
   21200:	9009883a 	mov	r4,r18
   21204:	29400054 	ori	r5,r5,1
   21208:	11400115 	stw	r5,4(r2)
   2120c:	0023d640 	call	23d64 <__malloc_unlock>
   21210:	80800204 	addi	r2,r16,8
   21214:	003fe006 	br	21198 <__alt_data_end+0xfffe1d98>
   21218:	9c000217 	ldw	r16,8(r19)
   2121c:	00bfff04 	movi	r2,-4
   21220:	85800117 	ldw	r22,4(r16)
   21224:	b0ac703a 	and	r22,r22,r2
   21228:	b4400336 	bltu	r22,r17,21238 <_malloc_r+0x344>
   2122c:	b445c83a 	sub	r2,r22,r17
   21230:	00c003c4 	movi	r3,15
   21234:	18805d16 	blt	r3,r2,213ac <_malloc_r+0x4b8>
   21238:	05c000f4 	movhi	r23,3
   2123c:	008000f4 	movhi	r2,3
   21240:	10847c04 	addi	r2,r2,4592
   21244:	bdfd9204 	addi	r23,r23,-2488
   21248:	15400017 	ldw	r21,0(r2)
   2124c:	b8c00017 	ldw	r3,0(r23)
   21250:	00bfffc4 	movi	r2,-1
   21254:	858d883a 	add	r6,r16,r22
   21258:	8d6b883a 	add	r21,r17,r21
   2125c:	1880ea26 	beq	r3,r2,21608 <_malloc_r+0x714>
   21260:	ad4403c4 	addi	r21,r21,4111
   21264:	00bc0004 	movi	r2,-4096
   21268:	a8aa703a 	and	r21,r21,r2
   2126c:	a80b883a 	mov	r5,r21
   21270:	9009883a 	mov	r4,r18
   21274:	d9800015 	stw	r6,0(sp)
   21278:	00221140 	call	22114 <_sbrk_r>
   2127c:	1029883a 	mov	r20,r2
   21280:	00bfffc4 	movi	r2,-1
   21284:	d9800017 	ldw	r6,0(sp)
   21288:	a080e826 	beq	r20,r2,2162c <_malloc_r+0x738>
   2128c:	a180a636 	bltu	r20,r6,21528 <_malloc_r+0x634>
   21290:	070000f4 	movhi	fp,3
   21294:	e7049e04 	addi	fp,fp,4728
   21298:	e0800017 	ldw	r2,0(fp)
   2129c:	a887883a 	add	r3,r21,r2
   212a0:	e0c00015 	stw	r3,0(fp)
   212a4:	3500e626 	beq	r6,r20,21640 <_malloc_r+0x74c>
   212a8:	b9000017 	ldw	r4,0(r23)
   212ac:	00bfffc4 	movi	r2,-1
   212b0:	2080ee26 	beq	r4,r2,2166c <_malloc_r+0x778>
   212b4:	a185c83a 	sub	r2,r20,r6
   212b8:	10c5883a 	add	r2,r2,r3
   212bc:	e0800015 	stw	r2,0(fp)
   212c0:	a0c001cc 	andi	r3,r20,7
   212c4:	1800bc26 	beq	r3,zero,215b8 <_malloc_r+0x6c4>
   212c8:	a0e9c83a 	sub	r20,r20,r3
   212cc:	00840204 	movi	r2,4104
   212d0:	a5000204 	addi	r20,r20,8
   212d4:	10c7c83a 	sub	r3,r2,r3
   212d8:	a545883a 	add	r2,r20,r21
   212dc:	1083ffcc 	andi	r2,r2,4095
   212e0:	18abc83a 	sub	r21,r3,r2
   212e4:	a80b883a 	mov	r5,r21
   212e8:	9009883a 	mov	r4,r18
   212ec:	00221140 	call	22114 <_sbrk_r>
   212f0:	00ffffc4 	movi	r3,-1
   212f4:	10c0e126 	beq	r2,r3,2167c <_malloc_r+0x788>
   212f8:	1505c83a 	sub	r2,r2,r20
   212fc:	1545883a 	add	r2,r2,r21
   21300:	10800054 	ori	r2,r2,1
   21304:	e0c00017 	ldw	r3,0(fp)
   21308:	9d000215 	stw	r20,8(r19)
   2130c:	a0800115 	stw	r2,4(r20)
   21310:	a8c7883a 	add	r3,r21,r3
   21314:	e0c00015 	stw	r3,0(fp)
   21318:	84c00e26 	beq	r16,r19,21354 <_malloc_r+0x460>
   2131c:	018003c4 	movi	r6,15
   21320:	3580a72e 	bgeu	r6,r22,215c0 <_malloc_r+0x6cc>
   21324:	81400117 	ldw	r5,4(r16)
   21328:	013ffe04 	movi	r4,-8
   2132c:	b0bffd04 	addi	r2,r22,-12
   21330:	1104703a 	and	r2,r2,r4
   21334:	2900004c 	andi	r4,r5,1
   21338:	2088b03a 	or	r4,r4,r2
   2133c:	81000115 	stw	r4,4(r16)
   21340:	01400144 	movi	r5,5
   21344:	8089883a 	add	r4,r16,r2
   21348:	21400115 	stw	r5,4(r4)
   2134c:	21400215 	stw	r5,8(r4)
   21350:	3080cd36 	bltu	r6,r2,21688 <_malloc_r+0x794>
   21354:	008000f4 	movhi	r2,3
   21358:	10847b04 	addi	r2,r2,4588
   2135c:	11000017 	ldw	r4,0(r2)
   21360:	20c0012e 	bgeu	r4,r3,21368 <_malloc_r+0x474>
   21364:	10c00015 	stw	r3,0(r2)
   21368:	008000f4 	movhi	r2,3
   2136c:	10847a04 	addi	r2,r2,4584
   21370:	11000017 	ldw	r4,0(r2)
   21374:	9c000217 	ldw	r16,8(r19)
   21378:	20c0012e 	bgeu	r4,r3,21380 <_malloc_r+0x48c>
   2137c:	10c00015 	stw	r3,0(r2)
   21380:	80c00117 	ldw	r3,4(r16)
   21384:	00bfff04 	movi	r2,-4
   21388:	1886703a 	and	r3,r3,r2
   2138c:	1c45c83a 	sub	r2,r3,r17
   21390:	1c400236 	bltu	r3,r17,2139c <_malloc_r+0x4a8>
   21394:	00c003c4 	movi	r3,15
   21398:	18800416 	blt	r3,r2,213ac <_malloc_r+0x4b8>
   2139c:	9009883a 	mov	r4,r18
   213a0:	0023d640 	call	23d64 <__malloc_unlock>
   213a4:	0005883a 	mov	r2,zero
   213a8:	003f7b06 	br	21198 <__alt_data_end+0xfffe1d98>
   213ac:	88c00054 	ori	r3,r17,1
   213b0:	80c00115 	stw	r3,4(r16)
   213b4:	8463883a 	add	r17,r16,r17
   213b8:	10800054 	ori	r2,r2,1
   213bc:	9c400215 	stw	r17,8(r19)
   213c0:	88800115 	stw	r2,4(r17)
   213c4:	9009883a 	mov	r4,r18
   213c8:	0023d640 	call	23d64 <__malloc_unlock>
   213cc:	80800204 	addi	r2,r16,8
   213d0:	003f7106 	br	21198 <__alt_data_end+0xfffe1d98>
   213d4:	00c00504 	movi	r3,20
   213d8:	18804a2e 	bgeu	r3,r2,21504 <_malloc_r+0x610>
   213dc:	00c01504 	movi	r3,84
   213e0:	18806e36 	bltu	r3,r2,2159c <_malloc_r+0x6a8>
   213e4:	8804d33a 	srli	r2,r17,12
   213e8:	12001bc4 	addi	r8,r2,111
   213ec:	11c01b84 	addi	r7,r2,110
   213f0:	4209883a 	add	r4,r8,r8
   213f4:	003edd06 	br	20f6c <__alt_data_end+0xfffe1b6c>
   213f8:	3804d27a 	srli	r2,r7,9
   213fc:	00c00104 	movi	r3,4
   21400:	1880442e 	bgeu	r3,r2,21514 <_malloc_r+0x620>
   21404:	00c00504 	movi	r3,20
   21408:	18808136 	bltu	r3,r2,21610 <_malloc_r+0x71c>
   2140c:	11401704 	addi	r5,r2,92
   21410:	10c016c4 	addi	r3,r2,91
   21414:	294b883a 	add	r5,r5,r5
   21418:	294b883a 	add	r5,r5,r5
   2141c:	294b883a 	add	r5,r5,r5
   21420:	994b883a 	add	r5,r19,r5
   21424:	28800017 	ldw	r2,0(r5)
   21428:	018000f4 	movhi	r6,3
   2142c:	297ffe04 	addi	r5,r5,-8
   21430:	31b80904 	addi	r6,r6,-8156
   21434:	28806526 	beq	r5,r2,215cc <_malloc_r+0x6d8>
   21438:	01bfff04 	movi	r6,-4
   2143c:	10c00117 	ldw	r3,4(r2)
   21440:	1986703a 	and	r3,r3,r6
   21444:	38c0022e 	bgeu	r7,r3,21450 <_malloc_r+0x55c>
   21448:	10800217 	ldw	r2,8(r2)
   2144c:	28bffb1e 	bne	r5,r2,2143c <__alt_data_end+0xfffe203c>
   21450:	11400317 	ldw	r5,12(r2)
   21454:	98c00117 	ldw	r3,4(r19)
   21458:	81400315 	stw	r5,12(r16)
   2145c:	80800215 	stw	r2,8(r16)
   21460:	2c000215 	stw	r16,8(r5)
   21464:	14000315 	stw	r16,12(r2)
   21468:	003ef806 	br	2104c <__alt_data_end+0xfffe1c4c>
   2146c:	88c00054 	ori	r3,r17,1
   21470:	80c00115 	stw	r3,4(r16)
   21474:	8463883a 	add	r17,r16,r17
   21478:	34400515 	stw	r17,20(r6)
   2147c:	34400415 	stw	r17,16(r6)
   21480:	10c00054 	ori	r3,r2,1
   21484:	8a000315 	stw	r8,12(r17)
   21488:	8a000215 	stw	r8,8(r17)
   2148c:	88c00115 	stw	r3,4(r17)
   21490:	88a3883a 	add	r17,r17,r2
   21494:	88800015 	stw	r2,0(r17)
   21498:	9009883a 	mov	r4,r18
   2149c:	0023d640 	call	23d64 <__malloc_unlock>
   214a0:	80800204 	addi	r2,r16,8
   214a4:	003f3c06 	br	21198 <__alt_data_end+0xfffe1d98>
   214a8:	30c00117 	ldw	r3,4(r6)
   214ac:	003ee706 	br	2104c <__alt_data_end+0xfffe1c4c>
   214b0:	5ac00044 	addi	r11,r11,1
   214b4:	588000cc 	andi	r2,r11,3
   214b8:	31800204 	addi	r6,r6,8
   214bc:	103efd1e 	bne	r2,zero,210b4 <__alt_data_end+0xfffe1cb4>
   214c0:	00002406 	br	21554 <_malloc_r+0x660>
   214c4:	14000317 	ldw	r16,12(r2)
   214c8:	143f251e 	bne	r2,r16,21160 <__alt_data_end+0xfffe1d60>
   214cc:	21000084 	addi	r4,r4,2
   214d0:	003ebc06 	br	20fc4 <__alt_data_end+0xfffe1bc4>
   214d4:	8085883a 	add	r2,r16,r2
   214d8:	10c00117 	ldw	r3,4(r2)
   214dc:	81000317 	ldw	r4,12(r16)
   214e0:	81400217 	ldw	r5,8(r16)
   214e4:	18c00054 	ori	r3,r3,1
   214e8:	10c00115 	stw	r3,4(r2)
   214ec:	29000315 	stw	r4,12(r5)
   214f0:	21400215 	stw	r5,8(r4)
   214f4:	9009883a 	mov	r4,r18
   214f8:	0023d640 	call	23d64 <__malloc_unlock>
   214fc:	80800204 	addi	r2,r16,8
   21500:	003f2506 	br	21198 <__alt_data_end+0xfffe1d98>
   21504:	12001704 	addi	r8,r2,92
   21508:	11c016c4 	addi	r7,r2,91
   2150c:	4209883a 	add	r4,r8,r8
   21510:	003e9606 	br	20f6c <__alt_data_end+0xfffe1b6c>
   21514:	3804d1ba 	srli	r2,r7,6
   21518:	11400e44 	addi	r5,r2,57
   2151c:	10c00e04 	addi	r3,r2,56
   21520:	294b883a 	add	r5,r5,r5
   21524:	003fbc06 	br	21418 <__alt_data_end+0xfffe2018>
   21528:	84ff5926 	beq	r16,r19,21290 <__alt_data_end+0xfffe1e90>
   2152c:	008000f4 	movhi	r2,3
   21530:	10b80904 	addi	r2,r2,-8156
   21534:	14000217 	ldw	r16,8(r2)
   21538:	00bfff04 	movi	r2,-4
   2153c:	80c00117 	ldw	r3,4(r16)
   21540:	1886703a 	and	r3,r3,r2
   21544:	003f9106 	br	2138c <__alt_data_end+0xfffe1f8c>
   21548:	60800217 	ldw	r2,8(r12)
   2154c:	213fffc4 	addi	r4,r4,-1
   21550:	1300651e 	bne	r2,r12,216e8 <_malloc_r+0x7f4>
   21554:	208000cc 	andi	r2,r4,3
   21558:	633ffe04 	addi	r12,r12,-8
   2155c:	103ffa1e 	bne	r2,zero,21548 <__alt_data_end+0xfffe2148>
   21560:	98800117 	ldw	r2,4(r19)
   21564:	0146303a 	nor	r3,zero,r5
   21568:	1884703a 	and	r2,r3,r2
   2156c:	98800115 	stw	r2,4(r19)
   21570:	294b883a 	add	r5,r5,r5
   21574:	117f2836 	bltu	r2,r5,21218 <__alt_data_end+0xfffe1e18>
   21578:	283f2726 	beq	r5,zero,21218 <__alt_data_end+0xfffe1e18>
   2157c:	2886703a 	and	r3,r5,r2
   21580:	5809883a 	mov	r4,r11
   21584:	183ec31e 	bne	r3,zero,21094 <__alt_data_end+0xfffe1c94>
   21588:	294b883a 	add	r5,r5,r5
   2158c:	2886703a 	and	r3,r5,r2
   21590:	21000104 	addi	r4,r4,4
   21594:	183ffc26 	beq	r3,zero,21588 <__alt_data_end+0xfffe2188>
   21598:	003ebe06 	br	21094 <__alt_data_end+0xfffe1c94>
   2159c:	00c05504 	movi	r3,340
   215a0:	18801236 	bltu	r3,r2,215ec <_malloc_r+0x6f8>
   215a4:	8804d3fa 	srli	r2,r17,15
   215a8:	12001e04 	addi	r8,r2,120
   215ac:	11c01dc4 	addi	r7,r2,119
   215b0:	4209883a 	add	r4,r8,r8
   215b4:	003e6d06 	br	20f6c <__alt_data_end+0xfffe1b6c>
   215b8:	00c40004 	movi	r3,4096
   215bc:	003f4606 	br	212d8 <__alt_data_end+0xfffe1ed8>
   215c0:	00800044 	movi	r2,1
   215c4:	a0800115 	stw	r2,4(r20)
   215c8:	003f7406 	br	2139c <__alt_data_end+0xfffe1f9c>
   215cc:	1805d0ba 	srai	r2,r3,2
   215d0:	01c00044 	movi	r7,1
   215d4:	30c00117 	ldw	r3,4(r6)
   215d8:	388e983a 	sll	r7,r7,r2
   215dc:	2805883a 	mov	r2,r5
   215e0:	38c6b03a 	or	r3,r7,r3
   215e4:	30c00115 	stw	r3,4(r6)
   215e8:	003f9b06 	br	21458 <__alt_data_end+0xfffe2058>
   215ec:	00c15504 	movi	r3,1364
   215f0:	18801a36 	bltu	r3,r2,2165c <_malloc_r+0x768>
   215f4:	8804d4ba 	srli	r2,r17,18
   215f8:	12001f44 	addi	r8,r2,125
   215fc:	11c01f04 	addi	r7,r2,124
   21600:	4209883a 	add	r4,r8,r8
   21604:	003e5906 	br	20f6c <__alt_data_end+0xfffe1b6c>
   21608:	ad400404 	addi	r21,r21,16
   2160c:	003f1706 	br	2126c <__alt_data_end+0xfffe1e6c>
   21610:	00c01504 	movi	r3,84
   21614:	18802336 	bltu	r3,r2,216a4 <_malloc_r+0x7b0>
   21618:	3804d33a 	srli	r2,r7,12
   2161c:	11401bc4 	addi	r5,r2,111
   21620:	10c01b84 	addi	r3,r2,110
   21624:	294b883a 	add	r5,r5,r5
   21628:	003f7b06 	br	21418 <__alt_data_end+0xfffe2018>
   2162c:	9c000217 	ldw	r16,8(r19)
   21630:	00bfff04 	movi	r2,-4
   21634:	80c00117 	ldw	r3,4(r16)
   21638:	1886703a 	and	r3,r3,r2
   2163c:	003f5306 	br	2138c <__alt_data_end+0xfffe1f8c>
   21640:	3083ffcc 	andi	r2,r6,4095
   21644:	103f181e 	bne	r2,zero,212a8 <__alt_data_end+0xfffe1ea8>
   21648:	99000217 	ldw	r4,8(r19)
   2164c:	b545883a 	add	r2,r22,r21
   21650:	10800054 	ori	r2,r2,1
   21654:	20800115 	stw	r2,4(r4)
   21658:	003f3e06 	br	21354 <__alt_data_end+0xfffe1f54>
   2165c:	01003f84 	movi	r4,254
   21660:	02001fc4 	movi	r8,127
   21664:	01c01f84 	movi	r7,126
   21668:	003e4006 	br	20f6c <__alt_data_end+0xfffe1b6c>
   2166c:	008000f4 	movhi	r2,3
   21670:	10bd9204 	addi	r2,r2,-2488
   21674:	15000015 	stw	r20,0(r2)
   21678:	003f1106 	br	212c0 <__alt_data_end+0xfffe1ec0>
   2167c:	00800044 	movi	r2,1
   21680:	002b883a 	mov	r21,zero
   21684:	003f1f06 	br	21304 <__alt_data_end+0xfffe1f04>
   21688:	81400204 	addi	r5,r16,8
   2168c:	9009883a 	mov	r4,r18
   21690:	002297c0 	call	2297c <_free_r>
   21694:	008000f4 	movhi	r2,3
   21698:	10849e04 	addi	r2,r2,4728
   2169c:	10c00017 	ldw	r3,0(r2)
   216a0:	003f2c06 	br	21354 <__alt_data_end+0xfffe1f54>
   216a4:	00c05504 	movi	r3,340
   216a8:	18800536 	bltu	r3,r2,216c0 <_malloc_r+0x7cc>
   216ac:	3804d3fa 	srli	r2,r7,15
   216b0:	11401e04 	addi	r5,r2,120
   216b4:	10c01dc4 	addi	r3,r2,119
   216b8:	294b883a 	add	r5,r5,r5
   216bc:	003f5606 	br	21418 <__alt_data_end+0xfffe2018>
   216c0:	00c15504 	movi	r3,1364
   216c4:	18800536 	bltu	r3,r2,216dc <_malloc_r+0x7e8>
   216c8:	3804d4ba 	srli	r2,r7,18
   216cc:	11401f44 	addi	r5,r2,125
   216d0:	10c01f04 	addi	r3,r2,124
   216d4:	294b883a 	add	r5,r5,r5
   216d8:	003f4f06 	br	21418 <__alt_data_end+0xfffe2018>
   216dc:	01403f84 	movi	r5,254
   216e0:	00c01f84 	movi	r3,126
   216e4:	003f4c06 	br	21418 <__alt_data_end+0xfffe2018>
   216e8:	98800117 	ldw	r2,4(r19)
   216ec:	003fa006 	br	21570 <__alt_data_end+0xfffe2170>
   216f0:	8808d0fa 	srli	r4,r17,3
   216f4:	20800044 	addi	r2,r4,1
   216f8:	1085883a 	add	r2,r2,r2
   216fc:	003e9006 	br	21140 <__alt_data_end+0xfffe1d40>

00021700 <memchr>:
   21700:	208000cc 	andi	r2,r4,3
   21704:	280f883a 	mov	r7,r5
   21708:	10003426 	beq	r2,zero,217dc <memchr+0xdc>
   2170c:	30bfffc4 	addi	r2,r6,-1
   21710:	30001a26 	beq	r6,zero,2177c <memchr+0x7c>
   21714:	20c00003 	ldbu	r3,0(r4)
   21718:	29803fcc 	andi	r6,r5,255
   2171c:	30c0051e 	bne	r6,r3,21734 <memchr+0x34>
   21720:	00001806 	br	21784 <memchr+0x84>
   21724:	10001526 	beq	r2,zero,2177c <memchr+0x7c>
   21728:	20c00003 	ldbu	r3,0(r4)
   2172c:	10bfffc4 	addi	r2,r2,-1
   21730:	30c01426 	beq	r6,r3,21784 <memchr+0x84>
   21734:	21000044 	addi	r4,r4,1
   21738:	20c000cc 	andi	r3,r4,3
   2173c:	183ff91e 	bne	r3,zero,21724 <__alt_data_end+0xfffe2324>
   21740:	020000c4 	movi	r8,3
   21744:	40801136 	bltu	r8,r2,2178c <memchr+0x8c>
   21748:	10000c26 	beq	r2,zero,2177c <memchr+0x7c>
   2174c:	20c00003 	ldbu	r3,0(r4)
   21750:	29403fcc 	andi	r5,r5,255
   21754:	28c00b26 	beq	r5,r3,21784 <memchr+0x84>
   21758:	20c00044 	addi	r3,r4,1
   2175c:	39803fcc 	andi	r6,r7,255
   21760:	2089883a 	add	r4,r4,r2
   21764:	00000306 	br	21774 <memchr+0x74>
   21768:	18c00044 	addi	r3,r3,1
   2176c:	197fffc3 	ldbu	r5,-1(r3)
   21770:	31400526 	beq	r6,r5,21788 <memchr+0x88>
   21774:	1805883a 	mov	r2,r3
   21778:	20fffb1e 	bne	r4,r3,21768 <__alt_data_end+0xfffe2368>
   2177c:	0005883a 	mov	r2,zero
   21780:	f800283a 	ret
   21784:	2005883a 	mov	r2,r4
   21788:	f800283a 	ret
   2178c:	28c03fcc 	andi	r3,r5,255
   21790:	1812923a 	slli	r9,r3,8
   21794:	02ffbff4 	movhi	r11,65279
   21798:	02a02074 	movhi	r10,32897
   2179c:	48d2b03a 	or	r9,r9,r3
   217a0:	4806943a 	slli	r3,r9,16
   217a4:	5affbfc4 	addi	r11,r11,-257
   217a8:	52a02004 	addi	r10,r10,-32640
   217ac:	48d2b03a 	or	r9,r9,r3
   217b0:	20c00017 	ldw	r3,0(r4)
   217b4:	48c6f03a 	xor	r3,r9,r3
   217b8:	1acd883a 	add	r6,r3,r11
   217bc:	00c6303a 	nor	r3,zero,r3
   217c0:	30c6703a 	and	r3,r6,r3
   217c4:	1a86703a 	and	r3,r3,r10
   217c8:	183fe01e 	bne	r3,zero,2174c <__alt_data_end+0xfffe234c>
   217cc:	10bfff04 	addi	r2,r2,-4
   217d0:	21000104 	addi	r4,r4,4
   217d4:	40bff636 	bltu	r8,r2,217b0 <__alt_data_end+0xfffe23b0>
   217d8:	003fdb06 	br	21748 <__alt_data_end+0xfffe2348>
   217dc:	3005883a 	mov	r2,r6
   217e0:	003fd706 	br	21740 <__alt_data_end+0xfffe2340>

000217e4 <memcpy>:
   217e4:	defffd04 	addi	sp,sp,-12
   217e8:	dfc00215 	stw	ra,8(sp)
   217ec:	dc400115 	stw	r17,4(sp)
   217f0:	dc000015 	stw	r16,0(sp)
   217f4:	00c003c4 	movi	r3,15
   217f8:	2005883a 	mov	r2,r4
   217fc:	1980452e 	bgeu	r3,r6,21914 <memcpy+0x130>
   21800:	2906b03a 	or	r3,r5,r4
   21804:	18c000cc 	andi	r3,r3,3
   21808:	1800441e 	bne	r3,zero,2191c <memcpy+0x138>
   2180c:	347ffc04 	addi	r17,r6,-16
   21810:	8822d13a 	srli	r17,r17,4
   21814:	28c00104 	addi	r3,r5,4
   21818:	23400104 	addi	r13,r4,4
   2181c:	8820913a 	slli	r16,r17,4
   21820:	2b000204 	addi	r12,r5,8
   21824:	22c00204 	addi	r11,r4,8
   21828:	84000504 	addi	r16,r16,20
   2182c:	2a800304 	addi	r10,r5,12
   21830:	22400304 	addi	r9,r4,12
   21834:	2c21883a 	add	r16,r5,r16
   21838:	2811883a 	mov	r8,r5
   2183c:	200f883a 	mov	r7,r4
   21840:	41000017 	ldw	r4,0(r8)
   21844:	1fc00017 	ldw	ra,0(r3)
   21848:	63c00017 	ldw	r15,0(r12)
   2184c:	39000015 	stw	r4,0(r7)
   21850:	53800017 	ldw	r14,0(r10)
   21854:	6fc00015 	stw	ra,0(r13)
   21858:	5bc00015 	stw	r15,0(r11)
   2185c:	4b800015 	stw	r14,0(r9)
   21860:	18c00404 	addi	r3,r3,16
   21864:	39c00404 	addi	r7,r7,16
   21868:	42000404 	addi	r8,r8,16
   2186c:	6b400404 	addi	r13,r13,16
   21870:	63000404 	addi	r12,r12,16
   21874:	5ac00404 	addi	r11,r11,16
   21878:	52800404 	addi	r10,r10,16
   2187c:	4a400404 	addi	r9,r9,16
   21880:	1c3fef1e 	bne	r3,r16,21840 <__alt_data_end+0xfffe2440>
   21884:	89c00044 	addi	r7,r17,1
   21888:	380e913a 	slli	r7,r7,4
   2188c:	310003cc 	andi	r4,r6,15
   21890:	02c000c4 	movi	r11,3
   21894:	11c7883a 	add	r3,r2,r7
   21898:	29cb883a 	add	r5,r5,r7
   2189c:	5900212e 	bgeu	r11,r4,21924 <memcpy+0x140>
   218a0:	1813883a 	mov	r9,r3
   218a4:	2811883a 	mov	r8,r5
   218a8:	200f883a 	mov	r7,r4
   218ac:	42800017 	ldw	r10,0(r8)
   218b0:	4a400104 	addi	r9,r9,4
   218b4:	39ffff04 	addi	r7,r7,-4
   218b8:	4abfff15 	stw	r10,-4(r9)
   218bc:	42000104 	addi	r8,r8,4
   218c0:	59fffa36 	bltu	r11,r7,218ac <__alt_data_end+0xfffe24ac>
   218c4:	213fff04 	addi	r4,r4,-4
   218c8:	2008d0ba 	srli	r4,r4,2
   218cc:	318000cc 	andi	r6,r6,3
   218d0:	21000044 	addi	r4,r4,1
   218d4:	2109883a 	add	r4,r4,r4
   218d8:	2109883a 	add	r4,r4,r4
   218dc:	1907883a 	add	r3,r3,r4
   218e0:	290b883a 	add	r5,r5,r4
   218e4:	30000626 	beq	r6,zero,21900 <memcpy+0x11c>
   218e8:	198d883a 	add	r6,r3,r6
   218ec:	29c00003 	ldbu	r7,0(r5)
   218f0:	18c00044 	addi	r3,r3,1
   218f4:	29400044 	addi	r5,r5,1
   218f8:	19ffffc5 	stb	r7,-1(r3)
   218fc:	19bffb1e 	bne	r3,r6,218ec <__alt_data_end+0xfffe24ec>
   21900:	dfc00217 	ldw	ra,8(sp)
   21904:	dc400117 	ldw	r17,4(sp)
   21908:	dc000017 	ldw	r16,0(sp)
   2190c:	dec00304 	addi	sp,sp,12
   21910:	f800283a 	ret
   21914:	2007883a 	mov	r3,r4
   21918:	003ff206 	br	218e4 <__alt_data_end+0xfffe24e4>
   2191c:	2007883a 	mov	r3,r4
   21920:	003ff106 	br	218e8 <__alt_data_end+0xfffe24e8>
   21924:	200d883a 	mov	r6,r4
   21928:	003fee06 	br	218e4 <__alt_data_end+0xfffe24e4>

0002192c <memmove>:
   2192c:	2005883a 	mov	r2,r4
   21930:	29000b2e 	bgeu	r5,r4,21960 <memmove+0x34>
   21934:	298f883a 	add	r7,r5,r6
   21938:	21c0092e 	bgeu	r4,r7,21960 <memmove+0x34>
   2193c:	2187883a 	add	r3,r4,r6
   21940:	198bc83a 	sub	r5,r3,r6
   21944:	30004826 	beq	r6,zero,21a68 <memmove+0x13c>
   21948:	39ffffc4 	addi	r7,r7,-1
   2194c:	39000003 	ldbu	r4,0(r7)
   21950:	18ffffc4 	addi	r3,r3,-1
   21954:	19000005 	stb	r4,0(r3)
   21958:	28fffb1e 	bne	r5,r3,21948 <__alt_data_end+0xfffe2548>
   2195c:	f800283a 	ret
   21960:	00c003c4 	movi	r3,15
   21964:	1980412e 	bgeu	r3,r6,21a6c <memmove+0x140>
   21968:	2886b03a 	or	r3,r5,r2
   2196c:	18c000cc 	andi	r3,r3,3
   21970:	1800401e 	bne	r3,zero,21a74 <memmove+0x148>
   21974:	33fffc04 	addi	r15,r6,-16
   21978:	781ed13a 	srli	r15,r15,4
   2197c:	28c00104 	addi	r3,r5,4
   21980:	13400104 	addi	r13,r2,4
   21984:	781c913a 	slli	r14,r15,4
   21988:	2b000204 	addi	r12,r5,8
   2198c:	12c00204 	addi	r11,r2,8
   21990:	73800504 	addi	r14,r14,20
   21994:	2a800304 	addi	r10,r5,12
   21998:	12400304 	addi	r9,r2,12
   2199c:	2b9d883a 	add	r14,r5,r14
   219a0:	2811883a 	mov	r8,r5
   219a4:	100f883a 	mov	r7,r2
   219a8:	41000017 	ldw	r4,0(r8)
   219ac:	39c00404 	addi	r7,r7,16
   219b0:	18c00404 	addi	r3,r3,16
   219b4:	393ffc15 	stw	r4,-16(r7)
   219b8:	193ffc17 	ldw	r4,-16(r3)
   219bc:	6b400404 	addi	r13,r13,16
   219c0:	5ac00404 	addi	r11,r11,16
   219c4:	693ffc15 	stw	r4,-16(r13)
   219c8:	61000017 	ldw	r4,0(r12)
   219cc:	4a400404 	addi	r9,r9,16
   219d0:	42000404 	addi	r8,r8,16
   219d4:	593ffc15 	stw	r4,-16(r11)
   219d8:	51000017 	ldw	r4,0(r10)
   219dc:	63000404 	addi	r12,r12,16
   219e0:	52800404 	addi	r10,r10,16
   219e4:	493ffc15 	stw	r4,-16(r9)
   219e8:	1bbfef1e 	bne	r3,r14,219a8 <__alt_data_end+0xfffe25a8>
   219ec:	79000044 	addi	r4,r15,1
   219f0:	2008913a 	slli	r4,r4,4
   219f4:	328003cc 	andi	r10,r6,15
   219f8:	02c000c4 	movi	r11,3
   219fc:	1107883a 	add	r3,r2,r4
   21a00:	290b883a 	add	r5,r5,r4
   21a04:	5a801e2e 	bgeu	r11,r10,21a80 <memmove+0x154>
   21a08:	1813883a 	mov	r9,r3
   21a0c:	2811883a 	mov	r8,r5
   21a10:	500f883a 	mov	r7,r10
   21a14:	41000017 	ldw	r4,0(r8)
   21a18:	4a400104 	addi	r9,r9,4
   21a1c:	39ffff04 	addi	r7,r7,-4
   21a20:	493fff15 	stw	r4,-4(r9)
   21a24:	42000104 	addi	r8,r8,4
   21a28:	59fffa36 	bltu	r11,r7,21a14 <__alt_data_end+0xfffe2614>
   21a2c:	513fff04 	addi	r4,r10,-4
   21a30:	2008d0ba 	srli	r4,r4,2
   21a34:	318000cc 	andi	r6,r6,3
   21a38:	21000044 	addi	r4,r4,1
   21a3c:	2109883a 	add	r4,r4,r4
   21a40:	2109883a 	add	r4,r4,r4
   21a44:	1907883a 	add	r3,r3,r4
   21a48:	290b883a 	add	r5,r5,r4
   21a4c:	30000b26 	beq	r6,zero,21a7c <memmove+0x150>
   21a50:	198d883a 	add	r6,r3,r6
   21a54:	29c00003 	ldbu	r7,0(r5)
   21a58:	18c00044 	addi	r3,r3,1
   21a5c:	29400044 	addi	r5,r5,1
   21a60:	19ffffc5 	stb	r7,-1(r3)
   21a64:	19bffb1e 	bne	r3,r6,21a54 <__alt_data_end+0xfffe2654>
   21a68:	f800283a 	ret
   21a6c:	1007883a 	mov	r3,r2
   21a70:	003ff606 	br	21a4c <__alt_data_end+0xfffe264c>
   21a74:	1007883a 	mov	r3,r2
   21a78:	003ff506 	br	21a50 <__alt_data_end+0xfffe2650>
   21a7c:	f800283a 	ret
   21a80:	500d883a 	mov	r6,r10
   21a84:	003ff106 	br	21a4c <__alt_data_end+0xfffe264c>

00021a88 <memset>:
   21a88:	20c000cc 	andi	r3,r4,3
   21a8c:	2005883a 	mov	r2,r4
   21a90:	18004426 	beq	r3,zero,21ba4 <memset+0x11c>
   21a94:	31ffffc4 	addi	r7,r6,-1
   21a98:	30004026 	beq	r6,zero,21b9c <memset+0x114>
   21a9c:	2813883a 	mov	r9,r5
   21aa0:	200d883a 	mov	r6,r4
   21aa4:	2007883a 	mov	r3,r4
   21aa8:	00000406 	br	21abc <memset+0x34>
   21aac:	3a3fffc4 	addi	r8,r7,-1
   21ab0:	31800044 	addi	r6,r6,1
   21ab4:	38003926 	beq	r7,zero,21b9c <memset+0x114>
   21ab8:	400f883a 	mov	r7,r8
   21abc:	18c00044 	addi	r3,r3,1
   21ac0:	32400005 	stb	r9,0(r6)
   21ac4:	1a0000cc 	andi	r8,r3,3
   21ac8:	403ff81e 	bne	r8,zero,21aac <__alt_data_end+0xfffe26ac>
   21acc:	010000c4 	movi	r4,3
   21ad0:	21c02d2e 	bgeu	r4,r7,21b88 <memset+0x100>
   21ad4:	29003fcc 	andi	r4,r5,255
   21ad8:	200c923a 	slli	r6,r4,8
   21adc:	3108b03a 	or	r4,r6,r4
   21ae0:	200c943a 	slli	r6,r4,16
   21ae4:	218cb03a 	or	r6,r4,r6
   21ae8:	010003c4 	movi	r4,15
   21aec:	21c0182e 	bgeu	r4,r7,21b50 <memset+0xc8>
   21af0:	3b3ffc04 	addi	r12,r7,-16
   21af4:	6018d13a 	srli	r12,r12,4
   21af8:	1a000104 	addi	r8,r3,4
   21afc:	1ac00204 	addi	r11,r3,8
   21b00:	6008913a 	slli	r4,r12,4
   21b04:	1a800304 	addi	r10,r3,12
   21b08:	1813883a 	mov	r9,r3
   21b0c:	21000504 	addi	r4,r4,20
   21b10:	1909883a 	add	r4,r3,r4
   21b14:	49800015 	stw	r6,0(r9)
   21b18:	41800015 	stw	r6,0(r8)
   21b1c:	59800015 	stw	r6,0(r11)
   21b20:	51800015 	stw	r6,0(r10)
   21b24:	42000404 	addi	r8,r8,16
   21b28:	4a400404 	addi	r9,r9,16
   21b2c:	5ac00404 	addi	r11,r11,16
   21b30:	52800404 	addi	r10,r10,16
   21b34:	413ff71e 	bne	r8,r4,21b14 <__alt_data_end+0xfffe2714>
   21b38:	63000044 	addi	r12,r12,1
   21b3c:	6018913a 	slli	r12,r12,4
   21b40:	39c003cc 	andi	r7,r7,15
   21b44:	010000c4 	movi	r4,3
   21b48:	1b07883a 	add	r3,r3,r12
   21b4c:	21c00e2e 	bgeu	r4,r7,21b88 <memset+0x100>
   21b50:	1813883a 	mov	r9,r3
   21b54:	3811883a 	mov	r8,r7
   21b58:	010000c4 	movi	r4,3
   21b5c:	49800015 	stw	r6,0(r9)
   21b60:	423fff04 	addi	r8,r8,-4
   21b64:	4a400104 	addi	r9,r9,4
   21b68:	223ffc36 	bltu	r4,r8,21b5c <__alt_data_end+0xfffe275c>
   21b6c:	393fff04 	addi	r4,r7,-4
   21b70:	2008d0ba 	srli	r4,r4,2
   21b74:	39c000cc 	andi	r7,r7,3
   21b78:	21000044 	addi	r4,r4,1
   21b7c:	2109883a 	add	r4,r4,r4
   21b80:	2109883a 	add	r4,r4,r4
   21b84:	1907883a 	add	r3,r3,r4
   21b88:	38000526 	beq	r7,zero,21ba0 <memset+0x118>
   21b8c:	19cf883a 	add	r7,r3,r7
   21b90:	19400005 	stb	r5,0(r3)
   21b94:	18c00044 	addi	r3,r3,1
   21b98:	38fffd1e 	bne	r7,r3,21b90 <__alt_data_end+0xfffe2790>
   21b9c:	f800283a 	ret
   21ba0:	f800283a 	ret
   21ba4:	2007883a 	mov	r3,r4
   21ba8:	300f883a 	mov	r7,r6
   21bac:	003fc706 	br	21acc <__alt_data_end+0xfffe26cc>

00021bb0 <_realloc_r>:
   21bb0:	defff604 	addi	sp,sp,-40
   21bb4:	dc800215 	stw	r18,8(sp)
   21bb8:	dfc00915 	stw	ra,36(sp)
   21bbc:	df000815 	stw	fp,32(sp)
   21bc0:	ddc00715 	stw	r23,28(sp)
   21bc4:	dd800615 	stw	r22,24(sp)
   21bc8:	dd400515 	stw	r21,20(sp)
   21bcc:	dd000415 	stw	r20,16(sp)
   21bd0:	dcc00315 	stw	r19,12(sp)
   21bd4:	dc400115 	stw	r17,4(sp)
   21bd8:	dc000015 	stw	r16,0(sp)
   21bdc:	3025883a 	mov	r18,r6
   21be0:	2800b726 	beq	r5,zero,21ec0 <_realloc_r+0x310>
   21be4:	282b883a 	mov	r21,r5
   21be8:	2029883a 	mov	r20,r4
   21bec:	0023c440 	call	23c44 <__malloc_lock>
   21bf0:	a8bfff17 	ldw	r2,-4(r21)
   21bf4:	043fff04 	movi	r16,-4
   21bf8:	90c002c4 	addi	r3,r18,11
   21bfc:	01000584 	movi	r4,22
   21c00:	acfffe04 	addi	r19,r21,-8
   21c04:	1420703a 	and	r16,r2,r16
   21c08:	20c0332e 	bgeu	r4,r3,21cd8 <_realloc_r+0x128>
   21c0c:	047ffe04 	movi	r17,-8
   21c10:	1c62703a 	and	r17,r3,r17
   21c14:	8807883a 	mov	r3,r17
   21c18:	88005816 	blt	r17,zero,21d7c <_realloc_r+0x1cc>
   21c1c:	8c805736 	bltu	r17,r18,21d7c <_realloc_r+0x1cc>
   21c20:	80c0300e 	bge	r16,r3,21ce4 <_realloc_r+0x134>
   21c24:	070000f4 	movhi	fp,3
   21c28:	e7380904 	addi	fp,fp,-8156
   21c2c:	e1c00217 	ldw	r7,8(fp)
   21c30:	9c09883a 	add	r4,r19,r16
   21c34:	22000117 	ldw	r8,4(r4)
   21c38:	21c06326 	beq	r4,r7,21dc8 <_realloc_r+0x218>
   21c3c:	017fff84 	movi	r5,-2
   21c40:	414a703a 	and	r5,r8,r5
   21c44:	214b883a 	add	r5,r4,r5
   21c48:	29800117 	ldw	r6,4(r5)
   21c4c:	3180004c 	andi	r6,r6,1
   21c50:	30003f26 	beq	r6,zero,21d50 <_realloc_r+0x1a0>
   21c54:	1080004c 	andi	r2,r2,1
   21c58:	10008326 	beq	r2,zero,21e68 <_realloc_r+0x2b8>
   21c5c:	900b883a 	mov	r5,r18
   21c60:	a009883a 	mov	r4,r20
   21c64:	0020ef40 	call	20ef4 <_malloc_r>
   21c68:	1025883a 	mov	r18,r2
   21c6c:	10011e26 	beq	r2,zero,220e8 <_realloc_r+0x538>
   21c70:	a93fff17 	ldw	r4,-4(r21)
   21c74:	10fffe04 	addi	r3,r2,-8
   21c78:	00bfff84 	movi	r2,-2
   21c7c:	2084703a 	and	r2,r4,r2
   21c80:	9885883a 	add	r2,r19,r2
   21c84:	1880ee26 	beq	r3,r2,22040 <_realloc_r+0x490>
   21c88:	81bfff04 	addi	r6,r16,-4
   21c8c:	00800904 	movi	r2,36
   21c90:	1180b836 	bltu	r2,r6,21f74 <_realloc_r+0x3c4>
   21c94:	00c004c4 	movi	r3,19
   21c98:	19809636 	bltu	r3,r6,21ef4 <_realloc_r+0x344>
   21c9c:	9005883a 	mov	r2,r18
   21ca0:	a807883a 	mov	r3,r21
   21ca4:	19000017 	ldw	r4,0(r3)
   21ca8:	11000015 	stw	r4,0(r2)
   21cac:	19000117 	ldw	r4,4(r3)
   21cb0:	11000115 	stw	r4,4(r2)
   21cb4:	18c00217 	ldw	r3,8(r3)
   21cb8:	10c00215 	stw	r3,8(r2)
   21cbc:	a80b883a 	mov	r5,r21
   21cc0:	a009883a 	mov	r4,r20
   21cc4:	002297c0 	call	2297c <_free_r>
   21cc8:	a009883a 	mov	r4,r20
   21ccc:	0023d640 	call	23d64 <__malloc_unlock>
   21cd0:	9005883a 	mov	r2,r18
   21cd4:	00001206 	br	21d20 <_realloc_r+0x170>
   21cd8:	00c00404 	movi	r3,16
   21cdc:	1823883a 	mov	r17,r3
   21ce0:	003fce06 	br	21c1c <__alt_data_end+0xfffe281c>
   21ce4:	a825883a 	mov	r18,r21
   21ce8:	8445c83a 	sub	r2,r16,r17
   21cec:	00c003c4 	movi	r3,15
   21cf0:	18802636 	bltu	r3,r2,21d8c <_realloc_r+0x1dc>
   21cf4:	99800117 	ldw	r6,4(r19)
   21cf8:	9c07883a 	add	r3,r19,r16
   21cfc:	3180004c 	andi	r6,r6,1
   21d00:	3420b03a 	or	r16,r6,r16
   21d04:	9c000115 	stw	r16,4(r19)
   21d08:	18800117 	ldw	r2,4(r3)
   21d0c:	10800054 	ori	r2,r2,1
   21d10:	18800115 	stw	r2,4(r3)
   21d14:	a009883a 	mov	r4,r20
   21d18:	0023d640 	call	23d64 <__malloc_unlock>
   21d1c:	9005883a 	mov	r2,r18
   21d20:	dfc00917 	ldw	ra,36(sp)
   21d24:	df000817 	ldw	fp,32(sp)
   21d28:	ddc00717 	ldw	r23,28(sp)
   21d2c:	dd800617 	ldw	r22,24(sp)
   21d30:	dd400517 	ldw	r21,20(sp)
   21d34:	dd000417 	ldw	r20,16(sp)
   21d38:	dcc00317 	ldw	r19,12(sp)
   21d3c:	dc800217 	ldw	r18,8(sp)
   21d40:	dc400117 	ldw	r17,4(sp)
   21d44:	dc000017 	ldw	r16,0(sp)
   21d48:	dec00a04 	addi	sp,sp,40
   21d4c:	f800283a 	ret
   21d50:	017fff04 	movi	r5,-4
   21d54:	414a703a 	and	r5,r8,r5
   21d58:	814d883a 	add	r6,r16,r5
   21d5c:	30c01f16 	blt	r6,r3,21ddc <_realloc_r+0x22c>
   21d60:	20800317 	ldw	r2,12(r4)
   21d64:	20c00217 	ldw	r3,8(r4)
   21d68:	a825883a 	mov	r18,r21
   21d6c:	3021883a 	mov	r16,r6
   21d70:	18800315 	stw	r2,12(r3)
   21d74:	10c00215 	stw	r3,8(r2)
   21d78:	003fdb06 	br	21ce8 <__alt_data_end+0xfffe28e8>
   21d7c:	00800304 	movi	r2,12
   21d80:	a0800015 	stw	r2,0(r20)
   21d84:	0005883a 	mov	r2,zero
   21d88:	003fe506 	br	21d20 <__alt_data_end+0xfffe2920>
   21d8c:	98c00117 	ldw	r3,4(r19)
   21d90:	9c4b883a 	add	r5,r19,r17
   21d94:	11000054 	ori	r4,r2,1
   21d98:	18c0004c 	andi	r3,r3,1
   21d9c:	1c62b03a 	or	r17,r3,r17
   21da0:	9c400115 	stw	r17,4(r19)
   21da4:	29000115 	stw	r4,4(r5)
   21da8:	2885883a 	add	r2,r5,r2
   21dac:	10c00117 	ldw	r3,4(r2)
   21db0:	29400204 	addi	r5,r5,8
   21db4:	a009883a 	mov	r4,r20
   21db8:	18c00054 	ori	r3,r3,1
   21dbc:	10c00115 	stw	r3,4(r2)
   21dc0:	002297c0 	call	2297c <_free_r>
   21dc4:	003fd306 	br	21d14 <__alt_data_end+0xfffe2914>
   21dc8:	017fff04 	movi	r5,-4
   21dcc:	414a703a 	and	r5,r8,r5
   21dd0:	89800404 	addi	r6,r17,16
   21dd4:	8151883a 	add	r8,r16,r5
   21dd8:	4180590e 	bge	r8,r6,21f40 <_realloc_r+0x390>
   21ddc:	1080004c 	andi	r2,r2,1
   21de0:	103f9e1e 	bne	r2,zero,21c5c <__alt_data_end+0xfffe285c>
   21de4:	adbffe17 	ldw	r22,-8(r21)
   21de8:	00bfff04 	movi	r2,-4
   21dec:	9dadc83a 	sub	r22,r19,r22
   21df0:	b1800117 	ldw	r6,4(r22)
   21df4:	3084703a 	and	r2,r6,r2
   21df8:	20002026 	beq	r4,zero,21e7c <_realloc_r+0x2cc>
   21dfc:	80af883a 	add	r23,r16,r2
   21e00:	b96f883a 	add	r23,r23,r5
   21e04:	21c05f26 	beq	r4,r7,21f84 <_realloc_r+0x3d4>
   21e08:	b8c01c16 	blt	r23,r3,21e7c <_realloc_r+0x2cc>
   21e0c:	20800317 	ldw	r2,12(r4)
   21e10:	20c00217 	ldw	r3,8(r4)
   21e14:	81bfff04 	addi	r6,r16,-4
   21e18:	01000904 	movi	r4,36
   21e1c:	18800315 	stw	r2,12(r3)
   21e20:	10c00215 	stw	r3,8(r2)
   21e24:	b0c00217 	ldw	r3,8(r22)
   21e28:	b0800317 	ldw	r2,12(r22)
   21e2c:	b4800204 	addi	r18,r22,8
   21e30:	18800315 	stw	r2,12(r3)
   21e34:	10c00215 	stw	r3,8(r2)
   21e38:	21801b36 	bltu	r4,r6,21ea8 <_realloc_r+0x2f8>
   21e3c:	008004c4 	movi	r2,19
   21e40:	1180352e 	bgeu	r2,r6,21f18 <_realloc_r+0x368>
   21e44:	a8800017 	ldw	r2,0(r21)
   21e48:	b0800215 	stw	r2,8(r22)
   21e4c:	a8800117 	ldw	r2,4(r21)
   21e50:	b0800315 	stw	r2,12(r22)
   21e54:	008006c4 	movi	r2,27
   21e58:	11807f36 	bltu	r2,r6,22058 <_realloc_r+0x4a8>
   21e5c:	b0800404 	addi	r2,r22,16
   21e60:	ad400204 	addi	r21,r21,8
   21e64:	00002d06 	br	21f1c <_realloc_r+0x36c>
   21e68:	adbffe17 	ldw	r22,-8(r21)
   21e6c:	00bfff04 	movi	r2,-4
   21e70:	9dadc83a 	sub	r22,r19,r22
   21e74:	b1000117 	ldw	r4,4(r22)
   21e78:	2084703a 	and	r2,r4,r2
   21e7c:	b03f7726 	beq	r22,zero,21c5c <__alt_data_end+0xfffe285c>
   21e80:	80af883a 	add	r23,r16,r2
   21e84:	b8ff7516 	blt	r23,r3,21c5c <__alt_data_end+0xfffe285c>
   21e88:	b0800317 	ldw	r2,12(r22)
   21e8c:	b0c00217 	ldw	r3,8(r22)
   21e90:	81bfff04 	addi	r6,r16,-4
   21e94:	01000904 	movi	r4,36
   21e98:	18800315 	stw	r2,12(r3)
   21e9c:	10c00215 	stw	r3,8(r2)
   21ea0:	b4800204 	addi	r18,r22,8
   21ea4:	21bfe52e 	bgeu	r4,r6,21e3c <__alt_data_end+0xfffe2a3c>
   21ea8:	a80b883a 	mov	r5,r21
   21eac:	9009883a 	mov	r4,r18
   21eb0:	002192c0 	call	2192c <memmove>
   21eb4:	b821883a 	mov	r16,r23
   21eb8:	b027883a 	mov	r19,r22
   21ebc:	003f8a06 	br	21ce8 <__alt_data_end+0xfffe28e8>
   21ec0:	300b883a 	mov	r5,r6
   21ec4:	dfc00917 	ldw	ra,36(sp)
   21ec8:	df000817 	ldw	fp,32(sp)
   21ecc:	ddc00717 	ldw	r23,28(sp)
   21ed0:	dd800617 	ldw	r22,24(sp)
   21ed4:	dd400517 	ldw	r21,20(sp)
   21ed8:	dd000417 	ldw	r20,16(sp)
   21edc:	dcc00317 	ldw	r19,12(sp)
   21ee0:	dc800217 	ldw	r18,8(sp)
   21ee4:	dc400117 	ldw	r17,4(sp)
   21ee8:	dc000017 	ldw	r16,0(sp)
   21eec:	dec00a04 	addi	sp,sp,40
   21ef0:	0020ef41 	jmpi	20ef4 <_malloc_r>
   21ef4:	a8c00017 	ldw	r3,0(r21)
   21ef8:	90c00015 	stw	r3,0(r18)
   21efc:	a8c00117 	ldw	r3,4(r21)
   21f00:	90c00115 	stw	r3,4(r18)
   21f04:	00c006c4 	movi	r3,27
   21f08:	19804536 	bltu	r3,r6,22020 <_realloc_r+0x470>
   21f0c:	90800204 	addi	r2,r18,8
   21f10:	a8c00204 	addi	r3,r21,8
   21f14:	003f6306 	br	21ca4 <__alt_data_end+0xfffe28a4>
   21f18:	9005883a 	mov	r2,r18
   21f1c:	a8c00017 	ldw	r3,0(r21)
   21f20:	b821883a 	mov	r16,r23
   21f24:	b027883a 	mov	r19,r22
   21f28:	10c00015 	stw	r3,0(r2)
   21f2c:	a8c00117 	ldw	r3,4(r21)
   21f30:	10c00115 	stw	r3,4(r2)
   21f34:	a8c00217 	ldw	r3,8(r21)
   21f38:	10c00215 	stw	r3,8(r2)
   21f3c:	003f6a06 	br	21ce8 <__alt_data_end+0xfffe28e8>
   21f40:	9c67883a 	add	r19,r19,r17
   21f44:	4445c83a 	sub	r2,r8,r17
   21f48:	e4c00215 	stw	r19,8(fp)
   21f4c:	10800054 	ori	r2,r2,1
   21f50:	98800115 	stw	r2,4(r19)
   21f54:	a8bfff17 	ldw	r2,-4(r21)
   21f58:	a009883a 	mov	r4,r20
   21f5c:	1080004c 	andi	r2,r2,1
   21f60:	1462b03a 	or	r17,r2,r17
   21f64:	ac7fff15 	stw	r17,-4(r21)
   21f68:	0023d640 	call	23d64 <__malloc_unlock>
   21f6c:	a805883a 	mov	r2,r21
   21f70:	003f6b06 	br	21d20 <__alt_data_end+0xfffe2920>
   21f74:	a80b883a 	mov	r5,r21
   21f78:	9009883a 	mov	r4,r18
   21f7c:	002192c0 	call	2192c <memmove>
   21f80:	003f4e06 	br	21cbc <__alt_data_end+0xfffe28bc>
   21f84:	89000404 	addi	r4,r17,16
   21f88:	b93fbc16 	blt	r23,r4,21e7c <__alt_data_end+0xfffe2a7c>
   21f8c:	b0800317 	ldw	r2,12(r22)
   21f90:	b0c00217 	ldw	r3,8(r22)
   21f94:	81bfff04 	addi	r6,r16,-4
   21f98:	01000904 	movi	r4,36
   21f9c:	18800315 	stw	r2,12(r3)
   21fa0:	10c00215 	stw	r3,8(r2)
   21fa4:	b4800204 	addi	r18,r22,8
   21fa8:	21804336 	bltu	r4,r6,220b8 <_realloc_r+0x508>
   21fac:	008004c4 	movi	r2,19
   21fb0:	11803f2e 	bgeu	r2,r6,220b0 <_realloc_r+0x500>
   21fb4:	a8800017 	ldw	r2,0(r21)
   21fb8:	b0800215 	stw	r2,8(r22)
   21fbc:	a8800117 	ldw	r2,4(r21)
   21fc0:	b0800315 	stw	r2,12(r22)
   21fc4:	008006c4 	movi	r2,27
   21fc8:	11803f36 	bltu	r2,r6,220c8 <_realloc_r+0x518>
   21fcc:	b0800404 	addi	r2,r22,16
   21fd0:	ad400204 	addi	r21,r21,8
   21fd4:	a8c00017 	ldw	r3,0(r21)
   21fd8:	10c00015 	stw	r3,0(r2)
   21fdc:	a8c00117 	ldw	r3,4(r21)
   21fe0:	10c00115 	stw	r3,4(r2)
   21fe4:	a8c00217 	ldw	r3,8(r21)
   21fe8:	10c00215 	stw	r3,8(r2)
   21fec:	b447883a 	add	r3,r22,r17
   21ff0:	bc45c83a 	sub	r2,r23,r17
   21ff4:	e0c00215 	stw	r3,8(fp)
   21ff8:	10800054 	ori	r2,r2,1
   21ffc:	18800115 	stw	r2,4(r3)
   22000:	b0800117 	ldw	r2,4(r22)
   22004:	a009883a 	mov	r4,r20
   22008:	1080004c 	andi	r2,r2,1
   2200c:	1462b03a 	or	r17,r2,r17
   22010:	b4400115 	stw	r17,4(r22)
   22014:	0023d640 	call	23d64 <__malloc_unlock>
   22018:	9005883a 	mov	r2,r18
   2201c:	003f4006 	br	21d20 <__alt_data_end+0xfffe2920>
   22020:	a8c00217 	ldw	r3,8(r21)
   22024:	90c00215 	stw	r3,8(r18)
   22028:	a8c00317 	ldw	r3,12(r21)
   2202c:	90c00315 	stw	r3,12(r18)
   22030:	30801126 	beq	r6,r2,22078 <_realloc_r+0x4c8>
   22034:	90800404 	addi	r2,r18,16
   22038:	a8c00404 	addi	r3,r21,16
   2203c:	003f1906 	br	21ca4 <__alt_data_end+0xfffe28a4>
   22040:	90ffff17 	ldw	r3,-4(r18)
   22044:	00bfff04 	movi	r2,-4
   22048:	a825883a 	mov	r18,r21
   2204c:	1884703a 	and	r2,r3,r2
   22050:	80a1883a 	add	r16,r16,r2
   22054:	003f2406 	br	21ce8 <__alt_data_end+0xfffe28e8>
   22058:	a8800217 	ldw	r2,8(r21)
   2205c:	b0800415 	stw	r2,16(r22)
   22060:	a8800317 	ldw	r2,12(r21)
   22064:	b0800515 	stw	r2,20(r22)
   22068:	31000a26 	beq	r6,r4,22094 <_realloc_r+0x4e4>
   2206c:	b0800604 	addi	r2,r22,24
   22070:	ad400404 	addi	r21,r21,16
   22074:	003fa906 	br	21f1c <__alt_data_end+0xfffe2b1c>
   22078:	a9000417 	ldw	r4,16(r21)
   2207c:	90800604 	addi	r2,r18,24
   22080:	a8c00604 	addi	r3,r21,24
   22084:	91000415 	stw	r4,16(r18)
   22088:	a9000517 	ldw	r4,20(r21)
   2208c:	91000515 	stw	r4,20(r18)
   22090:	003f0406 	br	21ca4 <__alt_data_end+0xfffe28a4>
   22094:	a8c00417 	ldw	r3,16(r21)
   22098:	ad400604 	addi	r21,r21,24
   2209c:	b0800804 	addi	r2,r22,32
   220a0:	b0c00615 	stw	r3,24(r22)
   220a4:	a8ffff17 	ldw	r3,-4(r21)
   220a8:	b0c00715 	stw	r3,28(r22)
   220ac:	003f9b06 	br	21f1c <__alt_data_end+0xfffe2b1c>
   220b0:	9005883a 	mov	r2,r18
   220b4:	003fc706 	br	21fd4 <__alt_data_end+0xfffe2bd4>
   220b8:	a80b883a 	mov	r5,r21
   220bc:	9009883a 	mov	r4,r18
   220c0:	002192c0 	call	2192c <memmove>
   220c4:	003fc906 	br	21fec <__alt_data_end+0xfffe2bec>
   220c8:	a8800217 	ldw	r2,8(r21)
   220cc:	b0800415 	stw	r2,16(r22)
   220d0:	a8800317 	ldw	r2,12(r21)
   220d4:	b0800515 	stw	r2,20(r22)
   220d8:	31000726 	beq	r6,r4,220f8 <_realloc_r+0x548>
   220dc:	b0800604 	addi	r2,r22,24
   220e0:	ad400404 	addi	r21,r21,16
   220e4:	003fbb06 	br	21fd4 <__alt_data_end+0xfffe2bd4>
   220e8:	a009883a 	mov	r4,r20
   220ec:	0023d640 	call	23d64 <__malloc_unlock>
   220f0:	0005883a 	mov	r2,zero
   220f4:	003f0a06 	br	21d20 <__alt_data_end+0xfffe2920>
   220f8:	a8c00417 	ldw	r3,16(r21)
   220fc:	ad400604 	addi	r21,r21,24
   22100:	b0800804 	addi	r2,r22,32
   22104:	b0c00615 	stw	r3,24(r22)
   22108:	a8ffff17 	ldw	r3,-4(r21)
   2210c:	b0c00715 	stw	r3,28(r22)
   22110:	003fb006 	br	21fd4 <__alt_data_end+0xfffe2bd4>

00022114 <_sbrk_r>:
   22114:	defffd04 	addi	sp,sp,-12
   22118:	dc000015 	stw	r16,0(sp)
   2211c:	040000f4 	movhi	r16,3
   22120:	dc400115 	stw	r17,4(sp)
   22124:	84047d04 	addi	r16,r16,4596
   22128:	2023883a 	mov	r17,r4
   2212c:	2809883a 	mov	r4,r5
   22130:	dfc00215 	stw	ra,8(sp)
   22134:	80000015 	stw	zero,0(r16)
   22138:	00239340 	call	23934 <sbrk>
   2213c:	00ffffc4 	movi	r3,-1
   22140:	10c00526 	beq	r2,r3,22158 <_sbrk_r+0x44>
   22144:	dfc00217 	ldw	ra,8(sp)
   22148:	dc400117 	ldw	r17,4(sp)
   2214c:	dc000017 	ldw	r16,0(sp)
   22150:	dec00304 	addi	sp,sp,12
   22154:	f800283a 	ret
   22158:	80c00017 	ldw	r3,0(r16)
   2215c:	183ff926 	beq	r3,zero,22144 <__alt_data_end+0xfffe2d44>
   22160:	88c00015 	stw	r3,0(r17)
   22164:	003ff706 	br	22144 <__alt_data_end+0xfffe2d44>

00022168 <__sread>:
   22168:	defffe04 	addi	sp,sp,-8
   2216c:	dc000015 	stw	r16,0(sp)
   22170:	2821883a 	mov	r16,r5
   22174:	2940038f 	ldh	r5,14(r5)
   22178:	dfc00115 	stw	ra,4(sp)
   2217c:	0022ea80 	call	22ea8 <_read_r>
   22180:	10000716 	blt	r2,zero,221a0 <__sread+0x38>
   22184:	80c01417 	ldw	r3,80(r16)
   22188:	1887883a 	add	r3,r3,r2
   2218c:	80c01415 	stw	r3,80(r16)
   22190:	dfc00117 	ldw	ra,4(sp)
   22194:	dc000017 	ldw	r16,0(sp)
   22198:	dec00204 	addi	sp,sp,8
   2219c:	f800283a 	ret
   221a0:	80c0030b 	ldhu	r3,12(r16)
   221a4:	18fbffcc 	andi	r3,r3,61439
   221a8:	80c0030d 	sth	r3,12(r16)
   221ac:	dfc00117 	ldw	ra,4(sp)
   221b0:	dc000017 	ldw	r16,0(sp)
   221b4:	dec00204 	addi	sp,sp,8
   221b8:	f800283a 	ret

000221bc <__seofread>:
   221bc:	0005883a 	mov	r2,zero
   221c0:	f800283a 	ret

000221c4 <__swrite>:
   221c4:	2880030b 	ldhu	r2,12(r5)
   221c8:	defffb04 	addi	sp,sp,-20
   221cc:	dcc00315 	stw	r19,12(sp)
   221d0:	dc800215 	stw	r18,8(sp)
   221d4:	dc400115 	stw	r17,4(sp)
   221d8:	dc000015 	stw	r16,0(sp)
   221dc:	dfc00415 	stw	ra,16(sp)
   221e0:	10c0400c 	andi	r3,r2,256
   221e4:	2821883a 	mov	r16,r5
   221e8:	2023883a 	mov	r17,r4
   221ec:	3025883a 	mov	r18,r6
   221f0:	3827883a 	mov	r19,r7
   221f4:	18000526 	beq	r3,zero,2220c <__swrite+0x48>
   221f8:	2940038f 	ldh	r5,14(r5)
   221fc:	01c00084 	movi	r7,2
   22200:	000d883a 	mov	r6,zero
   22204:	0022c8c0 	call	22c8c <_lseek_r>
   22208:	8080030b 	ldhu	r2,12(r16)
   2220c:	8140038f 	ldh	r5,14(r16)
   22210:	10bbffcc 	andi	r2,r2,61439
   22214:	980f883a 	mov	r7,r19
   22218:	900d883a 	mov	r6,r18
   2221c:	8809883a 	mov	r4,r17
   22220:	8080030d 	sth	r2,12(r16)
   22224:	dfc00417 	ldw	ra,16(sp)
   22228:	dcc00317 	ldw	r19,12(sp)
   2222c:	dc800217 	ldw	r18,8(sp)
   22230:	dc400117 	ldw	r17,4(sp)
   22234:	dc000017 	ldw	r16,0(sp)
   22238:	dec00504 	addi	sp,sp,20
   2223c:	00222a41 	jmpi	222a4 <_write_r>

00022240 <__sseek>:
   22240:	defffe04 	addi	sp,sp,-8
   22244:	dc000015 	stw	r16,0(sp)
   22248:	2821883a 	mov	r16,r5
   2224c:	2940038f 	ldh	r5,14(r5)
   22250:	dfc00115 	stw	ra,4(sp)
   22254:	0022c8c0 	call	22c8c <_lseek_r>
   22258:	00ffffc4 	movi	r3,-1
   2225c:	10c00826 	beq	r2,r3,22280 <__sseek+0x40>
   22260:	80c0030b 	ldhu	r3,12(r16)
   22264:	80801415 	stw	r2,80(r16)
   22268:	18c40014 	ori	r3,r3,4096
   2226c:	80c0030d 	sth	r3,12(r16)
   22270:	dfc00117 	ldw	ra,4(sp)
   22274:	dc000017 	ldw	r16,0(sp)
   22278:	dec00204 	addi	sp,sp,8
   2227c:	f800283a 	ret
   22280:	80c0030b 	ldhu	r3,12(r16)
   22284:	18fbffcc 	andi	r3,r3,61439
   22288:	80c0030d 	sth	r3,12(r16)
   2228c:	dfc00117 	ldw	ra,4(sp)
   22290:	dc000017 	ldw	r16,0(sp)
   22294:	dec00204 	addi	sp,sp,8
   22298:	f800283a 	ret

0002229c <__sclose>:
   2229c:	2940038f 	ldh	r5,14(r5)
   222a0:	00224581 	jmpi	22458 <_close_r>

000222a4 <_write_r>:
   222a4:	defffd04 	addi	sp,sp,-12
   222a8:	2805883a 	mov	r2,r5
   222ac:	dc000015 	stw	r16,0(sp)
   222b0:	040000f4 	movhi	r16,3
   222b4:	dc400115 	stw	r17,4(sp)
   222b8:	300b883a 	mov	r5,r6
   222bc:	84047d04 	addi	r16,r16,4596
   222c0:	2023883a 	mov	r17,r4
   222c4:	380d883a 	mov	r6,r7
   222c8:	1009883a 	mov	r4,r2
   222cc:	dfc00215 	stw	ra,8(sp)
   222d0:	80000015 	stw	zero,0(r16)
   222d4:	0023a200 	call	23a20 <write>
   222d8:	00ffffc4 	movi	r3,-1
   222dc:	10c00526 	beq	r2,r3,222f4 <_write_r+0x50>
   222e0:	dfc00217 	ldw	ra,8(sp)
   222e4:	dc400117 	ldw	r17,4(sp)
   222e8:	dc000017 	ldw	r16,0(sp)
   222ec:	dec00304 	addi	sp,sp,12
   222f0:	f800283a 	ret
   222f4:	80c00017 	ldw	r3,0(r16)
   222f8:	183ff926 	beq	r3,zero,222e0 <__alt_data_end+0xfffe2ee0>
   222fc:	88c00015 	stw	r3,0(r17)
   22300:	003ff706 	br	222e0 <__alt_data_end+0xfffe2ee0>

00022304 <__swsetup_r>:
   22304:	008000f4 	movhi	r2,3
   22308:	defffd04 	addi	sp,sp,-12
   2230c:	10bd9104 	addi	r2,r2,-2492
   22310:	dc400115 	stw	r17,4(sp)
   22314:	2023883a 	mov	r17,r4
   22318:	11000017 	ldw	r4,0(r2)
   2231c:	dc000015 	stw	r16,0(sp)
   22320:	dfc00215 	stw	ra,8(sp)
   22324:	2821883a 	mov	r16,r5
   22328:	20000226 	beq	r4,zero,22334 <__swsetup_r+0x30>
   2232c:	20800e17 	ldw	r2,56(r4)
   22330:	10003126 	beq	r2,zero,223f8 <__swsetup_r+0xf4>
   22334:	8080030b 	ldhu	r2,12(r16)
   22338:	10c0020c 	andi	r3,r2,8
   2233c:	1009883a 	mov	r4,r2
   22340:	18000f26 	beq	r3,zero,22380 <__swsetup_r+0x7c>
   22344:	80c00417 	ldw	r3,16(r16)
   22348:	18001526 	beq	r3,zero,223a0 <__swsetup_r+0x9c>
   2234c:	1100004c 	andi	r4,r2,1
   22350:	20001c1e 	bne	r4,zero,223c4 <__swsetup_r+0xc0>
   22354:	1080008c 	andi	r2,r2,2
   22358:	1000291e 	bne	r2,zero,22400 <__swsetup_r+0xfc>
   2235c:	80800517 	ldw	r2,20(r16)
   22360:	80800215 	stw	r2,8(r16)
   22364:	18001c26 	beq	r3,zero,223d8 <__swsetup_r+0xd4>
   22368:	0005883a 	mov	r2,zero
   2236c:	dfc00217 	ldw	ra,8(sp)
   22370:	dc400117 	ldw	r17,4(sp)
   22374:	dc000017 	ldw	r16,0(sp)
   22378:	dec00304 	addi	sp,sp,12
   2237c:	f800283a 	ret
   22380:	2080040c 	andi	r2,r4,16
   22384:	10002e26 	beq	r2,zero,22440 <__swsetup_r+0x13c>
   22388:	2080010c 	andi	r2,r4,4
   2238c:	10001e1e 	bne	r2,zero,22408 <__swsetup_r+0x104>
   22390:	80c00417 	ldw	r3,16(r16)
   22394:	20800214 	ori	r2,r4,8
   22398:	8080030d 	sth	r2,12(r16)
   2239c:	183feb1e 	bne	r3,zero,2234c <__alt_data_end+0xfffe2f4c>
   223a0:	1100a00c 	andi	r4,r2,640
   223a4:	01408004 	movi	r5,512
   223a8:	217fe826 	beq	r4,r5,2234c <__alt_data_end+0xfffe2f4c>
   223ac:	800b883a 	mov	r5,r16
   223b0:	8809883a 	mov	r4,r17
   223b4:	0022cec0 	call	22cec <__smakebuf_r>
   223b8:	8080030b 	ldhu	r2,12(r16)
   223bc:	80c00417 	ldw	r3,16(r16)
   223c0:	003fe206 	br	2234c <__alt_data_end+0xfffe2f4c>
   223c4:	80800517 	ldw	r2,20(r16)
   223c8:	80000215 	stw	zero,8(r16)
   223cc:	0085c83a 	sub	r2,zero,r2
   223d0:	80800615 	stw	r2,24(r16)
   223d4:	183fe41e 	bne	r3,zero,22368 <__alt_data_end+0xfffe2f68>
   223d8:	80c0030b 	ldhu	r3,12(r16)
   223dc:	0005883a 	mov	r2,zero
   223e0:	1900200c 	andi	r4,r3,128
   223e4:	203fe126 	beq	r4,zero,2236c <__alt_data_end+0xfffe2f6c>
   223e8:	18c01014 	ori	r3,r3,64
   223ec:	80c0030d 	sth	r3,12(r16)
   223f0:	00bfffc4 	movi	r2,-1
   223f4:	003fdd06 	br	2236c <__alt_data_end+0xfffe2f6c>
   223f8:	00208540 	call	20854 <__sinit>
   223fc:	003fcd06 	br	22334 <__alt_data_end+0xfffe2f34>
   22400:	0005883a 	mov	r2,zero
   22404:	003fd606 	br	22360 <__alt_data_end+0xfffe2f60>
   22408:	81400c17 	ldw	r5,48(r16)
   2240c:	28000626 	beq	r5,zero,22428 <__swsetup_r+0x124>
   22410:	80801004 	addi	r2,r16,64
   22414:	28800326 	beq	r5,r2,22424 <__swsetup_r+0x120>
   22418:	8809883a 	mov	r4,r17
   2241c:	002297c0 	call	2297c <_free_r>
   22420:	8100030b 	ldhu	r4,12(r16)
   22424:	80000c15 	stw	zero,48(r16)
   22428:	80c00417 	ldw	r3,16(r16)
   2242c:	00bff6c4 	movi	r2,-37
   22430:	1108703a 	and	r4,r2,r4
   22434:	80000115 	stw	zero,4(r16)
   22438:	80c00015 	stw	r3,0(r16)
   2243c:	003fd506 	br	22394 <__alt_data_end+0xfffe2f94>
   22440:	00800244 	movi	r2,9
   22444:	88800015 	stw	r2,0(r17)
   22448:	20801014 	ori	r2,r4,64
   2244c:	8080030d 	sth	r2,12(r16)
   22450:	00bfffc4 	movi	r2,-1
   22454:	003fc506 	br	2236c <__alt_data_end+0xfffe2f6c>

00022458 <_close_r>:
   22458:	defffd04 	addi	sp,sp,-12
   2245c:	dc000015 	stw	r16,0(sp)
   22460:	040000f4 	movhi	r16,3
   22464:	dc400115 	stw	r17,4(sp)
   22468:	84047d04 	addi	r16,r16,4596
   2246c:	2023883a 	mov	r17,r4
   22470:	2809883a 	mov	r4,r5
   22474:	dfc00215 	stw	ra,8(sp)
   22478:	80000015 	stw	zero,0(r16)
   2247c:	00231d00 	call	231d0 <close>
   22480:	00ffffc4 	movi	r3,-1
   22484:	10c00526 	beq	r2,r3,2249c <_close_r+0x44>
   22488:	dfc00217 	ldw	ra,8(sp)
   2248c:	dc400117 	ldw	r17,4(sp)
   22490:	dc000017 	ldw	r16,0(sp)
   22494:	dec00304 	addi	sp,sp,12
   22498:	f800283a 	ret
   2249c:	80c00017 	ldw	r3,0(r16)
   224a0:	183ff926 	beq	r3,zero,22488 <__alt_data_end+0xfffe3088>
   224a4:	88c00015 	stw	r3,0(r17)
   224a8:	003ff706 	br	22488 <__alt_data_end+0xfffe3088>

000224ac <_fclose_r>:
   224ac:	28003926 	beq	r5,zero,22594 <_fclose_r+0xe8>
   224b0:	defffc04 	addi	sp,sp,-16
   224b4:	dc400115 	stw	r17,4(sp)
   224b8:	dc000015 	stw	r16,0(sp)
   224bc:	dfc00315 	stw	ra,12(sp)
   224c0:	dc800215 	stw	r18,8(sp)
   224c4:	2023883a 	mov	r17,r4
   224c8:	2821883a 	mov	r16,r5
   224cc:	20000226 	beq	r4,zero,224d8 <_fclose_r+0x2c>
   224d0:	20800e17 	ldw	r2,56(r4)
   224d4:	10002726 	beq	r2,zero,22574 <_fclose_r+0xc8>
   224d8:	8080030f 	ldh	r2,12(r16)
   224dc:	1000071e 	bne	r2,zero,224fc <_fclose_r+0x50>
   224e0:	0005883a 	mov	r2,zero
   224e4:	dfc00317 	ldw	ra,12(sp)
   224e8:	dc800217 	ldw	r18,8(sp)
   224ec:	dc400117 	ldw	r17,4(sp)
   224f0:	dc000017 	ldw	r16,0(sp)
   224f4:	dec00404 	addi	sp,sp,16
   224f8:	f800283a 	ret
   224fc:	800b883a 	mov	r5,r16
   22500:	8809883a 	mov	r4,r17
   22504:	00225b00 	call	225b0 <__sflush_r>
   22508:	1025883a 	mov	r18,r2
   2250c:	80800b17 	ldw	r2,44(r16)
   22510:	10000426 	beq	r2,zero,22524 <_fclose_r+0x78>
   22514:	81400717 	ldw	r5,28(r16)
   22518:	8809883a 	mov	r4,r17
   2251c:	103ee83a 	callr	r2
   22520:	10001616 	blt	r2,zero,2257c <_fclose_r+0xd0>
   22524:	8080030b 	ldhu	r2,12(r16)
   22528:	1080200c 	andi	r2,r2,128
   2252c:	1000151e 	bne	r2,zero,22584 <_fclose_r+0xd8>
   22530:	81400c17 	ldw	r5,48(r16)
   22534:	28000526 	beq	r5,zero,2254c <_fclose_r+0xa0>
   22538:	80801004 	addi	r2,r16,64
   2253c:	28800226 	beq	r5,r2,22548 <_fclose_r+0x9c>
   22540:	8809883a 	mov	r4,r17
   22544:	002297c0 	call	2297c <_free_r>
   22548:	80000c15 	stw	zero,48(r16)
   2254c:	81401117 	ldw	r5,68(r16)
   22550:	28000326 	beq	r5,zero,22560 <_fclose_r+0xb4>
   22554:	8809883a 	mov	r4,r17
   22558:	002297c0 	call	2297c <_free_r>
   2255c:	80001115 	stw	zero,68(r16)
   22560:	00208640 	call	20864 <__sfp_lock_acquire>
   22564:	8000030d 	sth	zero,12(r16)
   22568:	00208680 	call	20868 <__sfp_lock_release>
   2256c:	9005883a 	mov	r2,r18
   22570:	003fdc06 	br	224e4 <__alt_data_end+0xfffe30e4>
   22574:	00208540 	call	20854 <__sinit>
   22578:	003fd706 	br	224d8 <__alt_data_end+0xfffe30d8>
   2257c:	04bfffc4 	movi	r18,-1
   22580:	003fe806 	br	22524 <__alt_data_end+0xfffe3124>
   22584:	81400417 	ldw	r5,16(r16)
   22588:	8809883a 	mov	r4,r17
   2258c:	002297c0 	call	2297c <_free_r>
   22590:	003fe706 	br	22530 <__alt_data_end+0xfffe3130>
   22594:	0005883a 	mov	r2,zero
   22598:	f800283a 	ret

0002259c <fclose>:
   2259c:	008000f4 	movhi	r2,3
   225a0:	10bd9104 	addi	r2,r2,-2492
   225a4:	200b883a 	mov	r5,r4
   225a8:	11000017 	ldw	r4,0(r2)
   225ac:	00224ac1 	jmpi	224ac <_fclose_r>

000225b0 <__sflush_r>:
   225b0:	2880030b 	ldhu	r2,12(r5)
   225b4:	defffb04 	addi	sp,sp,-20
   225b8:	dcc00315 	stw	r19,12(sp)
   225bc:	dc400115 	stw	r17,4(sp)
   225c0:	dfc00415 	stw	ra,16(sp)
   225c4:	dc800215 	stw	r18,8(sp)
   225c8:	dc000015 	stw	r16,0(sp)
   225cc:	10c0020c 	andi	r3,r2,8
   225d0:	2823883a 	mov	r17,r5
   225d4:	2027883a 	mov	r19,r4
   225d8:	1800311e 	bne	r3,zero,226a0 <__sflush_r+0xf0>
   225dc:	28c00117 	ldw	r3,4(r5)
   225e0:	10820014 	ori	r2,r2,2048
   225e4:	2880030d 	sth	r2,12(r5)
   225e8:	00c04b0e 	bge	zero,r3,22718 <__sflush_r+0x168>
   225ec:	8a000a17 	ldw	r8,40(r17)
   225f0:	40002326 	beq	r8,zero,22680 <__sflush_r+0xd0>
   225f4:	9c000017 	ldw	r16,0(r19)
   225f8:	10c4000c 	andi	r3,r2,4096
   225fc:	98000015 	stw	zero,0(r19)
   22600:	18004826 	beq	r3,zero,22724 <__sflush_r+0x174>
   22604:	89801417 	ldw	r6,80(r17)
   22608:	10c0010c 	andi	r3,r2,4
   2260c:	18000626 	beq	r3,zero,22628 <__sflush_r+0x78>
   22610:	88c00117 	ldw	r3,4(r17)
   22614:	88800c17 	ldw	r2,48(r17)
   22618:	30cdc83a 	sub	r6,r6,r3
   2261c:	10000226 	beq	r2,zero,22628 <__sflush_r+0x78>
   22620:	88800f17 	ldw	r2,60(r17)
   22624:	308dc83a 	sub	r6,r6,r2
   22628:	89400717 	ldw	r5,28(r17)
   2262c:	000f883a 	mov	r7,zero
   22630:	9809883a 	mov	r4,r19
   22634:	403ee83a 	callr	r8
   22638:	00ffffc4 	movi	r3,-1
   2263c:	10c04426 	beq	r2,r3,22750 <__sflush_r+0x1a0>
   22640:	88c0030b 	ldhu	r3,12(r17)
   22644:	89000417 	ldw	r4,16(r17)
   22648:	88000115 	stw	zero,4(r17)
   2264c:	197dffcc 	andi	r5,r3,63487
   22650:	8940030d 	sth	r5,12(r17)
   22654:	89000015 	stw	r4,0(r17)
   22658:	18c4000c 	andi	r3,r3,4096
   2265c:	18002c1e 	bne	r3,zero,22710 <__sflush_r+0x160>
   22660:	89400c17 	ldw	r5,48(r17)
   22664:	9c000015 	stw	r16,0(r19)
   22668:	28000526 	beq	r5,zero,22680 <__sflush_r+0xd0>
   2266c:	88801004 	addi	r2,r17,64
   22670:	28800226 	beq	r5,r2,2267c <__sflush_r+0xcc>
   22674:	9809883a 	mov	r4,r19
   22678:	002297c0 	call	2297c <_free_r>
   2267c:	88000c15 	stw	zero,48(r17)
   22680:	0005883a 	mov	r2,zero
   22684:	dfc00417 	ldw	ra,16(sp)
   22688:	dcc00317 	ldw	r19,12(sp)
   2268c:	dc800217 	ldw	r18,8(sp)
   22690:	dc400117 	ldw	r17,4(sp)
   22694:	dc000017 	ldw	r16,0(sp)
   22698:	dec00504 	addi	sp,sp,20
   2269c:	f800283a 	ret
   226a0:	2c800417 	ldw	r18,16(r5)
   226a4:	903ff626 	beq	r18,zero,22680 <__alt_data_end+0xfffe3280>
   226a8:	2c000017 	ldw	r16,0(r5)
   226ac:	108000cc 	andi	r2,r2,3
   226b0:	2c800015 	stw	r18,0(r5)
   226b4:	84a1c83a 	sub	r16,r16,r18
   226b8:	1000131e 	bne	r2,zero,22708 <__sflush_r+0x158>
   226bc:	28800517 	ldw	r2,20(r5)
   226c0:	88800215 	stw	r2,8(r17)
   226c4:	04000316 	blt	zero,r16,226d4 <__sflush_r+0x124>
   226c8:	003fed06 	br	22680 <__alt_data_end+0xfffe3280>
   226cc:	90a5883a 	add	r18,r18,r2
   226d0:	043feb0e 	bge	zero,r16,22680 <__alt_data_end+0xfffe3280>
   226d4:	88800917 	ldw	r2,36(r17)
   226d8:	89400717 	ldw	r5,28(r17)
   226dc:	800f883a 	mov	r7,r16
   226e0:	900d883a 	mov	r6,r18
   226e4:	9809883a 	mov	r4,r19
   226e8:	103ee83a 	callr	r2
   226ec:	80a1c83a 	sub	r16,r16,r2
   226f0:	00bff616 	blt	zero,r2,226cc <__alt_data_end+0xfffe32cc>
   226f4:	88c0030b 	ldhu	r3,12(r17)
   226f8:	00bfffc4 	movi	r2,-1
   226fc:	18c01014 	ori	r3,r3,64
   22700:	88c0030d 	sth	r3,12(r17)
   22704:	003fdf06 	br	22684 <__alt_data_end+0xfffe3284>
   22708:	0005883a 	mov	r2,zero
   2270c:	003fec06 	br	226c0 <__alt_data_end+0xfffe32c0>
   22710:	88801415 	stw	r2,80(r17)
   22714:	003fd206 	br	22660 <__alt_data_end+0xfffe3260>
   22718:	28c00f17 	ldw	r3,60(r5)
   2271c:	00ffb316 	blt	zero,r3,225ec <__alt_data_end+0xfffe31ec>
   22720:	003fd706 	br	22680 <__alt_data_end+0xfffe3280>
   22724:	89400717 	ldw	r5,28(r17)
   22728:	000d883a 	mov	r6,zero
   2272c:	01c00044 	movi	r7,1
   22730:	9809883a 	mov	r4,r19
   22734:	403ee83a 	callr	r8
   22738:	100d883a 	mov	r6,r2
   2273c:	00bfffc4 	movi	r2,-1
   22740:	30801426 	beq	r6,r2,22794 <__sflush_r+0x1e4>
   22744:	8880030b 	ldhu	r2,12(r17)
   22748:	8a000a17 	ldw	r8,40(r17)
   2274c:	003fae06 	br	22608 <__alt_data_end+0xfffe3208>
   22750:	98c00017 	ldw	r3,0(r19)
   22754:	183fba26 	beq	r3,zero,22640 <__alt_data_end+0xfffe3240>
   22758:	01000744 	movi	r4,29
   2275c:	19000626 	beq	r3,r4,22778 <__sflush_r+0x1c8>
   22760:	01000584 	movi	r4,22
   22764:	19000426 	beq	r3,r4,22778 <__sflush_r+0x1c8>
   22768:	88c0030b 	ldhu	r3,12(r17)
   2276c:	18c01014 	ori	r3,r3,64
   22770:	88c0030d 	sth	r3,12(r17)
   22774:	003fc306 	br	22684 <__alt_data_end+0xfffe3284>
   22778:	8880030b 	ldhu	r2,12(r17)
   2277c:	88c00417 	ldw	r3,16(r17)
   22780:	88000115 	stw	zero,4(r17)
   22784:	10bdffcc 	andi	r2,r2,63487
   22788:	8880030d 	sth	r2,12(r17)
   2278c:	88c00015 	stw	r3,0(r17)
   22790:	003fb306 	br	22660 <__alt_data_end+0xfffe3260>
   22794:	98800017 	ldw	r2,0(r19)
   22798:	103fea26 	beq	r2,zero,22744 <__alt_data_end+0xfffe3344>
   2279c:	00c00744 	movi	r3,29
   227a0:	10c00226 	beq	r2,r3,227ac <__sflush_r+0x1fc>
   227a4:	00c00584 	movi	r3,22
   227a8:	10c0031e 	bne	r2,r3,227b8 <__sflush_r+0x208>
   227ac:	9c000015 	stw	r16,0(r19)
   227b0:	0005883a 	mov	r2,zero
   227b4:	003fb306 	br	22684 <__alt_data_end+0xfffe3284>
   227b8:	88c0030b 	ldhu	r3,12(r17)
   227bc:	3005883a 	mov	r2,r6
   227c0:	18c01014 	ori	r3,r3,64
   227c4:	88c0030d 	sth	r3,12(r17)
   227c8:	003fae06 	br	22684 <__alt_data_end+0xfffe3284>

000227cc <_fflush_r>:
   227cc:	defffd04 	addi	sp,sp,-12
   227d0:	dc000115 	stw	r16,4(sp)
   227d4:	dfc00215 	stw	ra,8(sp)
   227d8:	2021883a 	mov	r16,r4
   227dc:	20000226 	beq	r4,zero,227e8 <_fflush_r+0x1c>
   227e0:	20800e17 	ldw	r2,56(r4)
   227e4:	10000c26 	beq	r2,zero,22818 <_fflush_r+0x4c>
   227e8:	2880030f 	ldh	r2,12(r5)
   227ec:	1000051e 	bne	r2,zero,22804 <_fflush_r+0x38>
   227f0:	0005883a 	mov	r2,zero
   227f4:	dfc00217 	ldw	ra,8(sp)
   227f8:	dc000117 	ldw	r16,4(sp)
   227fc:	dec00304 	addi	sp,sp,12
   22800:	f800283a 	ret
   22804:	8009883a 	mov	r4,r16
   22808:	dfc00217 	ldw	ra,8(sp)
   2280c:	dc000117 	ldw	r16,4(sp)
   22810:	dec00304 	addi	sp,sp,12
   22814:	00225b01 	jmpi	225b0 <__sflush_r>
   22818:	d9400015 	stw	r5,0(sp)
   2281c:	00208540 	call	20854 <__sinit>
   22820:	d9400017 	ldw	r5,0(sp)
   22824:	003ff006 	br	227e8 <__alt_data_end+0xfffe33e8>

00022828 <fflush>:
   22828:	20000526 	beq	r4,zero,22840 <fflush+0x18>
   2282c:	008000f4 	movhi	r2,3
   22830:	10bd9104 	addi	r2,r2,-2492
   22834:	200b883a 	mov	r5,r4
   22838:	11000017 	ldw	r4,0(r2)
   2283c:	00227cc1 	jmpi	227cc <_fflush_r>
   22840:	008000f4 	movhi	r2,3
   22844:	10bd9004 	addi	r2,r2,-2496
   22848:	11000017 	ldw	r4,0(r2)
   2284c:	014000b4 	movhi	r5,2
   22850:	2949f304 	addi	r5,r5,10188
   22854:	0020e301 	jmpi	20e30 <_fwalk_reent>

00022858 <_malloc_trim_r>:
   22858:	defffb04 	addi	sp,sp,-20
   2285c:	dcc00315 	stw	r19,12(sp)
   22860:	04c000f4 	movhi	r19,3
   22864:	dc800215 	stw	r18,8(sp)
   22868:	dc400115 	stw	r17,4(sp)
   2286c:	dc000015 	stw	r16,0(sp)
   22870:	dfc00415 	stw	ra,16(sp)
   22874:	2821883a 	mov	r16,r5
   22878:	9cf80904 	addi	r19,r19,-8156
   2287c:	2025883a 	mov	r18,r4
   22880:	0023c440 	call	23c44 <__malloc_lock>
   22884:	98800217 	ldw	r2,8(r19)
   22888:	14400117 	ldw	r17,4(r2)
   2288c:	00bfff04 	movi	r2,-4
   22890:	88a2703a 	and	r17,r17,r2
   22894:	8c21c83a 	sub	r16,r17,r16
   22898:	8403fbc4 	addi	r16,r16,4079
   2289c:	8020d33a 	srli	r16,r16,12
   228a0:	0083ffc4 	movi	r2,4095
   228a4:	843fffc4 	addi	r16,r16,-1
   228a8:	8020933a 	slli	r16,r16,12
   228ac:	1400060e 	bge	r2,r16,228c8 <_malloc_trim_r+0x70>
   228b0:	000b883a 	mov	r5,zero
   228b4:	9009883a 	mov	r4,r18
   228b8:	00221140 	call	22114 <_sbrk_r>
   228bc:	98c00217 	ldw	r3,8(r19)
   228c0:	1c47883a 	add	r3,r3,r17
   228c4:	10c00a26 	beq	r2,r3,228f0 <_malloc_trim_r+0x98>
   228c8:	9009883a 	mov	r4,r18
   228cc:	0023d640 	call	23d64 <__malloc_unlock>
   228d0:	0005883a 	mov	r2,zero
   228d4:	dfc00417 	ldw	ra,16(sp)
   228d8:	dcc00317 	ldw	r19,12(sp)
   228dc:	dc800217 	ldw	r18,8(sp)
   228e0:	dc400117 	ldw	r17,4(sp)
   228e4:	dc000017 	ldw	r16,0(sp)
   228e8:	dec00504 	addi	sp,sp,20
   228ec:	f800283a 	ret
   228f0:	040bc83a 	sub	r5,zero,r16
   228f4:	9009883a 	mov	r4,r18
   228f8:	00221140 	call	22114 <_sbrk_r>
   228fc:	00ffffc4 	movi	r3,-1
   22900:	10c00d26 	beq	r2,r3,22938 <_malloc_trim_r+0xe0>
   22904:	00c000f4 	movhi	r3,3
   22908:	18c49e04 	addi	r3,r3,4728
   2290c:	18800017 	ldw	r2,0(r3)
   22910:	99000217 	ldw	r4,8(r19)
   22914:	8c23c83a 	sub	r17,r17,r16
   22918:	8c400054 	ori	r17,r17,1
   2291c:	1421c83a 	sub	r16,r2,r16
   22920:	24400115 	stw	r17,4(r4)
   22924:	9009883a 	mov	r4,r18
   22928:	1c000015 	stw	r16,0(r3)
   2292c:	0023d640 	call	23d64 <__malloc_unlock>
   22930:	00800044 	movi	r2,1
   22934:	003fe706 	br	228d4 <__alt_data_end+0xfffe34d4>
   22938:	000b883a 	mov	r5,zero
   2293c:	9009883a 	mov	r4,r18
   22940:	00221140 	call	22114 <_sbrk_r>
   22944:	99000217 	ldw	r4,8(r19)
   22948:	014003c4 	movi	r5,15
   2294c:	1107c83a 	sub	r3,r2,r4
   22950:	28ffdd0e 	bge	r5,r3,228c8 <__alt_data_end+0xfffe34c8>
   22954:	014000f4 	movhi	r5,3
   22958:	297d9204 	addi	r5,r5,-2488
   2295c:	29400017 	ldw	r5,0(r5)
   22960:	18c00054 	ori	r3,r3,1
   22964:	20c00115 	stw	r3,4(r4)
   22968:	00c000f4 	movhi	r3,3
   2296c:	1145c83a 	sub	r2,r2,r5
   22970:	18c49e04 	addi	r3,r3,4728
   22974:	18800015 	stw	r2,0(r3)
   22978:	003fd306 	br	228c8 <__alt_data_end+0xfffe34c8>

0002297c <_free_r>:
   2297c:	28004126 	beq	r5,zero,22a84 <_free_r+0x108>
   22980:	defffd04 	addi	sp,sp,-12
   22984:	dc400115 	stw	r17,4(sp)
   22988:	dc000015 	stw	r16,0(sp)
   2298c:	2023883a 	mov	r17,r4
   22990:	2821883a 	mov	r16,r5
   22994:	dfc00215 	stw	ra,8(sp)
   22998:	0023c440 	call	23c44 <__malloc_lock>
   2299c:	81ffff17 	ldw	r7,-4(r16)
   229a0:	00bfff84 	movi	r2,-2
   229a4:	010000f4 	movhi	r4,3
   229a8:	81bffe04 	addi	r6,r16,-8
   229ac:	3884703a 	and	r2,r7,r2
   229b0:	21380904 	addi	r4,r4,-8156
   229b4:	308b883a 	add	r5,r6,r2
   229b8:	2a400117 	ldw	r9,4(r5)
   229bc:	22000217 	ldw	r8,8(r4)
   229c0:	00ffff04 	movi	r3,-4
   229c4:	48c6703a 	and	r3,r9,r3
   229c8:	2a005726 	beq	r5,r8,22b28 <_free_r+0x1ac>
   229cc:	28c00115 	stw	r3,4(r5)
   229d0:	39c0004c 	andi	r7,r7,1
   229d4:	3800091e 	bne	r7,zero,229fc <_free_r+0x80>
   229d8:	823ffe17 	ldw	r8,-8(r16)
   229dc:	22400204 	addi	r9,r4,8
   229e0:	320dc83a 	sub	r6,r6,r8
   229e4:	31c00217 	ldw	r7,8(r6)
   229e8:	1205883a 	add	r2,r2,r8
   229ec:	3a406526 	beq	r7,r9,22b84 <_free_r+0x208>
   229f0:	32000317 	ldw	r8,12(r6)
   229f4:	3a000315 	stw	r8,12(r7)
   229f8:	41c00215 	stw	r7,8(r8)
   229fc:	28cf883a 	add	r7,r5,r3
   22a00:	39c00117 	ldw	r7,4(r7)
   22a04:	39c0004c 	andi	r7,r7,1
   22a08:	38003a26 	beq	r7,zero,22af4 <_free_r+0x178>
   22a0c:	10c00054 	ori	r3,r2,1
   22a10:	30c00115 	stw	r3,4(r6)
   22a14:	3087883a 	add	r3,r6,r2
   22a18:	18800015 	stw	r2,0(r3)
   22a1c:	00c07fc4 	movi	r3,511
   22a20:	18801936 	bltu	r3,r2,22a88 <_free_r+0x10c>
   22a24:	1004d0fa 	srli	r2,r2,3
   22a28:	01c00044 	movi	r7,1
   22a2c:	21400117 	ldw	r5,4(r4)
   22a30:	10c00044 	addi	r3,r2,1
   22a34:	18c7883a 	add	r3,r3,r3
   22a38:	1005d0ba 	srai	r2,r2,2
   22a3c:	18c7883a 	add	r3,r3,r3
   22a40:	18c7883a 	add	r3,r3,r3
   22a44:	1907883a 	add	r3,r3,r4
   22a48:	3884983a 	sll	r2,r7,r2
   22a4c:	19c00017 	ldw	r7,0(r3)
   22a50:	1a3ffe04 	addi	r8,r3,-8
   22a54:	1144b03a 	or	r2,r2,r5
   22a58:	32000315 	stw	r8,12(r6)
   22a5c:	31c00215 	stw	r7,8(r6)
   22a60:	20800115 	stw	r2,4(r4)
   22a64:	19800015 	stw	r6,0(r3)
   22a68:	39800315 	stw	r6,12(r7)
   22a6c:	8809883a 	mov	r4,r17
   22a70:	dfc00217 	ldw	ra,8(sp)
   22a74:	dc400117 	ldw	r17,4(sp)
   22a78:	dc000017 	ldw	r16,0(sp)
   22a7c:	dec00304 	addi	sp,sp,12
   22a80:	0023d641 	jmpi	23d64 <__malloc_unlock>
   22a84:	f800283a 	ret
   22a88:	100ad27a 	srli	r5,r2,9
   22a8c:	00c00104 	movi	r3,4
   22a90:	19404a36 	bltu	r3,r5,22bbc <_free_r+0x240>
   22a94:	100ad1ba 	srli	r5,r2,6
   22a98:	28c00e44 	addi	r3,r5,57
   22a9c:	18c7883a 	add	r3,r3,r3
   22aa0:	29400e04 	addi	r5,r5,56
   22aa4:	18c7883a 	add	r3,r3,r3
   22aa8:	18c7883a 	add	r3,r3,r3
   22aac:	1909883a 	add	r4,r3,r4
   22ab0:	20c00017 	ldw	r3,0(r4)
   22ab4:	01c000f4 	movhi	r7,3
   22ab8:	213ffe04 	addi	r4,r4,-8
   22abc:	39f80904 	addi	r7,r7,-8156
   22ac0:	20c04426 	beq	r4,r3,22bd4 <_free_r+0x258>
   22ac4:	01ffff04 	movi	r7,-4
   22ac8:	19400117 	ldw	r5,4(r3)
   22acc:	29ca703a 	and	r5,r5,r7
   22ad0:	1140022e 	bgeu	r2,r5,22adc <_free_r+0x160>
   22ad4:	18c00217 	ldw	r3,8(r3)
   22ad8:	20fffb1e 	bne	r4,r3,22ac8 <__alt_data_end+0xfffe36c8>
   22adc:	19000317 	ldw	r4,12(r3)
   22ae0:	31000315 	stw	r4,12(r6)
   22ae4:	30c00215 	stw	r3,8(r6)
   22ae8:	21800215 	stw	r6,8(r4)
   22aec:	19800315 	stw	r6,12(r3)
   22af0:	003fde06 	br	22a6c <__alt_data_end+0xfffe366c>
   22af4:	29c00217 	ldw	r7,8(r5)
   22af8:	10c5883a 	add	r2,r2,r3
   22afc:	00c000f4 	movhi	r3,3
   22b00:	18f80b04 	addi	r3,r3,-8148
   22b04:	38c03b26 	beq	r7,r3,22bf4 <_free_r+0x278>
   22b08:	2a000317 	ldw	r8,12(r5)
   22b0c:	11400054 	ori	r5,r2,1
   22b10:	3087883a 	add	r3,r6,r2
   22b14:	3a000315 	stw	r8,12(r7)
   22b18:	41c00215 	stw	r7,8(r8)
   22b1c:	31400115 	stw	r5,4(r6)
   22b20:	18800015 	stw	r2,0(r3)
   22b24:	003fbd06 	br	22a1c <__alt_data_end+0xfffe361c>
   22b28:	39c0004c 	andi	r7,r7,1
   22b2c:	10c5883a 	add	r2,r2,r3
   22b30:	3800071e 	bne	r7,zero,22b50 <_free_r+0x1d4>
   22b34:	81fffe17 	ldw	r7,-8(r16)
   22b38:	31cdc83a 	sub	r6,r6,r7
   22b3c:	30c00317 	ldw	r3,12(r6)
   22b40:	31400217 	ldw	r5,8(r6)
   22b44:	11c5883a 	add	r2,r2,r7
   22b48:	28c00315 	stw	r3,12(r5)
   22b4c:	19400215 	stw	r5,8(r3)
   22b50:	10c00054 	ori	r3,r2,1
   22b54:	30c00115 	stw	r3,4(r6)
   22b58:	00c000f4 	movhi	r3,3
   22b5c:	18fd9304 	addi	r3,r3,-2484
   22b60:	18c00017 	ldw	r3,0(r3)
   22b64:	21800215 	stw	r6,8(r4)
   22b68:	10ffc036 	bltu	r2,r3,22a6c <__alt_data_end+0xfffe366c>
   22b6c:	008000f4 	movhi	r2,3
   22b70:	10847c04 	addi	r2,r2,4592
   22b74:	11400017 	ldw	r5,0(r2)
   22b78:	8809883a 	mov	r4,r17
   22b7c:	00228580 	call	22858 <_malloc_trim_r>
   22b80:	003fba06 	br	22a6c <__alt_data_end+0xfffe366c>
   22b84:	28c9883a 	add	r4,r5,r3
   22b88:	21000117 	ldw	r4,4(r4)
   22b8c:	2100004c 	andi	r4,r4,1
   22b90:	2000391e 	bne	r4,zero,22c78 <_free_r+0x2fc>
   22b94:	29c00217 	ldw	r7,8(r5)
   22b98:	29000317 	ldw	r4,12(r5)
   22b9c:	1885883a 	add	r2,r3,r2
   22ba0:	10c00054 	ori	r3,r2,1
   22ba4:	39000315 	stw	r4,12(r7)
   22ba8:	21c00215 	stw	r7,8(r4)
   22bac:	30c00115 	stw	r3,4(r6)
   22bb0:	308d883a 	add	r6,r6,r2
   22bb4:	30800015 	stw	r2,0(r6)
   22bb8:	003fac06 	br	22a6c <__alt_data_end+0xfffe366c>
   22bbc:	00c00504 	movi	r3,20
   22bc0:	19401536 	bltu	r3,r5,22c18 <_free_r+0x29c>
   22bc4:	28c01704 	addi	r3,r5,92
   22bc8:	18c7883a 	add	r3,r3,r3
   22bcc:	294016c4 	addi	r5,r5,91
   22bd0:	003fb406 	br	22aa4 <__alt_data_end+0xfffe36a4>
   22bd4:	280bd0ba 	srai	r5,r5,2
   22bd8:	00c00044 	movi	r3,1
   22bdc:	38800117 	ldw	r2,4(r7)
   22be0:	194a983a 	sll	r5,r3,r5
   22be4:	2007883a 	mov	r3,r4
   22be8:	2884b03a 	or	r2,r5,r2
   22bec:	38800115 	stw	r2,4(r7)
   22bf0:	003fbb06 	br	22ae0 <__alt_data_end+0xfffe36e0>
   22bf4:	21800515 	stw	r6,20(r4)
   22bf8:	21800415 	stw	r6,16(r4)
   22bfc:	10c00054 	ori	r3,r2,1
   22c00:	31c00315 	stw	r7,12(r6)
   22c04:	31c00215 	stw	r7,8(r6)
   22c08:	30c00115 	stw	r3,4(r6)
   22c0c:	308d883a 	add	r6,r6,r2
   22c10:	30800015 	stw	r2,0(r6)
   22c14:	003f9506 	br	22a6c <__alt_data_end+0xfffe366c>
   22c18:	00c01504 	movi	r3,84
   22c1c:	19400536 	bltu	r3,r5,22c34 <_free_r+0x2b8>
   22c20:	100ad33a 	srli	r5,r2,12
   22c24:	28c01bc4 	addi	r3,r5,111
   22c28:	18c7883a 	add	r3,r3,r3
   22c2c:	29401b84 	addi	r5,r5,110
   22c30:	003f9c06 	br	22aa4 <__alt_data_end+0xfffe36a4>
   22c34:	00c05504 	movi	r3,340
   22c38:	19400536 	bltu	r3,r5,22c50 <_free_r+0x2d4>
   22c3c:	100ad3fa 	srli	r5,r2,15
   22c40:	28c01e04 	addi	r3,r5,120
   22c44:	18c7883a 	add	r3,r3,r3
   22c48:	29401dc4 	addi	r5,r5,119
   22c4c:	003f9506 	br	22aa4 <__alt_data_end+0xfffe36a4>
   22c50:	00c15504 	movi	r3,1364
   22c54:	19400536 	bltu	r3,r5,22c6c <_free_r+0x2f0>
   22c58:	100ad4ba 	srli	r5,r2,18
   22c5c:	28c01f44 	addi	r3,r5,125
   22c60:	18c7883a 	add	r3,r3,r3
   22c64:	29401f04 	addi	r5,r5,124
   22c68:	003f8e06 	br	22aa4 <__alt_data_end+0xfffe36a4>
   22c6c:	00c03f84 	movi	r3,254
   22c70:	01401f84 	movi	r5,126
   22c74:	003f8b06 	br	22aa4 <__alt_data_end+0xfffe36a4>
   22c78:	10c00054 	ori	r3,r2,1
   22c7c:	30c00115 	stw	r3,4(r6)
   22c80:	308d883a 	add	r6,r6,r2
   22c84:	30800015 	stw	r2,0(r6)
   22c88:	003f7806 	br	22a6c <__alt_data_end+0xfffe366c>

00022c8c <_lseek_r>:
   22c8c:	defffd04 	addi	sp,sp,-12
   22c90:	2805883a 	mov	r2,r5
   22c94:	dc000015 	stw	r16,0(sp)
   22c98:	040000f4 	movhi	r16,3
   22c9c:	dc400115 	stw	r17,4(sp)
   22ca0:	300b883a 	mov	r5,r6
   22ca4:	84047d04 	addi	r16,r16,4596
   22ca8:	2023883a 	mov	r17,r4
   22cac:	380d883a 	mov	r6,r7
   22cb0:	1009883a 	mov	r4,r2
   22cb4:	dfc00215 	stw	ra,8(sp)
   22cb8:	80000015 	stw	zero,0(r16)
   22cbc:	00235d80 	call	235d8 <lseek>
   22cc0:	00ffffc4 	movi	r3,-1
   22cc4:	10c00526 	beq	r2,r3,22cdc <_lseek_r+0x50>
   22cc8:	dfc00217 	ldw	ra,8(sp)
   22ccc:	dc400117 	ldw	r17,4(sp)
   22cd0:	dc000017 	ldw	r16,0(sp)
   22cd4:	dec00304 	addi	sp,sp,12
   22cd8:	f800283a 	ret
   22cdc:	80c00017 	ldw	r3,0(r16)
   22ce0:	183ff926 	beq	r3,zero,22cc8 <__alt_data_end+0xfffe38c8>
   22ce4:	88c00015 	stw	r3,0(r17)
   22ce8:	003ff706 	br	22cc8 <__alt_data_end+0xfffe38c8>

00022cec <__smakebuf_r>:
   22cec:	2880030b 	ldhu	r2,12(r5)
   22cf0:	10c0008c 	andi	r3,r2,2
   22cf4:	1800411e 	bne	r3,zero,22dfc <__smakebuf_r+0x110>
   22cf8:	deffec04 	addi	sp,sp,-80
   22cfc:	dc000f15 	stw	r16,60(sp)
   22d00:	2821883a 	mov	r16,r5
   22d04:	2940038f 	ldh	r5,14(r5)
   22d08:	dc401015 	stw	r17,64(sp)
   22d0c:	dfc01315 	stw	ra,76(sp)
   22d10:	dcc01215 	stw	r19,72(sp)
   22d14:	dc801115 	stw	r18,68(sp)
   22d18:	2023883a 	mov	r17,r4
   22d1c:	28001c16 	blt	r5,zero,22d90 <__smakebuf_r+0xa4>
   22d20:	d80d883a 	mov	r6,sp
   22d24:	0022f080 	call	22f08 <_fstat_r>
   22d28:	10001816 	blt	r2,zero,22d8c <__smakebuf_r+0xa0>
   22d2c:	d8800117 	ldw	r2,4(sp)
   22d30:	00e00014 	movui	r3,32768
   22d34:	10bc000c 	andi	r2,r2,61440
   22d38:	14c80020 	cmpeqi	r19,r2,8192
   22d3c:	10c03726 	beq	r2,r3,22e1c <__smakebuf_r+0x130>
   22d40:	80c0030b 	ldhu	r3,12(r16)
   22d44:	18c20014 	ori	r3,r3,2048
   22d48:	80c0030d 	sth	r3,12(r16)
   22d4c:	00c80004 	movi	r3,8192
   22d50:	10c0521e 	bne	r2,r3,22e9c <__smakebuf_r+0x1b0>
   22d54:	8140038f 	ldh	r5,14(r16)
   22d58:	8809883a 	mov	r4,r17
   22d5c:	0022f640 	call	22f64 <_isatty_r>
   22d60:	10004c26 	beq	r2,zero,22e94 <__smakebuf_r+0x1a8>
   22d64:	8080030b 	ldhu	r2,12(r16)
   22d68:	80c010c4 	addi	r3,r16,67
   22d6c:	80c00015 	stw	r3,0(r16)
   22d70:	10800054 	ori	r2,r2,1
   22d74:	8080030d 	sth	r2,12(r16)
   22d78:	00800044 	movi	r2,1
   22d7c:	80c00415 	stw	r3,16(r16)
   22d80:	80800515 	stw	r2,20(r16)
   22d84:	04810004 	movi	r18,1024
   22d88:	00000706 	br	22da8 <__smakebuf_r+0xbc>
   22d8c:	8080030b 	ldhu	r2,12(r16)
   22d90:	10c0200c 	andi	r3,r2,128
   22d94:	18001f1e 	bne	r3,zero,22e14 <__smakebuf_r+0x128>
   22d98:	04810004 	movi	r18,1024
   22d9c:	10820014 	ori	r2,r2,2048
   22da0:	8080030d 	sth	r2,12(r16)
   22da4:	0027883a 	mov	r19,zero
   22da8:	900b883a 	mov	r5,r18
   22dac:	8809883a 	mov	r4,r17
   22db0:	0020ef40 	call	20ef4 <_malloc_r>
   22db4:	10002c26 	beq	r2,zero,22e68 <__smakebuf_r+0x17c>
   22db8:	80c0030b 	ldhu	r3,12(r16)
   22dbc:	010000b4 	movhi	r4,2
   22dc0:	21013f04 	addi	r4,r4,1276
   22dc4:	89000f15 	stw	r4,60(r17)
   22dc8:	18c02014 	ori	r3,r3,128
   22dcc:	80c0030d 	sth	r3,12(r16)
   22dd0:	80800015 	stw	r2,0(r16)
   22dd4:	80800415 	stw	r2,16(r16)
   22dd8:	84800515 	stw	r18,20(r16)
   22ddc:	98001a1e 	bne	r19,zero,22e48 <__smakebuf_r+0x15c>
   22de0:	dfc01317 	ldw	ra,76(sp)
   22de4:	dcc01217 	ldw	r19,72(sp)
   22de8:	dc801117 	ldw	r18,68(sp)
   22dec:	dc401017 	ldw	r17,64(sp)
   22df0:	dc000f17 	ldw	r16,60(sp)
   22df4:	dec01404 	addi	sp,sp,80
   22df8:	f800283a 	ret
   22dfc:	288010c4 	addi	r2,r5,67
   22e00:	28800015 	stw	r2,0(r5)
   22e04:	28800415 	stw	r2,16(r5)
   22e08:	00800044 	movi	r2,1
   22e0c:	28800515 	stw	r2,20(r5)
   22e10:	f800283a 	ret
   22e14:	04801004 	movi	r18,64
   22e18:	003fe006 	br	22d9c <__alt_data_end+0xfffe399c>
   22e1c:	81000a17 	ldw	r4,40(r16)
   22e20:	00c000b4 	movhi	r3,2
   22e24:	18c89004 	addi	r3,r3,8768
   22e28:	20ffc51e 	bne	r4,r3,22d40 <__alt_data_end+0xfffe3940>
   22e2c:	8080030b 	ldhu	r2,12(r16)
   22e30:	04810004 	movi	r18,1024
   22e34:	84801315 	stw	r18,76(r16)
   22e38:	1484b03a 	or	r2,r2,r18
   22e3c:	8080030d 	sth	r2,12(r16)
   22e40:	0027883a 	mov	r19,zero
   22e44:	003fd806 	br	22da8 <__alt_data_end+0xfffe39a8>
   22e48:	8140038f 	ldh	r5,14(r16)
   22e4c:	8809883a 	mov	r4,r17
   22e50:	0022f640 	call	22f64 <_isatty_r>
   22e54:	103fe226 	beq	r2,zero,22de0 <__alt_data_end+0xfffe39e0>
   22e58:	8080030b 	ldhu	r2,12(r16)
   22e5c:	10800054 	ori	r2,r2,1
   22e60:	8080030d 	sth	r2,12(r16)
   22e64:	003fde06 	br	22de0 <__alt_data_end+0xfffe39e0>
   22e68:	8080030b 	ldhu	r2,12(r16)
   22e6c:	10c0800c 	andi	r3,r2,512
   22e70:	183fdb1e 	bne	r3,zero,22de0 <__alt_data_end+0xfffe39e0>
   22e74:	10800094 	ori	r2,r2,2
   22e78:	80c010c4 	addi	r3,r16,67
   22e7c:	8080030d 	sth	r2,12(r16)
   22e80:	00800044 	movi	r2,1
   22e84:	80c00015 	stw	r3,0(r16)
   22e88:	80c00415 	stw	r3,16(r16)
   22e8c:	80800515 	stw	r2,20(r16)
   22e90:	003fd306 	br	22de0 <__alt_data_end+0xfffe39e0>
   22e94:	04810004 	movi	r18,1024
   22e98:	003fc306 	br	22da8 <__alt_data_end+0xfffe39a8>
   22e9c:	0027883a 	mov	r19,zero
   22ea0:	04810004 	movi	r18,1024
   22ea4:	003fc006 	br	22da8 <__alt_data_end+0xfffe39a8>

00022ea8 <_read_r>:
   22ea8:	defffd04 	addi	sp,sp,-12
   22eac:	2805883a 	mov	r2,r5
   22eb0:	dc000015 	stw	r16,0(sp)
   22eb4:	040000f4 	movhi	r16,3
   22eb8:	dc400115 	stw	r17,4(sp)
   22ebc:	300b883a 	mov	r5,r6
   22ec0:	84047d04 	addi	r16,r16,4596
   22ec4:	2023883a 	mov	r17,r4
   22ec8:	380d883a 	mov	r6,r7
   22ecc:	1009883a 	mov	r4,r2
   22ed0:	dfc00215 	stw	ra,8(sp)
   22ed4:	80000015 	stw	zero,0(r16)
   22ed8:	00237ac0 	call	237ac <read>
   22edc:	00ffffc4 	movi	r3,-1
   22ee0:	10c00526 	beq	r2,r3,22ef8 <_read_r+0x50>
   22ee4:	dfc00217 	ldw	ra,8(sp)
   22ee8:	dc400117 	ldw	r17,4(sp)
   22eec:	dc000017 	ldw	r16,0(sp)
   22ef0:	dec00304 	addi	sp,sp,12
   22ef4:	f800283a 	ret
   22ef8:	80c00017 	ldw	r3,0(r16)
   22efc:	183ff926 	beq	r3,zero,22ee4 <__alt_data_end+0xfffe3ae4>
   22f00:	88c00015 	stw	r3,0(r17)
   22f04:	003ff706 	br	22ee4 <__alt_data_end+0xfffe3ae4>

00022f08 <_fstat_r>:
   22f08:	defffd04 	addi	sp,sp,-12
   22f0c:	2805883a 	mov	r2,r5
   22f10:	dc000015 	stw	r16,0(sp)
   22f14:	040000f4 	movhi	r16,3
   22f18:	dc400115 	stw	r17,4(sp)
   22f1c:	84047d04 	addi	r16,r16,4596
   22f20:	2023883a 	mov	r17,r4
   22f24:	300b883a 	mov	r5,r6
   22f28:	1009883a 	mov	r4,r2
   22f2c:	dfc00215 	stw	ra,8(sp)
   22f30:	80000015 	stw	zero,0(r16)
   22f34:	00233100 	call	23310 <fstat>
   22f38:	00ffffc4 	movi	r3,-1
   22f3c:	10c00526 	beq	r2,r3,22f54 <_fstat_r+0x4c>
   22f40:	dfc00217 	ldw	ra,8(sp)
   22f44:	dc400117 	ldw	r17,4(sp)
   22f48:	dc000017 	ldw	r16,0(sp)
   22f4c:	dec00304 	addi	sp,sp,12
   22f50:	f800283a 	ret
   22f54:	80c00017 	ldw	r3,0(r16)
   22f58:	183ff926 	beq	r3,zero,22f40 <__alt_data_end+0xfffe3b40>
   22f5c:	88c00015 	stw	r3,0(r17)
   22f60:	003ff706 	br	22f40 <__alt_data_end+0xfffe3b40>

00022f64 <_isatty_r>:
   22f64:	defffd04 	addi	sp,sp,-12
   22f68:	dc000015 	stw	r16,0(sp)
   22f6c:	040000f4 	movhi	r16,3
   22f70:	dc400115 	stw	r17,4(sp)
   22f74:	84047d04 	addi	r16,r16,4596
   22f78:	2023883a 	mov	r17,r4
   22f7c:	2809883a 	mov	r4,r5
   22f80:	dfc00215 	stw	ra,8(sp)
   22f84:	80000015 	stw	zero,0(r16)
   22f88:	00234040 	call	23404 <isatty>
   22f8c:	00ffffc4 	movi	r3,-1
   22f90:	10c00526 	beq	r2,r3,22fa8 <_isatty_r+0x44>
   22f94:	dfc00217 	ldw	ra,8(sp)
   22f98:	dc400117 	ldw	r17,4(sp)
   22f9c:	dc000017 	ldw	r16,0(sp)
   22fa0:	dec00304 	addi	sp,sp,12
   22fa4:	f800283a 	ret
   22fa8:	80c00017 	ldw	r3,0(r16)
   22fac:	183ff926 	beq	r3,zero,22f94 <__alt_data_end+0xfffe3b94>
   22fb0:	88c00015 	stw	r3,0(r17)
   22fb4:	003ff706 	br	22f94 <__alt_data_end+0xfffe3b94>

00022fb8 <__divsi3>:
   22fb8:	20001b16 	blt	r4,zero,23028 <__divsi3+0x70>
   22fbc:	000f883a 	mov	r7,zero
   22fc0:	28001616 	blt	r5,zero,2301c <__divsi3+0x64>
   22fc4:	200d883a 	mov	r6,r4
   22fc8:	29001a2e 	bgeu	r5,r4,23034 <__divsi3+0x7c>
   22fcc:	00800804 	movi	r2,32
   22fd0:	00c00044 	movi	r3,1
   22fd4:	00000106 	br	22fdc <__divsi3+0x24>
   22fd8:	10000d26 	beq	r2,zero,23010 <__divsi3+0x58>
   22fdc:	294b883a 	add	r5,r5,r5
   22fe0:	10bfffc4 	addi	r2,r2,-1
   22fe4:	18c7883a 	add	r3,r3,r3
   22fe8:	293ffb36 	bltu	r5,r4,22fd8 <__alt_data_end+0xfffe3bd8>
   22fec:	0005883a 	mov	r2,zero
   22ff0:	18000726 	beq	r3,zero,23010 <__divsi3+0x58>
   22ff4:	0005883a 	mov	r2,zero
   22ff8:	31400236 	bltu	r6,r5,23004 <__divsi3+0x4c>
   22ffc:	314dc83a 	sub	r6,r6,r5
   23000:	10c4b03a 	or	r2,r2,r3
   23004:	1806d07a 	srli	r3,r3,1
   23008:	280ad07a 	srli	r5,r5,1
   2300c:	183ffa1e 	bne	r3,zero,22ff8 <__alt_data_end+0xfffe3bf8>
   23010:	38000126 	beq	r7,zero,23018 <__divsi3+0x60>
   23014:	0085c83a 	sub	r2,zero,r2
   23018:	f800283a 	ret
   2301c:	014bc83a 	sub	r5,zero,r5
   23020:	39c0005c 	xori	r7,r7,1
   23024:	003fe706 	br	22fc4 <__alt_data_end+0xfffe3bc4>
   23028:	0109c83a 	sub	r4,zero,r4
   2302c:	01c00044 	movi	r7,1
   23030:	003fe306 	br	22fc0 <__alt_data_end+0xfffe3bc0>
   23034:	00c00044 	movi	r3,1
   23038:	003fee06 	br	22ff4 <__alt_data_end+0xfffe3bf4>

0002303c <__modsi3>:
   2303c:	20001716 	blt	r4,zero,2309c <__modsi3+0x60>
   23040:	000f883a 	mov	r7,zero
   23044:	2005883a 	mov	r2,r4
   23048:	28001216 	blt	r5,zero,23094 <__modsi3+0x58>
   2304c:	2900162e 	bgeu	r5,r4,230a8 <__modsi3+0x6c>
   23050:	01800804 	movi	r6,32
   23054:	00c00044 	movi	r3,1
   23058:	00000106 	br	23060 <__modsi3+0x24>
   2305c:	30000a26 	beq	r6,zero,23088 <__modsi3+0x4c>
   23060:	294b883a 	add	r5,r5,r5
   23064:	31bfffc4 	addi	r6,r6,-1
   23068:	18c7883a 	add	r3,r3,r3
   2306c:	293ffb36 	bltu	r5,r4,2305c <__alt_data_end+0xfffe3c5c>
   23070:	18000526 	beq	r3,zero,23088 <__modsi3+0x4c>
   23074:	1806d07a 	srli	r3,r3,1
   23078:	11400136 	bltu	r2,r5,23080 <__modsi3+0x44>
   2307c:	1145c83a 	sub	r2,r2,r5
   23080:	280ad07a 	srli	r5,r5,1
   23084:	183ffb1e 	bne	r3,zero,23074 <__alt_data_end+0xfffe3c74>
   23088:	38000126 	beq	r7,zero,23090 <__modsi3+0x54>
   2308c:	0085c83a 	sub	r2,zero,r2
   23090:	f800283a 	ret
   23094:	014bc83a 	sub	r5,zero,r5
   23098:	003fec06 	br	2304c <__alt_data_end+0xfffe3c4c>
   2309c:	0109c83a 	sub	r4,zero,r4
   230a0:	01c00044 	movi	r7,1
   230a4:	003fe706 	br	23044 <__alt_data_end+0xfffe3c44>
   230a8:	00c00044 	movi	r3,1
   230ac:	003ff106 	br	23074 <__alt_data_end+0xfffe3c74>

000230b0 <__udivsi3>:
   230b0:	200d883a 	mov	r6,r4
   230b4:	2900152e 	bgeu	r5,r4,2310c <__udivsi3+0x5c>
   230b8:	28001416 	blt	r5,zero,2310c <__udivsi3+0x5c>
   230bc:	00800804 	movi	r2,32
   230c0:	00c00044 	movi	r3,1
   230c4:	00000206 	br	230d0 <__udivsi3+0x20>
   230c8:	10000e26 	beq	r2,zero,23104 <__udivsi3+0x54>
   230cc:	28000516 	blt	r5,zero,230e4 <__udivsi3+0x34>
   230d0:	294b883a 	add	r5,r5,r5
   230d4:	10bfffc4 	addi	r2,r2,-1
   230d8:	18c7883a 	add	r3,r3,r3
   230dc:	293ffa36 	bltu	r5,r4,230c8 <__alt_data_end+0xfffe3cc8>
   230e0:	18000826 	beq	r3,zero,23104 <__udivsi3+0x54>
   230e4:	0005883a 	mov	r2,zero
   230e8:	31400236 	bltu	r6,r5,230f4 <__udivsi3+0x44>
   230ec:	314dc83a 	sub	r6,r6,r5
   230f0:	10c4b03a 	or	r2,r2,r3
   230f4:	1806d07a 	srli	r3,r3,1
   230f8:	280ad07a 	srli	r5,r5,1
   230fc:	183ffa1e 	bne	r3,zero,230e8 <__alt_data_end+0xfffe3ce8>
   23100:	f800283a 	ret
   23104:	0005883a 	mov	r2,zero
   23108:	f800283a 	ret
   2310c:	00c00044 	movi	r3,1
   23110:	003ff406 	br	230e4 <__alt_data_end+0xfffe3ce4>

00023114 <__umodsi3>:
   23114:	2005883a 	mov	r2,r4
   23118:	2900122e 	bgeu	r5,r4,23164 <__umodsi3+0x50>
   2311c:	28001116 	blt	r5,zero,23164 <__umodsi3+0x50>
   23120:	01800804 	movi	r6,32
   23124:	00c00044 	movi	r3,1
   23128:	00000206 	br	23134 <__umodsi3+0x20>
   2312c:	30000c26 	beq	r6,zero,23160 <__umodsi3+0x4c>
   23130:	28000516 	blt	r5,zero,23148 <__umodsi3+0x34>
   23134:	294b883a 	add	r5,r5,r5
   23138:	31bfffc4 	addi	r6,r6,-1
   2313c:	18c7883a 	add	r3,r3,r3
   23140:	293ffa36 	bltu	r5,r4,2312c <__alt_data_end+0xfffe3d2c>
   23144:	18000626 	beq	r3,zero,23160 <__umodsi3+0x4c>
   23148:	1806d07a 	srli	r3,r3,1
   2314c:	11400136 	bltu	r2,r5,23154 <__umodsi3+0x40>
   23150:	1145c83a 	sub	r2,r2,r5
   23154:	280ad07a 	srli	r5,r5,1
   23158:	183ffb1e 	bne	r3,zero,23148 <__alt_data_end+0xfffe3d48>
   2315c:	f800283a 	ret
   23160:	f800283a 	ret
   23164:	00c00044 	movi	r3,1
   23168:	003ff706 	br	23148 <__alt_data_end+0xfffe3d48>

0002316c <__mulsi3>:
   2316c:	0005883a 	mov	r2,zero
   23170:	20000726 	beq	r4,zero,23190 <__mulsi3+0x24>
   23174:	20c0004c 	andi	r3,r4,1
   23178:	2008d07a 	srli	r4,r4,1
   2317c:	18000126 	beq	r3,zero,23184 <__mulsi3+0x18>
   23180:	1145883a 	add	r2,r2,r5
   23184:	294b883a 	add	r5,r5,r5
   23188:	203ffa1e 	bne	r4,zero,23174 <__alt_data_end+0xfffe3d74>
   2318c:	f800283a 	ret
   23190:	f800283a 	ret

00023194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23194:	defffe04 	addi	sp,sp,-8
   23198:	dfc00115 	stw	ra,4(sp)
   2319c:	df000015 	stw	fp,0(sp)
   231a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231a4:	d0a00917 	ldw	r2,-32732(gp)
   231a8:	10000326 	beq	r2,zero,231b8 <alt_get_errno+0x24>
   231ac:	d0a00917 	ldw	r2,-32732(gp)
   231b0:	103ee83a 	callr	r2
   231b4:	00000106 	br	231bc <alt_get_errno+0x28>
   231b8:	d0a6ed04 	addi	r2,gp,-25676
}
   231bc:	e037883a 	mov	sp,fp
   231c0:	dfc00117 	ldw	ra,4(sp)
   231c4:	df000017 	ldw	fp,0(sp)
   231c8:	dec00204 	addi	sp,sp,8
   231cc:	f800283a 	ret

000231d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   231d0:	defffb04 	addi	sp,sp,-20
   231d4:	dfc00415 	stw	ra,16(sp)
   231d8:	df000315 	stw	fp,12(sp)
   231dc:	df000304 	addi	fp,sp,12
   231e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   231e4:	e0bfff17 	ldw	r2,-4(fp)
   231e8:	10000816 	blt	r2,zero,2320c <close+0x3c>
   231ec:	01400304 	movi	r5,12
   231f0:	e13fff17 	ldw	r4,-4(fp)
   231f4:	002316c0 	call	2316c <__mulsi3>
   231f8:	1007883a 	mov	r3,r2
   231fc:	008000f4 	movhi	r2,3
   23200:	10b91504 	addi	r2,r2,-7084
   23204:	1885883a 	add	r2,r3,r2
   23208:	00000106 	br	23210 <close+0x40>
   2320c:	0005883a 	mov	r2,zero
   23210:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23214:	e0bffd17 	ldw	r2,-12(fp)
   23218:	10001926 	beq	r2,zero,23280 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2321c:	e0bffd17 	ldw	r2,-12(fp)
   23220:	10800017 	ldw	r2,0(r2)
   23224:	10800417 	ldw	r2,16(r2)
   23228:	10000626 	beq	r2,zero,23244 <close+0x74>
   2322c:	e0bffd17 	ldw	r2,-12(fp)
   23230:	10800017 	ldw	r2,0(r2)
   23234:	10800417 	ldw	r2,16(r2)
   23238:	e13ffd17 	ldw	r4,-12(fp)
   2323c:	103ee83a 	callr	r2
   23240:	00000106 	br	23248 <close+0x78>
   23244:	0005883a 	mov	r2,zero
   23248:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2324c:	e13fff17 	ldw	r4,-4(fp)
   23250:	00238b00 	call	238b0 <alt_release_fd>
    if (rval < 0)
   23254:	e0bffe17 	ldw	r2,-8(fp)
   23258:	1000070e 	bge	r2,zero,23278 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2325c:	00231940 	call	23194 <alt_get_errno>
   23260:	1007883a 	mov	r3,r2
   23264:	e0bffe17 	ldw	r2,-8(fp)
   23268:	0085c83a 	sub	r2,zero,r2
   2326c:	18800015 	stw	r2,0(r3)
      return -1;
   23270:	00bfffc4 	movi	r2,-1
   23274:	00000706 	br	23294 <close+0xc4>
    }
    return 0;
   23278:	0005883a 	mov	r2,zero
   2327c:	00000506 	br	23294 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23280:	00231940 	call	23194 <alt_get_errno>
   23284:	1007883a 	mov	r3,r2
   23288:	00801444 	movi	r2,81
   2328c:	18800015 	stw	r2,0(r3)
    return -1;
   23290:	00bfffc4 	movi	r2,-1
  }
}
   23294:	e037883a 	mov	sp,fp
   23298:	dfc00117 	ldw	ra,4(sp)
   2329c:	df000017 	ldw	fp,0(sp)
   232a0:	dec00204 	addi	sp,sp,8
   232a4:	f800283a 	ret

000232a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   232a8:	defffc04 	addi	sp,sp,-16
   232ac:	df000315 	stw	fp,12(sp)
   232b0:	df000304 	addi	fp,sp,12
   232b4:	e13ffd15 	stw	r4,-12(fp)
   232b8:	e17ffe15 	stw	r5,-8(fp)
   232bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   232c0:	e0bfff17 	ldw	r2,-4(fp)
}
   232c4:	e037883a 	mov	sp,fp
   232c8:	df000017 	ldw	fp,0(sp)
   232cc:	dec00104 	addi	sp,sp,4
   232d0:	f800283a 	ret

000232d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232d4:	defffe04 	addi	sp,sp,-8
   232d8:	dfc00115 	stw	ra,4(sp)
   232dc:	df000015 	stw	fp,0(sp)
   232e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232e4:	d0a00917 	ldw	r2,-32732(gp)
   232e8:	10000326 	beq	r2,zero,232f8 <alt_get_errno+0x24>
   232ec:	d0a00917 	ldw	r2,-32732(gp)
   232f0:	103ee83a 	callr	r2
   232f4:	00000106 	br	232fc <alt_get_errno+0x28>
   232f8:	d0a6ed04 	addi	r2,gp,-25676
}
   232fc:	e037883a 	mov	sp,fp
   23300:	dfc00117 	ldw	ra,4(sp)
   23304:	df000017 	ldw	fp,0(sp)
   23308:	dec00204 	addi	sp,sp,8
   2330c:	f800283a 	ret

00023310 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23310:	defffb04 	addi	sp,sp,-20
   23314:	dfc00415 	stw	ra,16(sp)
   23318:	df000315 	stw	fp,12(sp)
   2331c:	df000304 	addi	fp,sp,12
   23320:	e13ffe15 	stw	r4,-8(fp)
   23324:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23328:	e0bffe17 	ldw	r2,-8(fp)
   2332c:	10000816 	blt	r2,zero,23350 <fstat+0x40>
   23330:	01400304 	movi	r5,12
   23334:	e13ffe17 	ldw	r4,-8(fp)
   23338:	002316c0 	call	2316c <__mulsi3>
   2333c:	1007883a 	mov	r3,r2
   23340:	008000f4 	movhi	r2,3
   23344:	10b91504 	addi	r2,r2,-7084
   23348:	1885883a 	add	r2,r3,r2
   2334c:	00000106 	br	23354 <fstat+0x44>
   23350:	0005883a 	mov	r2,zero
   23354:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23358:	e0bffd17 	ldw	r2,-12(fp)
   2335c:	10001026 	beq	r2,zero,233a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23360:	e0bffd17 	ldw	r2,-12(fp)
   23364:	10800017 	ldw	r2,0(r2)
   23368:	10800817 	ldw	r2,32(r2)
   2336c:	10000726 	beq	r2,zero,2338c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23370:	e0bffd17 	ldw	r2,-12(fp)
   23374:	10800017 	ldw	r2,0(r2)
   23378:	10800817 	ldw	r2,32(r2)
   2337c:	e17fff17 	ldw	r5,-4(fp)
   23380:	e13ffd17 	ldw	r4,-12(fp)
   23384:	103ee83a 	callr	r2
   23388:	00000a06 	br	233b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2338c:	e0bfff17 	ldw	r2,-4(fp)
   23390:	00c80004 	movi	r3,8192
   23394:	10c00115 	stw	r3,4(r2)
      return 0;
   23398:	0005883a 	mov	r2,zero
   2339c:	00000506 	br	233b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   233a0:	00232d40 	call	232d4 <alt_get_errno>
   233a4:	1007883a 	mov	r3,r2
   233a8:	00801444 	movi	r2,81
   233ac:	18800015 	stw	r2,0(r3)
    return -1;
   233b0:	00bfffc4 	movi	r2,-1
  }
}
   233b4:	e037883a 	mov	sp,fp
   233b8:	dfc00117 	ldw	ra,4(sp)
   233bc:	df000017 	ldw	fp,0(sp)
   233c0:	dec00204 	addi	sp,sp,8
   233c4:	f800283a 	ret

000233c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   233c8:	defffe04 	addi	sp,sp,-8
   233cc:	dfc00115 	stw	ra,4(sp)
   233d0:	df000015 	stw	fp,0(sp)
   233d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233d8:	d0a00917 	ldw	r2,-32732(gp)
   233dc:	10000326 	beq	r2,zero,233ec <alt_get_errno+0x24>
   233e0:	d0a00917 	ldw	r2,-32732(gp)
   233e4:	103ee83a 	callr	r2
   233e8:	00000106 	br	233f0 <alt_get_errno+0x28>
   233ec:	d0a6ed04 	addi	r2,gp,-25676
}
   233f0:	e037883a 	mov	sp,fp
   233f4:	dfc00117 	ldw	ra,4(sp)
   233f8:	df000017 	ldw	fp,0(sp)
   233fc:	dec00204 	addi	sp,sp,8
   23400:	f800283a 	ret

00023404 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23404:	deffed04 	addi	sp,sp,-76
   23408:	dfc01215 	stw	ra,72(sp)
   2340c:	df001115 	stw	fp,68(sp)
   23410:	df001104 	addi	fp,sp,68
   23414:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23418:	e0bfff17 	ldw	r2,-4(fp)
   2341c:	10000816 	blt	r2,zero,23440 <isatty+0x3c>
   23420:	01400304 	movi	r5,12
   23424:	e13fff17 	ldw	r4,-4(fp)
   23428:	002316c0 	call	2316c <__mulsi3>
   2342c:	1007883a 	mov	r3,r2
   23430:	008000f4 	movhi	r2,3
   23434:	10b91504 	addi	r2,r2,-7084
   23438:	1885883a 	add	r2,r3,r2
   2343c:	00000106 	br	23444 <isatty+0x40>
   23440:	0005883a 	mov	r2,zero
   23444:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23448:	e0bfef17 	ldw	r2,-68(fp)
   2344c:	10000e26 	beq	r2,zero,23488 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23450:	e0bfef17 	ldw	r2,-68(fp)
   23454:	10800017 	ldw	r2,0(r2)
   23458:	10800817 	ldw	r2,32(r2)
   2345c:	1000021e 	bne	r2,zero,23468 <isatty+0x64>
    {
      return 1;
   23460:	00800044 	movi	r2,1
   23464:	00000d06 	br	2349c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23468:	e0bff004 	addi	r2,fp,-64
   2346c:	100b883a 	mov	r5,r2
   23470:	e13fff17 	ldw	r4,-4(fp)
   23474:	00233100 	call	23310 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23478:	e0bff117 	ldw	r2,-60(fp)
   2347c:	10880020 	cmpeqi	r2,r2,8192
   23480:	10803fcc 	andi	r2,r2,255
   23484:	00000506 	br	2349c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23488:	00233c80 	call	233c8 <alt_get_errno>
   2348c:	1007883a 	mov	r3,r2
   23490:	00801444 	movi	r2,81
   23494:	18800015 	stw	r2,0(r3)
    return 0;
   23498:	0005883a 	mov	r2,zero
  }
}
   2349c:	e037883a 	mov	sp,fp
   234a0:	dfc00117 	ldw	ra,4(sp)
   234a4:	df000017 	ldw	fp,0(sp)
   234a8:	dec00204 	addi	sp,sp,8
   234ac:	f800283a 	ret

000234b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   234b0:	defffc04 	addi	sp,sp,-16
   234b4:	df000315 	stw	fp,12(sp)
   234b8:	df000304 	addi	fp,sp,12
   234bc:	e13ffd15 	stw	r4,-12(fp)
   234c0:	e17ffe15 	stw	r5,-8(fp)
   234c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   234c8:	e0fffe17 	ldw	r3,-8(fp)
   234cc:	e0bffd17 	ldw	r2,-12(fp)
   234d0:	18800c26 	beq	r3,r2,23504 <alt_load_section+0x54>
  {
    while( to != end )
   234d4:	00000806 	br	234f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   234d8:	e0bffe17 	ldw	r2,-8(fp)
   234dc:	10c00104 	addi	r3,r2,4
   234e0:	e0fffe15 	stw	r3,-8(fp)
   234e4:	e0fffd17 	ldw	r3,-12(fp)
   234e8:	19000104 	addi	r4,r3,4
   234ec:	e13ffd15 	stw	r4,-12(fp)
   234f0:	18c00017 	ldw	r3,0(r3)
   234f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   234f8:	e0fffe17 	ldw	r3,-8(fp)
   234fc:	e0bfff17 	ldw	r2,-4(fp)
   23500:	18bff51e 	bne	r3,r2,234d8 <__alt_data_end+0xfffe40d8>
    {
      *to++ = *from++;
    }
  }
}
   23504:	0001883a 	nop
   23508:	e037883a 	mov	sp,fp
   2350c:	df000017 	ldw	fp,0(sp)
   23510:	dec00104 	addi	sp,sp,4
   23514:	f800283a 	ret

00023518 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23518:	defffe04 	addi	sp,sp,-8
   2351c:	dfc00115 	stw	ra,4(sp)
   23520:	df000015 	stw	fp,0(sp)
   23524:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23528:	018000f4 	movhi	r6,3
   2352c:	31bdbd04 	addi	r6,r6,-2316
   23530:	014000f4 	movhi	r5,3
   23534:	29770004 	addi	r5,r5,-9216
   23538:	010000f4 	movhi	r4,3
   2353c:	213dbd04 	addi	r4,r4,-2316
   23540:	00234b00 	call	234b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23544:	018000b4 	movhi	r6,2
   23548:	31808c04 	addi	r6,r6,560
   2354c:	014000b4 	movhi	r5,2
   23550:	29400804 	addi	r5,r5,32
   23554:	010000b4 	movhi	r4,2
   23558:	21000804 	addi	r4,r4,32
   2355c:	00234b00 	call	234b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23560:	018000f4 	movhi	r6,3
   23564:	31b70004 	addi	r6,r6,-9216
   23568:	014000f4 	movhi	r5,3
   2356c:	2976a004 	addi	r5,r5,-9600
   23570:	010000f4 	movhi	r4,3
   23574:	2136a004 	addi	r4,r4,-9600
   23578:	00234b00 	call	234b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2357c:	002c6400 	call	2c640 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23580:	002c8000 	call	2c800 <alt_icache_flush_all>
}
   23584:	0001883a 	nop
   23588:	e037883a 	mov	sp,fp
   2358c:	dfc00117 	ldw	ra,4(sp)
   23590:	df000017 	ldw	fp,0(sp)
   23594:	dec00204 	addi	sp,sp,8
   23598:	f800283a 	ret

0002359c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2359c:	defffe04 	addi	sp,sp,-8
   235a0:	dfc00115 	stw	ra,4(sp)
   235a4:	df000015 	stw	fp,0(sp)
   235a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235ac:	d0a00917 	ldw	r2,-32732(gp)
   235b0:	10000326 	beq	r2,zero,235c0 <alt_get_errno+0x24>
   235b4:	d0a00917 	ldw	r2,-32732(gp)
   235b8:	103ee83a 	callr	r2
   235bc:	00000106 	br	235c4 <alt_get_errno+0x28>
   235c0:	d0a6ed04 	addi	r2,gp,-25676
}
   235c4:	e037883a 	mov	sp,fp
   235c8:	dfc00117 	ldw	ra,4(sp)
   235cc:	df000017 	ldw	fp,0(sp)
   235d0:	dec00204 	addi	sp,sp,8
   235d4:	f800283a 	ret

000235d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   235d8:	defff904 	addi	sp,sp,-28
   235dc:	dfc00615 	stw	ra,24(sp)
   235e0:	df000515 	stw	fp,20(sp)
   235e4:	df000504 	addi	fp,sp,20
   235e8:	e13ffd15 	stw	r4,-12(fp)
   235ec:	e17ffe15 	stw	r5,-8(fp)
   235f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   235f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   235f8:	e0bffd17 	ldw	r2,-12(fp)
   235fc:	10000816 	blt	r2,zero,23620 <lseek+0x48>
   23600:	01400304 	movi	r5,12
   23604:	e13ffd17 	ldw	r4,-12(fp)
   23608:	002316c0 	call	2316c <__mulsi3>
   2360c:	1007883a 	mov	r3,r2
   23610:	008000f4 	movhi	r2,3
   23614:	10b91504 	addi	r2,r2,-7084
   23618:	1885883a 	add	r2,r3,r2
   2361c:	00000106 	br	23624 <lseek+0x4c>
   23620:	0005883a 	mov	r2,zero
   23624:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23628:	e0bffc17 	ldw	r2,-16(fp)
   2362c:	10001026 	beq	r2,zero,23670 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23630:	e0bffc17 	ldw	r2,-16(fp)
   23634:	10800017 	ldw	r2,0(r2)
   23638:	10800717 	ldw	r2,28(r2)
   2363c:	10000926 	beq	r2,zero,23664 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23640:	e0bffc17 	ldw	r2,-16(fp)
   23644:	10800017 	ldw	r2,0(r2)
   23648:	10800717 	ldw	r2,28(r2)
   2364c:	e1bfff17 	ldw	r6,-4(fp)
   23650:	e17ffe17 	ldw	r5,-8(fp)
   23654:	e13ffc17 	ldw	r4,-16(fp)
   23658:	103ee83a 	callr	r2
   2365c:	e0bffb15 	stw	r2,-20(fp)
   23660:	00000506 	br	23678 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23664:	00bfde84 	movi	r2,-134
   23668:	e0bffb15 	stw	r2,-20(fp)
   2366c:	00000206 	br	23678 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23670:	00bfebc4 	movi	r2,-81
   23674:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23678:	e0bffb17 	ldw	r2,-20(fp)
   2367c:	1000070e 	bge	r2,zero,2369c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23680:	002359c0 	call	2359c <alt_get_errno>
   23684:	1007883a 	mov	r3,r2
   23688:	e0bffb17 	ldw	r2,-20(fp)
   2368c:	0085c83a 	sub	r2,zero,r2
   23690:	18800015 	stw	r2,0(r3)
    rc = -1;
   23694:	00bfffc4 	movi	r2,-1
   23698:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2369c:	e0bffb17 	ldw	r2,-20(fp)
}
   236a0:	e037883a 	mov	sp,fp
   236a4:	dfc00117 	ldw	ra,4(sp)
   236a8:	df000017 	ldw	fp,0(sp)
   236ac:	dec00204 	addi	sp,sp,8
   236b0:	f800283a 	ret

000236b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   236b4:	defff904 	addi	sp,sp,-28
   236b8:	dfc00615 	stw	ra,24(sp)
   236bc:	df000515 	stw	fp,20(sp)
   236c0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   236c4:	0009883a 	mov	r4,zero
   236c8:	002b65c0 	call	2b65c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   236cc:	00246a00 	call	246a0 <OSInit>
   236d0:	01000044 	movi	r4,1
   236d4:	0028ffc0 	call	28ffc <OSSemCreate>
   236d8:	d0a6f315 	stw	r2,-25652(gp)
   236dc:	01000044 	movi	r4,1
   236e0:	0028ffc0 	call	28ffc <OSSemCreate>
   236e4:	d0a6f515 	stw	r2,-25644(gp)
   236e8:	d0a6ee04 	addi	r2,gp,-25672
   236ec:	e0bffc15 	stw	r2,-16(fp)
   236f0:	00800044 	movi	r2,1
   236f4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   236f8:	e0bffd0b 	ldhu	r2,-12(fp)
   236fc:	1009883a 	mov	r4,r2
   23700:	0028ffc0 	call	28ffc <OSSemCreate>
   23704:	1007883a 	mov	r3,r2
   23708:	e0bffc17 	ldw	r2,-16(fp)
   2370c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23710:	002b6940 	call	2b694 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23714:	018000f4 	movhi	r6,3
   23718:	31b6af04 	addi	r6,r6,-9540
   2371c:	014000f4 	movhi	r5,3
   23720:	2976af04 	addi	r5,r5,-9540
   23724:	010000f4 	movhi	r4,3
   23728:	2136af04 	addi	r4,r4,-9540
   2372c:	002cba40 	call	2cba4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23730:	002c7400 	call	2c740 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23734:	010000f4 	movhi	r4,3
   23738:	2131e804 	addi	r4,r4,-14432
   2373c:	002d6ec0 	call	2d6ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23740:	d0a6ef17 	ldw	r2,-25668(gp)
   23744:	d0e6f017 	ldw	r3,-25664(gp)
   23748:	d126f117 	ldw	r4,-25660(gp)
   2374c:	200d883a 	mov	r6,r4
   23750:	180b883a 	mov	r5,r3
   23754:	1009883a 	mov	r4,r2
   23758:	00202dc0 	call	202dc <main>
   2375c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   23760:	01000044 	movi	r4,1
   23764:	00231d00 	call	231d0 <close>
  exit (result);
   23768:	e13ffb17 	ldw	r4,-20(fp)
   2376c:	002d7000 	call	2d700 <exit>

00023770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23770:	defffe04 	addi	sp,sp,-8
   23774:	dfc00115 	stw	ra,4(sp)
   23778:	df000015 	stw	fp,0(sp)
   2377c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23780:	d0a00917 	ldw	r2,-32732(gp)
   23784:	10000326 	beq	r2,zero,23794 <alt_get_errno+0x24>
   23788:	d0a00917 	ldw	r2,-32732(gp)
   2378c:	103ee83a 	callr	r2
   23790:	00000106 	br	23798 <alt_get_errno+0x28>
   23794:	d0a6ed04 	addi	r2,gp,-25676
}
   23798:	e037883a 	mov	sp,fp
   2379c:	dfc00117 	ldw	ra,4(sp)
   237a0:	df000017 	ldw	fp,0(sp)
   237a4:	dec00204 	addi	sp,sp,8
   237a8:	f800283a 	ret

000237ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   237ac:	defff904 	addi	sp,sp,-28
   237b0:	dfc00615 	stw	ra,24(sp)
   237b4:	df000515 	stw	fp,20(sp)
   237b8:	df000504 	addi	fp,sp,20
   237bc:	e13ffd15 	stw	r4,-12(fp)
   237c0:	e17ffe15 	stw	r5,-8(fp)
   237c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237c8:	e0bffd17 	ldw	r2,-12(fp)
   237cc:	10000816 	blt	r2,zero,237f0 <read+0x44>
   237d0:	01400304 	movi	r5,12
   237d4:	e13ffd17 	ldw	r4,-12(fp)
   237d8:	002316c0 	call	2316c <__mulsi3>
   237dc:	1007883a 	mov	r3,r2
   237e0:	008000f4 	movhi	r2,3
   237e4:	10b91504 	addi	r2,r2,-7084
   237e8:	1885883a 	add	r2,r3,r2
   237ec:	00000106 	br	237f4 <read+0x48>
   237f0:	0005883a 	mov	r2,zero
   237f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   237f8:	e0bffb17 	ldw	r2,-20(fp)
   237fc:	10002226 	beq	r2,zero,23888 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23800:	e0bffb17 	ldw	r2,-20(fp)
   23804:	10800217 	ldw	r2,8(r2)
   23808:	108000cc 	andi	r2,r2,3
   2380c:	10800060 	cmpeqi	r2,r2,1
   23810:	1000181e 	bne	r2,zero,23874 <read+0xc8>
        (fd->dev->read))
   23814:	e0bffb17 	ldw	r2,-20(fp)
   23818:	10800017 	ldw	r2,0(r2)
   2381c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23820:	10001426 	beq	r2,zero,23874 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23824:	e0bffb17 	ldw	r2,-20(fp)
   23828:	10800017 	ldw	r2,0(r2)
   2382c:	10800517 	ldw	r2,20(r2)
   23830:	e0ffff17 	ldw	r3,-4(fp)
   23834:	180d883a 	mov	r6,r3
   23838:	e17ffe17 	ldw	r5,-8(fp)
   2383c:	e13ffb17 	ldw	r4,-20(fp)
   23840:	103ee83a 	callr	r2
   23844:	e0bffc15 	stw	r2,-16(fp)
   23848:	e0bffc17 	ldw	r2,-16(fp)
   2384c:	1000070e 	bge	r2,zero,2386c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23850:	00237700 	call	23770 <alt_get_errno>
   23854:	1007883a 	mov	r3,r2
   23858:	e0bffc17 	ldw	r2,-16(fp)
   2385c:	0085c83a 	sub	r2,zero,r2
   23860:	18800015 	stw	r2,0(r3)
          return -1;
   23864:	00bfffc4 	movi	r2,-1
   23868:	00000c06 	br	2389c <read+0xf0>
        }
        return rval;
   2386c:	e0bffc17 	ldw	r2,-16(fp)
   23870:	00000a06 	br	2389c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23874:	00237700 	call	23770 <alt_get_errno>
   23878:	1007883a 	mov	r3,r2
   2387c:	00800344 	movi	r2,13
   23880:	18800015 	stw	r2,0(r3)
   23884:	00000406 	br	23898 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23888:	00237700 	call	23770 <alt_get_errno>
   2388c:	1007883a 	mov	r3,r2
   23890:	00801444 	movi	r2,81
   23894:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23898:	00bfffc4 	movi	r2,-1
}
   2389c:	e037883a 	mov	sp,fp
   238a0:	dfc00117 	ldw	ra,4(sp)
   238a4:	df000017 	ldw	fp,0(sp)
   238a8:	dec00204 	addi	sp,sp,8
   238ac:	f800283a 	ret

000238b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   238b0:	defffc04 	addi	sp,sp,-16
   238b4:	dfc00315 	stw	ra,12(sp)
   238b8:	df000215 	stw	fp,8(sp)
   238bc:	dc000115 	stw	r16,4(sp)
   238c0:	df000204 	addi	fp,sp,8
   238c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   238c8:	e0bffe17 	ldw	r2,-8(fp)
   238cc:	108000d0 	cmplti	r2,r2,3
   238d0:	1000111e 	bne	r2,zero,23918 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   238d4:	040000f4 	movhi	r16,3
   238d8:	84391504 	addi	r16,r16,-7084
   238dc:	e0bffe17 	ldw	r2,-8(fp)
   238e0:	01400304 	movi	r5,12
   238e4:	1009883a 	mov	r4,r2
   238e8:	002316c0 	call	2316c <__mulsi3>
   238ec:	8085883a 	add	r2,r16,r2
   238f0:	10800204 	addi	r2,r2,8
   238f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   238f8:	040000f4 	movhi	r16,3
   238fc:	84391504 	addi	r16,r16,-7084
   23900:	e0bffe17 	ldw	r2,-8(fp)
   23904:	01400304 	movi	r5,12
   23908:	1009883a 	mov	r4,r2
   2390c:	002316c0 	call	2316c <__mulsi3>
   23910:	8085883a 	add	r2,r16,r2
   23914:	10000015 	stw	zero,0(r2)
  }
}
   23918:	0001883a 	nop
   2391c:	e6ffff04 	addi	sp,fp,-4
   23920:	dfc00217 	ldw	ra,8(sp)
   23924:	df000117 	ldw	fp,4(sp)
   23928:	dc000017 	ldw	r16,0(sp)
   2392c:	dec00304 	addi	sp,sp,12
   23930:	f800283a 	ret

00023934 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23934:	defff904 	addi	sp,sp,-28
   23938:	df000615 	stw	fp,24(sp)
   2393c:	df000604 	addi	fp,sp,24
   23940:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23944:	0005303a 	rdctl	r2,status
   23948:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2394c:	e0fffe17 	ldw	r3,-8(fp)
   23950:	00bfff84 	movi	r2,-2
   23954:	1884703a 	and	r2,r3,r2
   23958:	1001703a 	wrctl	status,r2
  
  return context;
   2395c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23960:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23964:	d0a00a17 	ldw	r2,-32728(gp)
   23968:	10c000c4 	addi	r3,r2,3
   2396c:	00bfff04 	movi	r2,-4
   23970:	1884703a 	and	r2,r3,r2
   23974:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23978:	d0e00a17 	ldw	r3,-32728(gp)
   2397c:	e0bfff17 	ldw	r2,-4(fp)
   23980:	1887883a 	add	r3,r3,r2
   23984:	00800134 	movhi	r2,4
   23988:	10bd0004 	addi	r2,r2,-3072
   2398c:	10c0062e 	bgeu	r2,r3,239a8 <sbrk+0x74>
   23990:	e0bffb17 	ldw	r2,-20(fp)
   23994:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23998:	e0bffa17 	ldw	r2,-24(fp)
   2399c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   239a0:	00bfffc4 	movi	r2,-1
   239a4:	00000b06 	br	239d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   239a8:	d0a00a17 	ldw	r2,-32728(gp)
   239ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   239b0:	d0e00a17 	ldw	r3,-32728(gp)
   239b4:	e0bfff17 	ldw	r2,-4(fp)
   239b8:	1885883a 	add	r2,r3,r2
   239bc:	d0a00a15 	stw	r2,-32728(gp)
   239c0:	e0bffb17 	ldw	r2,-20(fp)
   239c4:	e0bffc15 	stw	r2,-16(fp)
   239c8:	e0bffc17 	ldw	r2,-16(fp)
   239cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   239d0:	e0bffd17 	ldw	r2,-12(fp)
} 
   239d4:	e037883a 	mov	sp,fp
   239d8:	df000017 	ldw	fp,0(sp)
   239dc:	dec00104 	addi	sp,sp,4
   239e0:	f800283a 	ret

000239e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   239e4:	defffe04 	addi	sp,sp,-8
   239e8:	dfc00115 	stw	ra,4(sp)
   239ec:	df000015 	stw	fp,0(sp)
   239f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239f4:	d0a00917 	ldw	r2,-32732(gp)
   239f8:	10000326 	beq	r2,zero,23a08 <alt_get_errno+0x24>
   239fc:	d0a00917 	ldw	r2,-32732(gp)
   23a00:	103ee83a 	callr	r2
   23a04:	00000106 	br	23a0c <alt_get_errno+0x28>
   23a08:	d0a6ed04 	addi	r2,gp,-25676
}
   23a0c:	e037883a 	mov	sp,fp
   23a10:	dfc00117 	ldw	ra,4(sp)
   23a14:	df000017 	ldw	fp,0(sp)
   23a18:	dec00204 	addi	sp,sp,8
   23a1c:	f800283a 	ret

00023a20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23a20:	defff904 	addi	sp,sp,-28
   23a24:	dfc00615 	stw	ra,24(sp)
   23a28:	df000515 	stw	fp,20(sp)
   23a2c:	df000504 	addi	fp,sp,20
   23a30:	e13ffd15 	stw	r4,-12(fp)
   23a34:	e17ffe15 	stw	r5,-8(fp)
   23a38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a3c:	e0bffd17 	ldw	r2,-12(fp)
   23a40:	10000816 	blt	r2,zero,23a64 <write+0x44>
   23a44:	01400304 	movi	r5,12
   23a48:	e13ffd17 	ldw	r4,-12(fp)
   23a4c:	002316c0 	call	2316c <__mulsi3>
   23a50:	1007883a 	mov	r3,r2
   23a54:	008000f4 	movhi	r2,3
   23a58:	10b91504 	addi	r2,r2,-7084
   23a5c:	1885883a 	add	r2,r3,r2
   23a60:	00000106 	br	23a68 <write+0x48>
   23a64:	0005883a 	mov	r2,zero
   23a68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23a6c:	e0bffb17 	ldw	r2,-20(fp)
   23a70:	10002126 	beq	r2,zero,23af8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23a74:	e0bffb17 	ldw	r2,-20(fp)
   23a78:	10800217 	ldw	r2,8(r2)
   23a7c:	108000cc 	andi	r2,r2,3
   23a80:	10001826 	beq	r2,zero,23ae4 <write+0xc4>
   23a84:	e0bffb17 	ldw	r2,-20(fp)
   23a88:	10800017 	ldw	r2,0(r2)
   23a8c:	10800617 	ldw	r2,24(r2)
   23a90:	10001426 	beq	r2,zero,23ae4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23a94:	e0bffb17 	ldw	r2,-20(fp)
   23a98:	10800017 	ldw	r2,0(r2)
   23a9c:	10800617 	ldw	r2,24(r2)
   23aa0:	e0ffff17 	ldw	r3,-4(fp)
   23aa4:	180d883a 	mov	r6,r3
   23aa8:	e17ffe17 	ldw	r5,-8(fp)
   23aac:	e13ffb17 	ldw	r4,-20(fp)
   23ab0:	103ee83a 	callr	r2
   23ab4:	e0bffc15 	stw	r2,-16(fp)
   23ab8:	e0bffc17 	ldw	r2,-16(fp)
   23abc:	1000070e 	bge	r2,zero,23adc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23ac0:	00239e40 	call	239e4 <alt_get_errno>
   23ac4:	1007883a 	mov	r3,r2
   23ac8:	e0bffc17 	ldw	r2,-16(fp)
   23acc:	0085c83a 	sub	r2,zero,r2
   23ad0:	18800015 	stw	r2,0(r3)
        return -1;
   23ad4:	00bfffc4 	movi	r2,-1
   23ad8:	00000c06 	br	23b0c <write+0xec>
      }
      return rval;
   23adc:	e0bffc17 	ldw	r2,-16(fp)
   23ae0:	00000a06 	br	23b0c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23ae4:	00239e40 	call	239e4 <alt_get_errno>
   23ae8:	1007883a 	mov	r3,r2
   23aec:	00800344 	movi	r2,13
   23af0:	18800015 	stw	r2,0(r3)
   23af4:	00000406 	br	23b08 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23af8:	00239e40 	call	239e4 <alt_get_errno>
   23afc:	1007883a 	mov	r3,r2
   23b00:	00801444 	movi	r2,81
   23b04:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23b08:	00bfffc4 	movi	r2,-1
}
   23b0c:	e037883a 	mov	sp,fp
   23b10:	dfc00117 	ldw	ra,4(sp)
   23b14:	df000017 	ldw	fp,0(sp)
   23b18:	dec00204 	addi	sp,sp,8
   23b1c:	f800283a 	ret

00023b20 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   23b20:	deffdf04 	addi	sp,sp,-132
   23b24:	dfc02015 	stw	ra,128(sp)
   23b28:	df001f15 	stw	fp,124(sp)
   23b2c:	df001f04 	addi	fp,sp,124
   23b30:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   23b34:	e0bfe204 	addi	r2,fp,-120
   23b38:	100b883a 	mov	r5,r2
   23b3c:	01003fc4 	movi	r4,255
   23b40:	002af840 	call	2af84 <OSTaskQuery>
   23b44:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   23b48:	e0bffe83 	ldbu	r2,-6(fp)
   23b4c:	10803fcc 	andi	r2,r2,255
   23b50:	10001e1e 	bne	r2,zero,23bcc <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   23b54:	e0bfee83 	ldbu	r2,-70(fp)
   23b58:	10803fcc 	andi	r2,r2,255
   23b5c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   23b60:	d0a6f317 	ldw	r2,-25652(gp)
   23b64:	e0fffd04 	addi	r3,fp,-12
   23b68:	180b883a 	mov	r5,r3
   23b6c:	1009883a 	mov	r4,r2
   23b70:	002979c0 	call	2979c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   23b74:	e0bffe43 	ldbu	r2,-7(fp)
   23b78:	10803fcc 	andi	r2,r2,255
   23b7c:	10000726 	beq	r2,zero,23b9c <__env_lock+0x7c>
   23b80:	d0a00b17 	ldw	r2,-32724(gp)
   23b84:	e0ffe117 	ldw	r3,-124(fp)
   23b88:	1880041e 	bne	r3,r2,23b9c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   23b8c:	d0a6f217 	ldw	r2,-25656(gp)
   23b90:	10800044 	addi	r2,r2,1
   23b94:	d0a6f215 	stw	r2,-25656(gp)
   23b98:	00000a06 	br	23bc4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   23b9c:	d0a6f317 	ldw	r2,-25652(gp)
   23ba0:	e0fffe84 	addi	r3,fp,-6
   23ba4:	180d883a 	mov	r6,r3
   23ba8:	000b883a 	mov	r5,zero
   23bac:	1009883a 	mov	r4,r2
   23bb0:	00293140 	call	29314 <OSSemPend>
    locks  = 1;
   23bb4:	00800044 	movi	r2,1
   23bb8:	d0a6f215 	stw	r2,-25656(gp)
    lockid = id;
   23bbc:	e0bfe117 	ldw	r2,-124(fp)
   23bc0:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   23bc4:	0001883a 	nop
   23bc8:	00000106 	br	23bd0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   23bcc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   23bd0:	e037883a 	mov	sp,fp
   23bd4:	dfc00117 	ldw	ra,4(sp)
   23bd8:	df000017 	ldw	fp,0(sp)
   23bdc:	dec00204 	addi	sp,sp,8
   23be0:	f800283a 	ret

00023be4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   23be4:	defffd04 	addi	sp,sp,-12
   23be8:	dfc00215 	stw	ra,8(sp)
   23bec:	df000115 	stw	fp,4(sp)
   23bf0:	df000104 	addi	fp,sp,4
   23bf4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   23bf8:	d0a6f217 	ldw	r2,-25656(gp)
   23bfc:	10000b26 	beq	r2,zero,23c2c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   23c00:	d0a6f217 	ldw	r2,-25656(gp)
   23c04:	10bfffc4 	addi	r2,r2,-1
   23c08:	d0a6f215 	stw	r2,-25656(gp)
   23c0c:	d0a6f217 	ldw	r2,-25656(gp)
   23c10:	1000071e 	bne	r2,zero,23c30 <__env_unlock+0x4c>
  {
    lockid = -1;
   23c14:	00bfffc4 	movi	r2,-1
   23c18:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
   23c1c:	d0a6f317 	ldw	r2,-25652(gp)
   23c20:	1009883a 	mov	r4,r2
   23c24:	002968c0 	call	2968c <OSSemPost>
   23c28:	00000106 	br	23c30 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   23c2c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   23c30:	e037883a 	mov	sp,fp
   23c34:	dfc00117 	ldw	ra,4(sp)
   23c38:	df000017 	ldw	fp,0(sp)
   23c3c:	dec00204 	addi	sp,sp,8
   23c40:	f800283a 	ret

00023c44 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   23c44:	deffdb04 	addi	sp,sp,-148
   23c48:	dfc02415 	stw	ra,144(sp)
   23c4c:	df002315 	stw	fp,140(sp)
   23c50:	df002304 	addi	fp,sp,140
   23c54:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23c58:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   23c5c:	d0a6f643 	ldbu	r2,-25639(gp)
   23c60:	10803fcc 	andi	r2,r2,255
   23c64:	10800060 	cmpeqi	r2,r2,1
   23c68:	10003626 	beq	r2,zero,23d44 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   23c6c:	e0bfe204 	addi	r2,fp,-120
   23c70:	100b883a 	mov	r5,r2
   23c74:	01003fc4 	movi	r4,255
   23c78:	002af840 	call	2af84 <OSTaskQuery>
   23c7c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   23c80:	e0bffe83 	ldbu	r2,-6(fp)
   23c84:	10803fcc 	andi	r2,r2,255
   23c88:	1000301e 	bne	r2,zero,23d4c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   23c8c:	e0bfee83 	ldbu	r2,-70(fp)
   23c90:	10803fcc 	andi	r2,r2,255
   23c94:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   23c98:	d0a6f517 	ldw	r2,-25644(gp)
   23c9c:	e0fffd04 	addi	r3,fp,-12
   23ca0:	180b883a 	mov	r5,r3
   23ca4:	1009883a 	mov	r4,r2
   23ca8:	002979c0 	call	2979c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23cac:	0005303a 	rdctl	r2,status
   23cb0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23cb4:	e0ffe117 	ldw	r3,-124(fp)
   23cb8:	00bfff84 	movi	r2,-2
   23cbc:	1884703a 	and	r2,r3,r2
   23cc0:	1001703a 	wrctl	status,r2
  
  return context;
   23cc4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   23cc8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   23ccc:	e0bffd0b 	ldhu	r2,-12(fp)
   23cd0:	10bfffcc 	andi	r2,r2,65535
   23cd4:	10000b1e 	bne	r2,zero,23d04 <__malloc_lock+0xc0>
   23cd8:	d0a00c17 	ldw	r2,-32720(gp)
   23cdc:	e0ffde17 	ldw	r3,-136(fp)
   23ce0:	1880081e 	bne	r3,r2,23d04 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   23ce4:	d0a6f417 	ldw	r2,-25648(gp)
   23ce8:	10800044 	addi	r2,r2,1
   23cec:	d0a6f415 	stw	r2,-25648(gp)
   23cf0:	e0bfdd17 	ldw	r2,-140(fp)
   23cf4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23cf8:	e0bfdf17 	ldw	r2,-132(fp)
   23cfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   23d00:	00000e06 	br	23d3c <__malloc_lock+0xf8>
   23d04:	e0bfdd17 	ldw	r2,-140(fp)
   23d08:	e0bfe015 	stw	r2,-128(fp)
   23d0c:	e0bfe017 	ldw	r2,-128(fp)
   23d10:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   23d14:	d0a6f517 	ldw	r2,-25644(gp)
   23d18:	e0fffe84 	addi	r3,fp,-6
   23d1c:	180d883a 	mov	r6,r3
   23d20:	000b883a 	mov	r5,zero
   23d24:	1009883a 	mov	r4,r2
   23d28:	00293140 	call	29314 <OSSemPend>
    locks  = 1;
   23d2c:	00800044 	movi	r2,1
   23d30:	d0a6f415 	stw	r2,-25648(gp)
    lockid = id;
   23d34:	e0bfde17 	ldw	r2,-136(fp)
   23d38:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   23d3c:	0001883a 	nop
   23d40:	00000306 	br	23d50 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   23d44:	0001883a 	nop
   23d48:	00000106 	br	23d50 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   23d4c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   23d50:	e037883a 	mov	sp,fp
   23d54:	dfc00117 	ldw	ra,4(sp)
   23d58:	df000017 	ldw	fp,0(sp)
   23d5c:	dec00204 	addi	sp,sp,8
   23d60:	f800283a 	ret

00023d64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23d64:	defff804 	addi	sp,sp,-32
   23d68:	dfc00715 	stw	ra,28(sp)
   23d6c:	df000615 	stw	fp,24(sp)
   23d70:	df000604 	addi	fp,sp,24
   23d74:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23d78:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   23d7c:	d0a6f643 	ldbu	r2,-25639(gp)
   23d80:	10803fcc 	andi	r2,r2,255
   23d84:	10800060 	cmpeqi	r2,r2,1
   23d88:	10002326 	beq	r2,zero,23e18 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23d8c:	0005303a 	rdctl	r2,status
   23d90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23d94:	e0fffe17 	ldw	r3,-8(fp)
   23d98:	00bfff84 	movi	r2,-2
   23d9c:	1884703a 	and	r2,r3,r2
   23da0:	1001703a 	wrctl	status,r2
  
  return context;
   23da4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   23da8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   23dac:	d0a6f417 	ldw	r2,-25648(gp)
   23db0:	1000051e 	bne	r2,zero,23dc8 <__malloc_unlock+0x64>
   23db4:	e0bffa17 	ldw	r2,-24(fp)
   23db8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23dbc:	e0bffb17 	ldw	r2,-20(fp)
   23dc0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   23dc4:	00001506 	br	23e1c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   23dc8:	d0a6f417 	ldw	r2,-25648(gp)
   23dcc:	10bfffc4 	addi	r2,r2,-1
   23dd0:	d0a6f415 	stw	r2,-25648(gp)
   23dd4:	d0a6f417 	ldw	r2,-25648(gp)
   23dd8:	10000a1e 	bne	r2,zero,23e04 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   23ddc:	00bfffc4 	movi	r2,-1
   23de0:	d0a00c15 	stw	r2,-32720(gp)
   23de4:	e0bffa17 	ldw	r2,-24(fp)
   23de8:	e0bffc15 	stw	r2,-16(fp)
   23dec:	e0bffc17 	ldw	r2,-16(fp)
   23df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   23df4:	d0a6f517 	ldw	r2,-25644(gp)
   23df8:	1009883a 	mov	r4,r2
   23dfc:	002968c0 	call	2968c <OSSemPost>
   23e00:	00000606 	br	23e1c <__malloc_unlock+0xb8>
   23e04:	e0bffa17 	ldw	r2,-24(fp)
   23e08:	e0bffd15 	stw	r2,-12(fp)
   23e0c:	e0bffd17 	ldw	r2,-12(fp)
   23e10:	1001703a 	wrctl	status,r2
   23e14:	00000106 	br	23e1c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   23e18:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   23e1c:	e037883a 	mov	sp,fp
   23e20:	dfc00117 	ldw	ra,4(sp)
   23e24:	df000017 	ldw	fp,0(sp)
   23e28:	dec00204 	addi	sp,sp,8
   23e2c:	f800283a 	ret

00023e30 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   23e30:	defff704 	addi	sp,sp,-36
   23e34:	dfc00815 	stw	ra,32(sp)
   23e38:	df000715 	stw	fp,28(sp)
   23e3c:	df000704 	addi	fp,sp,28
   23e40:	e13ffd15 	stw	r4,-12(fp)
   23e44:	e17ffe15 	stw	r5,-8(fp)
   23e48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23e4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   23e50:	e0bfff17 	ldw	r2,-4(fp)
   23e54:	1000021e 	bne	r2,zero,23e60 <OSEventNameGet+0x30>
        return (0);
   23e58:	0005883a 	mov	r2,zero
   23e5c:	00003706 	br	23f3c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   23e60:	e0bffd17 	ldw	r2,-12(fp)
   23e64:	1000051e 	bne	r2,zero,23e7c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   23e68:	e0bfff17 	ldw	r2,-4(fp)
   23e6c:	00c00104 	movi	r3,4
   23e70:	10c00005 	stb	r3,0(r2)
        return (0);
   23e74:	0005883a 	mov	r2,zero
   23e78:	00003006 	br	23f3c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   23e7c:	e0bffe17 	ldw	r2,-8(fp)
   23e80:	1000051e 	bne	r2,zero,23e98 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   23e84:	e0bfff17 	ldw	r2,-4(fp)
   23e88:	00c00304 	movi	r3,12
   23e8c:	10c00005 	stb	r3,0(r2)
        return (0);
   23e90:	0005883a 	mov	r2,zero
   23e94:	00002906 	br	23f3c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   23e98:	d0a70403 	ldbu	r2,-25584(gp)
   23e9c:	10803fcc 	andi	r2,r2,255
   23ea0:	10000526 	beq	r2,zero,23eb8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   23ea4:	e0bfff17 	ldw	r2,-4(fp)
   23ea8:	00c00444 	movi	r3,17
   23eac:	10c00005 	stb	r3,0(r2)
        return (0);
   23eb0:	0005883a 	mov	r2,zero
   23eb4:	00002106 	br	23f3c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   23eb8:	e0bffd17 	ldw	r2,-12(fp)
   23ebc:	10800003 	ldbu	r2,0(r2)
   23ec0:	10803fcc 	andi	r2,r2,255
   23ec4:	10bfffc4 	addi	r2,r2,-1
   23ec8:	10800128 	cmpgeui	r2,r2,4
   23ecc:	10000526 	beq	r2,zero,23ee4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   23ed0:	e0bfff17 	ldw	r2,-4(fp)
   23ed4:	00c00044 	movi	r3,1
   23ed8:	10c00005 	stb	r3,0(r2)
             return (0);
   23edc:	0005883a 	mov	r2,zero
   23ee0:	00001606 	br	23f3c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   23ee4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ee8:	0005303a 	rdctl	r2,status
   23eec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ef0:	e0fffb17 	ldw	r3,-20(fp)
   23ef4:	00bfff84 	movi	r2,-2
   23ef8:	1884703a 	and	r2,r3,r2
   23efc:	1001703a 	wrctl	status,r2
  
  return context;
   23f00:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   23f04:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   23f08:	e0bffd17 	ldw	r2,-12(fp)
   23f0c:	10800384 	addi	r2,r2,14
   23f10:	100b883a 	mov	r5,r2
   23f14:	e13ffe17 	ldw	r4,-8(fp)
   23f18:	00258b40 	call	258b4 <OS_StrCopy>
   23f1c:	e0bffa05 	stb	r2,-24(fp)
   23f20:	e0bff917 	ldw	r2,-28(fp)
   23f24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23f28:	e0bffc17 	ldw	r2,-16(fp)
   23f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   23f30:	e0bfff17 	ldw	r2,-4(fp)
   23f34:	10000005 	stb	zero,0(r2)
    return (len);
   23f38:	e0bffa03 	ldbu	r2,-24(fp)
}
   23f3c:	e037883a 	mov	sp,fp
   23f40:	dfc00117 	ldw	ra,4(sp)
   23f44:	df000017 	ldw	fp,0(sp)
   23f48:	dec00204 	addi	sp,sp,8
   23f4c:	f800283a 	ret

00023f50 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   23f50:	defff604 	addi	sp,sp,-40
   23f54:	dfc00915 	stw	ra,36(sp)
   23f58:	df000815 	stw	fp,32(sp)
   23f5c:	df000804 	addi	fp,sp,32
   23f60:	e13ffd15 	stw	r4,-12(fp)
   23f64:	e17ffe15 	stw	r5,-8(fp)
   23f68:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23f6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   23f70:	e0bfff17 	ldw	r2,-4(fp)
   23f74:	10004026 	beq	r2,zero,24078 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   23f78:	e0bffd17 	ldw	r2,-12(fp)
   23f7c:	1000041e 	bne	r2,zero,23f90 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   23f80:	e0bfff17 	ldw	r2,-4(fp)
   23f84:	00c00104 	movi	r3,4
   23f88:	10c00005 	stb	r3,0(r2)
        return;
   23f8c:	00003b06 	br	2407c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   23f90:	e0bffe17 	ldw	r2,-8(fp)
   23f94:	1000041e 	bne	r2,zero,23fa8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   23f98:	e0bfff17 	ldw	r2,-4(fp)
   23f9c:	00c00304 	movi	r3,12
   23fa0:	10c00005 	stb	r3,0(r2)
        return;
   23fa4:	00003506 	br	2407c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   23fa8:	d0a70403 	ldbu	r2,-25584(gp)
   23fac:	10803fcc 	andi	r2,r2,255
   23fb0:	10000426 	beq	r2,zero,23fc4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   23fb4:	e0bfff17 	ldw	r2,-4(fp)
   23fb8:	00c00484 	movi	r3,18
   23fbc:	10c00005 	stb	r3,0(r2)
        return;
   23fc0:	00002e06 	br	2407c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   23fc4:	e0bffd17 	ldw	r2,-12(fp)
   23fc8:	10800003 	ldbu	r2,0(r2)
   23fcc:	10803fcc 	andi	r2,r2,255
   23fd0:	10bfffc4 	addi	r2,r2,-1
   23fd4:	10800128 	cmpgeui	r2,r2,4
   23fd8:	10000426 	beq	r2,zero,23fec <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   23fdc:	e0bfff17 	ldw	r2,-4(fp)
   23fe0:	00c00044 	movi	r3,1
   23fe4:	10c00005 	stb	r3,0(r2)
             return;
   23fe8:	00002406 	br	2407c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   23fec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ff0:	0005303a 	rdctl	r2,status
   23ff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ff8:	e0fffc17 	ldw	r3,-16(fp)
   23ffc:	00bfff84 	movi	r2,-2
   24000:	1884703a 	and	r2,r3,r2
   24004:	1001703a 	wrctl	status,r2
  
  return context;
   24008:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   2400c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   24010:	e13ffe17 	ldw	r4,-8(fp)
   24014:	00259280 	call	25928 <OS_StrLen>
   24018:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   2401c:	e0bffa03 	ldbu	r2,-24(fp)
   24020:	10800830 	cmpltui	r2,r2,32
   24024:	1000081e 	bne	r2,zero,24048 <OSEventNameSet+0xf8>
   24028:	e0bff817 	ldw	r2,-32(fp)
   2402c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24030:	e0bff917 	ldw	r2,-28(fp)
   24034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   24038:	e0bfff17 	ldw	r2,-4(fp)
   2403c:	00c002c4 	movi	r3,11
   24040:	10c00005 	stb	r3,0(r2)
        return;
   24044:	00000d06 	br	2407c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   24048:	e0bffd17 	ldw	r2,-12(fp)
   2404c:	10800384 	addi	r2,r2,14
   24050:	e17ffe17 	ldw	r5,-8(fp)
   24054:	1009883a 	mov	r4,r2
   24058:	00258b40 	call	258b4 <OS_StrCopy>
   2405c:	e0bff817 	ldw	r2,-32(fp)
   24060:	e0bffb15 	stw	r2,-20(fp)
   24064:	e0bffb17 	ldw	r2,-20(fp)
   24068:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2406c:	e0bfff17 	ldw	r2,-4(fp)
   24070:	10000005 	stb	zero,0(r2)
   24074:	00000106 	br	2407c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   24078:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   2407c:	e037883a 	mov	sp,fp
   24080:	dfc00117 	ldw	ra,4(sp)
   24084:	df000017 	ldw	fp,0(sp)
   24088:	dec00204 	addi	sp,sp,8
   2408c:	f800283a 	ret

00024090 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   24090:	deffed04 	addi	sp,sp,-76
   24094:	dfc01215 	stw	ra,72(sp)
   24098:	df001115 	stw	fp,68(sp)
   2409c:	df001104 	addi	fp,sp,68
   240a0:	e13ffc15 	stw	r4,-16(fp)
   240a4:	e17ffd15 	stw	r5,-12(fp)
   240a8:	e1bffe15 	stw	r6,-8(fp)
   240ac:	3805883a 	mov	r2,r7
   240b0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   240b4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   240b8:	e0800217 	ldw	r2,8(fp)
   240bc:	1000021e 	bne	r2,zero,240c8 <OSEventPendMulti+0x38>
        return (0);
   240c0:	0005883a 	mov	r2,zero
   240c4:	00017106 	br	2468c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   240c8:	e0bffc17 	ldw	r2,-16(fp)
   240cc:	1000051e 	bne	r2,zero,240e4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   240d0:	e0800217 	ldw	r2,8(fp)
   240d4:	00c00104 	movi	r3,4
   240d8:	10c00005 	stb	r3,0(r2)
        return (0);
   240dc:	0005883a 	mov	r2,zero
   240e0:	00016a06 	br	2468c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   240e4:	e0bffd17 	ldw	r2,-12(fp)
   240e8:	1000051e 	bne	r2,zero,24100 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   240ec:	e0800217 	ldw	r2,8(fp)
   240f0:	00c00104 	movi	r3,4
   240f4:	10c00005 	stb	r3,0(r2)
        return (0);
   240f8:	0005883a 	mov	r2,zero
   240fc:	00016306 	br	2468c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   24100:	e0bffe17 	ldw	r2,-8(fp)
   24104:	1000051e 	bne	r2,zero,2411c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   24108:	e0800217 	ldw	r2,8(fp)
   2410c:	00c00104 	movi	r3,4
   24110:	10c00005 	stb	r3,0(r2)
        return (0);
   24114:	0005883a 	mov	r2,zero
   24118:	00015c06 	br	2468c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   2411c:	e0bffd17 	ldw	r2,-12(fp)
   24120:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   24124:	e0bffc17 	ldw	r2,-16(fp)
   24128:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   2412c:	e0bfef17 	ldw	r2,-68(fp)
   24130:	10800017 	ldw	r2,0(r2)
   24134:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   24138:	00001906 	br	241a0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   2413c:	e0bff017 	ldw	r2,-64(fp)
   24140:	10800003 	ldbu	r2,0(r2)
   24144:	10803fcc 	andi	r2,r2,255
   24148:	10c000a0 	cmpeqi	r3,r2,2
   2414c:	1800091e 	bne	r3,zero,24174 <OSEventPendMulti+0xe4>
   24150:	10c000e0 	cmpeqi	r3,r2,3
   24154:	1800091e 	bne	r3,zero,2417c <OSEventPendMulti+0xec>
   24158:	10800060 	cmpeqi	r2,r2,1
   2415c:	1000091e 	bne	r2,zero,24184 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   24160:	e0800217 	ldw	r2,8(fp)
   24164:	00c00044 	movi	r3,1
   24168:	10c00005 	stb	r3,0(r2)
                 return (0);
   2416c:	0005883a 	mov	r2,zero
   24170:	00014606 	br	2468c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   24174:	0001883a 	nop
   24178:	00000306 	br	24188 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   2417c:	0001883a 	nop
   24180:	00000106 	br	24188 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   24184:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   24188:	e0bfef17 	ldw	r2,-68(fp)
   2418c:	10800104 	addi	r2,r2,4
   24190:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   24194:	e0bfef17 	ldw	r2,-68(fp)
   24198:	10800017 	ldw	r2,0(r2)
   2419c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   241a0:	e0bff017 	ldw	r2,-64(fp)
   241a4:	103fe51e 	bne	r2,zero,2413c <__alt_data_end+0xfffe4d3c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   241a8:	d0a70403 	ldbu	r2,-25584(gp)
   241ac:	10803fcc 	andi	r2,r2,255
   241b0:	10000526 	beq	r2,zero,241c8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   241b4:	e0800217 	ldw	r2,8(fp)
   241b8:	00c00084 	movi	r3,2
   241bc:	10c00005 	stb	r3,0(r2)
        return (0);
   241c0:	0005883a 	mov	r2,zero
   241c4:	00013106 	br	2468c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   241c8:	d0a6f603 	ldbu	r2,-25640(gp)
   241cc:	10803fcc 	andi	r2,r2,255
   241d0:	10000526 	beq	r2,zero,241e8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   241d4:	e0800217 	ldw	r2,8(fp)
   241d8:	00c00344 	movi	r3,13
   241dc:	10c00005 	stb	r3,0(r2)
        return (0);
   241e0:	0005883a 	mov	r2,zero
   241e4:	00012906 	br	2468c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   241e8:	0005303a 	rdctl	r2,status
   241ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241f0:	e0fffb17 	ldw	r3,-20(fp)
   241f4:	00bfff84 	movi	r2,-2
   241f8:	1884703a 	and	r2,r3,r2
   241fc:	1001703a 	wrctl	status,r2
  
  return context;
   24200:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   24204:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   24208:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   2420c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   24210:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   24214:	e0bffc17 	ldw	r2,-16(fp)
   24218:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   2421c:	e0bfef17 	ldw	r2,-68(fp)
   24220:	10800017 	ldw	r2,0(r2)
   24224:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   24228:	00008106 	br	24430 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   2422c:	e0bff017 	ldw	r2,-64(fp)
   24230:	10800003 	ldbu	r2,0(r2)
   24234:	10803fcc 	andi	r2,r2,255
   24238:	10c000a0 	cmpeqi	r3,r2,2
   2423c:	18003c1e 	bne	r3,zero,24330 <OSEventPendMulti+0x2a0>
   24240:	10c000e0 	cmpeqi	r3,r2,3
   24244:	1800031e 	bne	r3,zero,24254 <OSEventPendMulti+0x1c4>
   24248:	10800060 	cmpeqi	r2,r2,1
   2424c:	10001e1e 	bne	r2,zero,242c8 <OSEventPendMulti+0x238>
   24250:	00006606 	br	243ec <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   24254:	e0bff017 	ldw	r2,-64(fp)
   24258:	1080020b 	ldhu	r2,8(r2)
   2425c:	10bfffcc 	andi	r2,r2,65535
   24260:	10001526 	beq	r2,zero,242b8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   24264:	e0bff017 	ldw	r2,-64(fp)
   24268:	1080020b 	ldhu	r2,8(r2)
   2426c:	10bfffc4 	addi	r2,r2,-1
   24270:	1007883a 	mov	r3,r2
   24274:	e0bff017 	ldw	r2,-64(fp)
   24278:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   2427c:	e0bffd17 	ldw	r2,-12(fp)
   24280:	10c00104 	addi	r3,r2,4
   24284:	e0fffd15 	stw	r3,-12(fp)
   24288:	e0fff017 	ldw	r3,-64(fp)
   2428c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   24290:	00800044 	movi	r2,1
   24294:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   24298:	e0bffe17 	ldw	r2,-8(fp)
   2429c:	10c00104 	addi	r3,r2,4
   242a0:	e0fffe15 	stw	r3,-8(fp)
   242a4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   242a8:	e0bff18b 	ldhu	r2,-58(fp)
   242ac:	10800044 	addi	r2,r2,1
   242b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   242b4:	00005806 	br	24418 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   242b8:	e0bff203 	ldbu	r2,-56(fp)
   242bc:	10800054 	ori	r2,r2,1
   242c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   242c4:	00005406 	br	24418 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   242c8:	e0bff017 	ldw	r2,-64(fp)
   242cc:	10800117 	ldw	r2,4(r2)
   242d0:	10001326 	beq	r2,zero,24320 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   242d4:	e0bffe17 	ldw	r2,-8(fp)
   242d8:	10c00104 	addi	r3,r2,4
   242dc:	e0fffe15 	stw	r3,-8(fp)
   242e0:	e0fff017 	ldw	r3,-64(fp)
   242e4:	18c00117 	ldw	r3,4(r3)
   242e8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   242ec:	e0bff017 	ldw	r2,-64(fp)
   242f0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   242f4:	e0bffd17 	ldw	r2,-12(fp)
   242f8:	10c00104 	addi	r3,r2,4
   242fc:	e0fffd15 	stw	r3,-12(fp)
   24300:	e0fff017 	ldw	r3,-64(fp)
   24304:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   24308:	00800044 	movi	r2,1
   2430c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   24310:	e0bff18b 	ldhu	r2,-58(fp)
   24314:	10800044 	addi	r2,r2,1
   24318:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   2431c:	00003e06 	br	24418 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   24320:	e0bff203 	ldbu	r2,-56(fp)
   24324:	10800094 	ori	r2,r2,2
   24328:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   2432c:	00003a06 	br	24418 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   24330:	e0bff017 	ldw	r2,-64(fp)
   24334:	10800117 	ldw	r2,4(r2)
   24338:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   2433c:	e0bff517 	ldw	r2,-44(fp)
   24340:	1080058b 	ldhu	r2,22(r2)
   24344:	10bfffcc 	andi	r2,r2,65535
   24348:	10002426 	beq	r2,zero,243dc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   2434c:	e0bffe17 	ldw	r2,-8(fp)
   24350:	10c00104 	addi	r3,r2,4
   24354:	e0fffe15 	stw	r3,-8(fp)
   24358:	e0fff517 	ldw	r3,-44(fp)
   2435c:	18c00417 	ldw	r3,16(r3)
   24360:	19400104 	addi	r5,r3,4
   24364:	e13ff517 	ldw	r4,-44(fp)
   24368:	21400415 	stw	r5,16(r4)
   2436c:	18c00017 	ldw	r3,0(r3)
   24370:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   24374:	e0bff517 	ldw	r2,-44(fp)
   24378:	10c00417 	ldw	r3,16(r2)
   2437c:	e0bff517 	ldw	r2,-44(fp)
   24380:	10800217 	ldw	r2,8(r2)
   24384:	1880041e 	bne	r3,r2,24398 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   24388:	e0bff517 	ldw	r2,-44(fp)
   2438c:	10c00117 	ldw	r3,4(r2)
   24390:	e0bff517 	ldw	r2,-44(fp)
   24394:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   24398:	e0bff517 	ldw	r2,-44(fp)
   2439c:	1080058b 	ldhu	r2,22(r2)
   243a0:	10bfffc4 	addi	r2,r2,-1
   243a4:	1007883a 	mov	r3,r2
   243a8:	e0bff517 	ldw	r2,-44(fp)
   243ac:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   243b0:	e0bffd17 	ldw	r2,-12(fp)
   243b4:	10c00104 	addi	r3,r2,4
   243b8:	e0fffd15 	stw	r3,-12(fp)
   243bc:	e0fff017 	ldw	r3,-64(fp)
   243c0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   243c4:	00800044 	movi	r2,1
   243c8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   243cc:	e0bff18b 	ldhu	r2,-58(fp)
   243d0:	10800044 	addi	r2,r2,1
   243d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   243d8:	00000f06 	br	24418 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   243dc:	e0bff203 	ldbu	r2,-56(fp)
   243e0:	10800114 	ori	r2,r2,4
   243e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   243e8:	00000b06 	br	24418 <OSEventPendMulti+0x388>
   243ec:	e0bff317 	ldw	r2,-52(fp)
   243f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243f4:	e0bff417 	ldw	r2,-48(fp)
   243f8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   243fc:	e0bffd17 	ldw	r2,-12(fp)
   24400:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   24404:	e0800217 	ldw	r2,8(fp)
   24408:	00c00044 	movi	r3,1
   2440c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   24410:	e0bff18b 	ldhu	r2,-58(fp)
   24414:	00009d06 	br	2468c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   24418:	e0bfef17 	ldw	r2,-68(fp)
   2441c:	10800104 	addi	r2,r2,4
   24420:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   24424:	e0bfef17 	ldw	r2,-68(fp)
   24428:	10800017 	ldw	r2,0(r2)
   2442c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   24430:	e0bff017 	ldw	r2,-64(fp)
   24434:	103f7d1e 	bne	r2,zero,2422c <__alt_data_end+0xfffe4e2c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   24438:	e0bff103 	ldbu	r2,-60(fp)
   2443c:	10800058 	cmpnei	r2,r2,1
   24440:	10000a1e 	bne	r2,zero,2446c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   24444:	e0bffd17 	ldw	r2,-12(fp)
   24448:	10000015 	stw	zero,0(r2)
   2444c:	e0bff317 	ldw	r2,-52(fp)
   24450:	e0bff615 	stw	r2,-40(fp)
   24454:	e0bff617 	ldw	r2,-40(fp)
   24458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   2445c:	e0800217 	ldw	r2,8(fp)
   24460:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   24464:	e0bff18b 	ldhu	r2,-58(fp)
   24468:	00008806 	br	2468c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   2446c:	d0a70517 	ldw	r2,-25580(gp)
   24470:	d0e70517 	ldw	r3,-25580(gp)
   24474:	19000c03 	ldbu	r4,48(r3)
   24478:	e0fff203 	ldbu	r3,-56(fp)
   2447c:	20c6b03a 	or	r3,r4,r3
   24480:	1809883a 	mov	r4,r3
   24484:	00ffe004 	movi	r3,-128
   24488:	20c6b03a 	or	r3,r4,r3
   2448c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   24490:	d0a70517 	ldw	r2,-25580(gp)
   24494:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   24498:	d0a70517 	ldw	r2,-25580(gp)
   2449c:	e0ffff0b 	ldhu	r3,-4(fp)
   244a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   244a4:	e13ffc17 	ldw	r4,-16(fp)
   244a8:	0024fcc0 	call	24fcc <OS_EventTaskWaitMulti>
   244ac:	e0bff317 	ldw	r2,-52(fp)
   244b0:	e0bff915 	stw	r2,-28(fp)
   244b4:	e0bff917 	ldw	r2,-28(fp)
   244b8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   244bc:	00257700 	call	25770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244c0:	0005303a 	rdctl	r2,status
   244c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244c8:	e0fff717 	ldw	r3,-36(fp)
   244cc:	00bfff84 	movi	r2,-2
   244d0:	1884703a 	and	r2,r3,r2
   244d4:	1001703a 	wrctl	status,r2
  
  return context;
   244d8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   244dc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   244e0:	d0a70517 	ldw	r2,-25580(gp)
   244e4:	10800c43 	ldbu	r2,49(r2)
   244e8:	10803fcc 	andi	r2,r2,255
   244ec:	10000226 	beq	r2,zero,244f8 <OSEventPendMulti+0x468>
   244f0:	108000a0 	cmpeqi	r2,r2,2
   244f4:	10001826 	beq	r2,zero,24558 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   244f8:	d0a70517 	ldw	r2,-25580(gp)
   244fc:	10800717 	ldw	r2,28(r2)
   24500:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   24504:	e0bff017 	ldw	r2,-64(fp)
   24508:	10000b26 	beq	r2,zero,24538 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   2450c:	e0bffd17 	ldw	r2,-12(fp)
   24510:	10c00104 	addi	r3,r2,4
   24514:	e0fffd15 	stw	r3,-12(fp)
   24518:	e0fff017 	ldw	r3,-64(fp)
   2451c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   24520:	e0bffd17 	ldw	r2,-12(fp)
   24524:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   24528:	e0bff18b 	ldhu	r2,-58(fp)
   2452c:	10800044 	addi	r2,r2,1
   24530:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   24534:	00000d06 	br	2456c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   24538:	d0a70517 	ldw	r2,-25580(gp)
   2453c:	00c00044 	movi	r3,1
   24540:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   24544:	d0a70517 	ldw	r2,-25580(gp)
   24548:	e17ffc17 	ldw	r5,-16(fp)
   2454c:	1009883a 	mov	r4,r2
   24550:	00251d40 	call	251d4 <OS_EventTaskRemoveMulti>
             }
			 break;
   24554:	00000506 	br	2456c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   24558:	d0a70517 	ldw	r2,-25580(gp)
   2455c:	e17ffc17 	ldw	r5,-16(fp)
   24560:	1009883a 	mov	r4,r2
   24564:	00251d40 	call	251d4 <OS_EventTaskRemoveMulti>
             break;
   24568:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   2456c:	d0a70517 	ldw	r2,-25580(gp)
   24570:	10800c43 	ldbu	r2,49(r2)
   24574:	10803fcc 	andi	r2,r2,255
   24578:	10000326 	beq	r2,zero,24588 <OSEventPendMulti+0x4f8>
   2457c:	108000a0 	cmpeqi	r2,r2,2
   24580:	1000231e 	bne	r2,zero,24610 <OSEventPendMulti+0x580>
   24584:	00002a06 	br	24630 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   24588:	e0bff017 	ldw	r2,-64(fp)
   2458c:	10800003 	ldbu	r2,0(r2)
   24590:	10803fcc 	andi	r2,r2,255
   24594:	0080100e 	bge	zero,r2,245d8 <OSEventPendMulti+0x548>
   24598:	10c000d0 	cmplti	r3,r2,3
   2459c:	1800071e 	bne	r3,zero,245bc <OSEventPendMulti+0x52c>
   245a0:	108000e0 	cmpeqi	r2,r2,3
   245a4:	10000c26 	beq	r2,zero,245d8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   245a8:	e0bffe17 	ldw	r2,-8(fp)
   245ac:	10c00104 	addi	r3,r2,4
   245b0:	e0fffe15 	stw	r3,-8(fp)
   245b4:	10000015 	stw	zero,0(r2)
                      break;
   245b8:	00001206 	br	24604 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   245bc:	e0bffe17 	ldw	r2,-8(fp)
   245c0:	10c00104 	addi	r3,r2,4
   245c4:	e0fffe15 	stw	r3,-8(fp)
   245c8:	d0e70517 	ldw	r3,-25580(gp)
   245cc:	18c00917 	ldw	r3,36(r3)
   245d0:	10c00015 	stw	r3,0(r2)
                      break;
   245d4:	00000b06 	br	24604 <OSEventPendMulti+0x574>
   245d8:	e0bff317 	ldw	r2,-52(fp)
   245dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   245e0:	e0bff817 	ldw	r2,-32(fp)
   245e4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   245e8:	e0bffd17 	ldw	r2,-12(fp)
   245ec:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   245f0:	e0800217 	ldw	r2,8(fp)
   245f4:	00c00044 	movi	r3,1
   245f8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   245fc:	e0bff18b 	ldhu	r2,-58(fp)
   24600:	00002206 	br	2468c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   24604:	e0800217 	ldw	r2,8(fp)
   24608:	10000005 	stb	zero,0(r2)
             break;
   2460c:	00001006 	br	24650 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   24610:	e0bffe17 	ldw	r2,-8(fp)
   24614:	10c00104 	addi	r3,r2,4
   24618:	e0fffe15 	stw	r3,-8(fp)
   2461c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   24620:	e0800217 	ldw	r2,8(fp)
   24624:	00c00384 	movi	r3,14
   24628:	10c00005 	stb	r3,0(r2)
             break;
   2462c:	00000806 	br	24650 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   24630:	e0bffe17 	ldw	r2,-8(fp)
   24634:	10c00104 	addi	r3,r2,4
   24638:	e0fffe15 	stw	r3,-8(fp)
   2463c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   24640:	e0800217 	ldw	r2,8(fp)
   24644:	00c00284 	movi	r3,10
   24648:	10c00005 	stb	r3,0(r2)
             break;
   2464c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   24650:	d0a70517 	ldw	r2,-25580(gp)
   24654:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   24658:	d0a70517 	ldw	r2,-25580(gp)
   2465c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   24660:	d0a70517 	ldw	r2,-25580(gp)
   24664:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   24668:	d0a70517 	ldw	r2,-25580(gp)
   2466c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   24670:	d0a70517 	ldw	r2,-25580(gp)
   24674:	10000915 	stw	zero,36(r2)
   24678:	e0bff317 	ldw	r2,-52(fp)
   2467c:	e0bffa15 	stw	r2,-24(fp)
   24680:	e0bffa17 	ldw	r2,-24(fp)
   24684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   24688:	e0bff18b 	ldhu	r2,-58(fp)
}
   2468c:	e037883a 	mov	sp,fp
   24690:	dfc00117 	ldw	ra,4(sp)
   24694:	df000017 	ldw	fp,0(sp)
   24698:	dec00204 	addi	sp,sp,8
   2469c:	f800283a 	ret

000246a0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   246a0:	defffe04 	addi	sp,sp,-8
   246a4:	dfc00115 	stw	ra,4(sp)
   246a8:	df000015 	stw	fp,0(sp)
   246ac:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   246b0:	002d3400 	call	2d340 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   246b4:	002541c0 	call	2541c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   246b8:	00254640 	call	25464 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   246bc:	00255d00 	call	255d0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   246c0:	002533c0 	call	2533c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   246c4:	00274700 	call	27470 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   246c8:	0027d700 	call	27d70 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   246cc:	0028ea40 	call	28ea4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   246d0:	00254d00 	call	254d0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   246d4:	00255500 	call	25550 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   246d8:	002d3600 	call	2d360 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   246dc:	0025e440 	call	25e44 <OSDebugInit>
#endif
}
   246e0:	0001883a 	nop
   246e4:	e037883a 	mov	sp,fp
   246e8:	dfc00117 	ldw	ra,4(sp)
   246ec:	df000017 	ldw	fp,0(sp)
   246f0:	dec00204 	addi	sp,sp,8
   246f4:	f800283a 	ret

000246f8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   246f8:	deffff04 	addi	sp,sp,-4
   246fc:	df000015 	stw	fp,0(sp)
   24700:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   24704:	d0a6f643 	ldbu	r2,-25639(gp)
   24708:	10803fcc 	andi	r2,r2,255
   2470c:	10800058 	cmpnei	r2,r2,1
   24710:	1000071e 	bne	r2,zero,24730 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   24714:	d0a70403 	ldbu	r2,-25584(gp)
   24718:	10803fcc 	andi	r2,r2,255
   2471c:	10803fe0 	cmpeqi	r2,r2,255
   24720:	1000031e 	bne	r2,zero,24730 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   24724:	d0a70403 	ldbu	r2,-25584(gp)
   24728:	10800044 	addi	r2,r2,1
   2472c:	d0a70405 	stb	r2,-25584(gp)
        }
    }
}
   24730:	0001883a 	nop
   24734:	e037883a 	mov	sp,fp
   24738:	df000017 	ldw	fp,0(sp)
   2473c:	dec00104 	addi	sp,sp,4
   24740:	f800283a 	ret

00024744 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   24744:	defffb04 	addi	sp,sp,-20
   24748:	dfc00415 	stw	ra,16(sp)
   2474c:	df000315 	stw	fp,12(sp)
   24750:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   24754:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   24758:	d0a6f643 	ldbu	r2,-25639(gp)
   2475c:	10803fcc 	andi	r2,r2,255
   24760:	10800058 	cmpnei	r2,r2,1
   24764:	10002f1e 	bne	r2,zero,24824 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24768:	0005303a 	rdctl	r2,status
   2476c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24770:	e0ffff17 	ldw	r3,-4(fp)
   24774:	00bfff84 	movi	r2,-2
   24778:	1884703a 	and	r2,r3,r2
   2477c:	1001703a 	wrctl	status,r2
  
  return context;
   24780:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   24784:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   24788:	d0a70403 	ldbu	r2,-25584(gp)
   2478c:	10803fcc 	andi	r2,r2,255
   24790:	10000326 	beq	r2,zero,247a0 <OSIntExit+0x5c>
            OSIntNesting--;
   24794:	d0a70403 	ldbu	r2,-25584(gp)
   24798:	10bfffc4 	addi	r2,r2,-1
   2479c:	d0a70405 	stb	r2,-25584(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   247a0:	d0a70403 	ldbu	r2,-25584(gp)
   247a4:	10803fcc 	andi	r2,r2,255
   247a8:	10001a1e 	bne	r2,zero,24814 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   247ac:	d0a6f603 	ldbu	r2,-25640(gp)
   247b0:	10803fcc 	andi	r2,r2,255
   247b4:	1000171e 	bne	r2,zero,24814 <OSIntExit+0xd0>
                OS_SchedNew();
   247b8:	00258400 	call	25840 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   247bc:	d0e6f803 	ldbu	r3,-25632(gp)
   247c0:	d0a6f843 	ldbu	r2,-25631(gp)
   247c4:	18c03fcc 	andi	r3,r3,255
   247c8:	10803fcc 	andi	r2,r2,255
   247cc:	18801126 	beq	r3,r2,24814 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   247d0:	d0a6f803 	ldbu	r2,-25632(gp)
   247d4:	10c03fcc 	andi	r3,r2,255
   247d8:	00800134 	movhi	r2,4
   247dc:	10a11c04 	addi	r2,r2,-31632
   247e0:	18c7883a 	add	r3,r3,r3
   247e4:	18c7883a 	add	r3,r3,r3
   247e8:	10c5883a 	add	r2,r2,r3
   247ec:	10800017 	ldw	r2,0(r2)
   247f0:	d0a70015 	stw	r2,-25600(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   247f4:	d0a70017 	ldw	r2,-25600(gp)
   247f8:	10c00e17 	ldw	r3,56(r2)
   247fc:	18c00044 	addi	r3,r3,1
   24800:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   24804:	d0a6fb17 	ldw	r2,-25620(gp)
   24808:	10800044 	addi	r2,r2,1
   2480c:	d0a6fb15 	stw	r2,-25620(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   24810:	002d06c0 	call	2d06c <OSCtxSw>
   24814:	e0bffd17 	ldw	r2,-12(fp)
   24818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2481c:	e0bffe17 	ldw	r2,-8(fp)
   24820:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   24824:	0001883a 	nop
   24828:	e037883a 	mov	sp,fp
   2482c:	dfc00117 	ldw	ra,4(sp)
   24830:	df000017 	ldw	fp,0(sp)
   24834:	dec00204 	addi	sp,sp,8
   24838:	f800283a 	ret

0002483c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   2483c:	defffc04 	addi	sp,sp,-16
   24840:	df000315 	stw	fp,12(sp)
   24844:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   24848:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   2484c:	d0a6f643 	ldbu	r2,-25639(gp)
   24850:	10803fcc 	andi	r2,r2,255
   24854:	10800058 	cmpnei	r2,r2,1
   24858:	1000161e 	bne	r2,zero,248b4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2485c:	0005303a 	rdctl	r2,status
   24860:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24864:	e0ffff17 	ldw	r3,-4(fp)
   24868:	00bfff84 	movi	r2,-2
   2486c:	1884703a 	and	r2,r3,r2
   24870:	1001703a 	wrctl	status,r2
  
  return context;
   24874:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   24878:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   2487c:	d0a70403 	ldbu	r2,-25584(gp)
   24880:	10803fcc 	andi	r2,r2,255
   24884:	1000071e 	bne	r2,zero,248a4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   24888:	d0a6f603 	ldbu	r2,-25640(gp)
   2488c:	10803fcc 	andi	r2,r2,255
   24890:	10803fe0 	cmpeqi	r2,r2,255
   24894:	1000031e 	bne	r2,zero,248a4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   24898:	d0a6f603 	ldbu	r2,-25640(gp)
   2489c:	10800044 	addi	r2,r2,1
   248a0:	d0a6f605 	stb	r2,-25640(gp)
   248a4:	e0bffd17 	ldw	r2,-12(fp)
   248a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   248ac:	e0bffe17 	ldw	r2,-8(fp)
   248b0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   248b4:	0001883a 	nop
   248b8:	e037883a 	mov	sp,fp
   248bc:	df000017 	ldw	fp,0(sp)
   248c0:	dec00104 	addi	sp,sp,4
   248c4:	f800283a 	ret

000248c8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   248c8:	defff804 	addi	sp,sp,-32
   248cc:	dfc00715 	stw	ra,28(sp)
   248d0:	df000615 	stw	fp,24(sp)
   248d4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   248d8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   248dc:	d0a6f643 	ldbu	r2,-25639(gp)
   248e0:	10803fcc 	andi	r2,r2,255
   248e4:	10800058 	cmpnei	r2,r2,1
   248e8:	1000281e 	bne	r2,zero,2498c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   248ec:	0005303a 	rdctl	r2,status
   248f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   248f4:	e0ffff17 	ldw	r3,-4(fp)
   248f8:	00bfff84 	movi	r2,-2
   248fc:	1884703a 	and	r2,r3,r2
   24900:	1001703a 	wrctl	status,r2
  
  return context;
   24904:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   24908:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   2490c:	d0a6f603 	ldbu	r2,-25640(gp)
   24910:	10803fcc 	andi	r2,r2,255
   24914:	10001926 	beq	r2,zero,2497c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   24918:	d0a6f603 	ldbu	r2,-25640(gp)
   2491c:	10bfffc4 	addi	r2,r2,-1
   24920:	d0a6f605 	stb	r2,-25640(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   24924:	d0a6f603 	ldbu	r2,-25640(gp)
   24928:	10803fcc 	andi	r2,r2,255
   2492c:	10000e1e 	bne	r2,zero,24968 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   24930:	d0a70403 	ldbu	r2,-25584(gp)
   24934:	10803fcc 	andi	r2,r2,255
   24938:	1000061e 	bne	r2,zero,24954 <OSSchedUnlock+0x8c>
   2493c:	e0bffa17 	ldw	r2,-24(fp)
   24940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24944:	e0bffb17 	ldw	r2,-20(fp)
   24948:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   2494c:	00257700 	call	25770 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   24950:	00000e06 	br	2498c <OSSchedUnlock+0xc4>
   24954:	e0bffa17 	ldw	r2,-24(fp)
   24958:	e0bffc15 	stw	r2,-16(fp)
   2495c:	e0bffc17 	ldw	r2,-16(fp)
   24960:	1001703a 	wrctl	status,r2
   24964:	00000906 	br	2498c <OSSchedUnlock+0xc4>
   24968:	e0bffa17 	ldw	r2,-24(fp)
   2496c:	e0bffd15 	stw	r2,-12(fp)
   24970:	e0bffd17 	ldw	r2,-12(fp)
   24974:	1001703a 	wrctl	status,r2
   24978:	00000406 	br	2498c <OSSchedUnlock+0xc4>
   2497c:	e0bffa17 	ldw	r2,-24(fp)
   24980:	e0bffe15 	stw	r2,-8(fp)
   24984:	e0bffe17 	ldw	r2,-8(fp)
   24988:	1001703a 	wrctl	status,r2
   2498c:	0001883a 	nop
   24990:	e037883a 	mov	sp,fp
   24994:	dfc00117 	ldw	ra,4(sp)
   24998:	df000017 	ldw	fp,0(sp)
   2499c:	dec00204 	addi	sp,sp,8
   249a0:	f800283a 	ret

000249a4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   249a4:	defffe04 	addi	sp,sp,-8
   249a8:	dfc00115 	stw	ra,4(sp)
   249ac:	df000015 	stw	fp,0(sp)
   249b0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   249b4:	d0a6f643 	ldbu	r2,-25639(gp)
   249b8:	10803fcc 	andi	r2,r2,255
   249bc:	10000f1e 	bne	r2,zero,249fc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   249c0:	00258400 	call	25840 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   249c4:	d0a6f803 	ldbu	r2,-25632(gp)
   249c8:	d0a6f845 	stb	r2,-25631(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   249cc:	d0a6f803 	ldbu	r2,-25632(gp)
   249d0:	10c03fcc 	andi	r3,r2,255
   249d4:	00800134 	movhi	r2,4
   249d8:	10a11c04 	addi	r2,r2,-31632
   249dc:	18c7883a 	add	r3,r3,r3
   249e0:	18c7883a 	add	r3,r3,r3
   249e4:	10c5883a 	add	r2,r2,r3
   249e8:	10800017 	ldw	r2,0(r2)
   249ec:	d0a70015 	stw	r2,-25600(gp)
        OSTCBCur      = OSTCBHighRdy;
   249f0:	d0a70017 	ldw	r2,-25600(gp)
   249f4:	d0a70515 	stw	r2,-25580(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   249f8:	002d0f80 	call	2d0f8 <OSStartHighRdy>
    }
}
   249fc:	0001883a 	nop
   24a00:	e037883a 	mov	sp,fp
   24a04:	dfc00117 	ldw	ra,4(sp)
   24a08:	df000017 	ldw	fp,0(sp)
   24a0c:	dec00204 	addi	sp,sp,8
   24a10:	f800283a 	ret

00024a14 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   24a14:	defff904 	addi	sp,sp,-28
   24a18:	dfc00615 	stw	ra,24(sp)
   24a1c:	df000515 	stw	fp,20(sp)
   24a20:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   24a24:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   24a28:	01000084 	movi	r4,2
   24a2c:	002b1180 	call	2b118 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a30:	0005303a 	rdctl	r2,status
   24a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a38:	e0fffc17 	ldw	r3,-16(fp)
   24a3c:	00bfff84 	movi	r2,-2
   24a40:	1884703a 	and	r2,r3,r2
   24a44:	1001703a 	wrctl	status,r2
  
  return context;
   24a48:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   24a4c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   24a50:	d026f715 	stw	zero,-25636(gp)
   24a54:	e0bffb17 	ldw	r2,-20(fp)
   24a58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a5c:	e0bffd17 	ldw	r2,-12(fp)
   24a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   24a64:	01001904 	movi	r4,100
   24a68:	002b1180 	call	2b118 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a6c:	0005303a 	rdctl	r2,status
   24a70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a74:	e0fffe17 	ldw	r3,-8(fp)
   24a78:	00bfff84 	movi	r2,-2
   24a7c:	1884703a 	and	r2,r3,r2
   24a80:	1001703a 	wrctl	status,r2
  
  return context;
   24a84:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   24a88:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   24a8c:	d0a6f717 	ldw	r2,-25636(gp)
   24a90:	d0a6fc15 	stw	r2,-25616(gp)
    OSStatRdy    = OS_TRUE;
   24a94:	00800044 	movi	r2,1
   24a98:	d0a70805 	stb	r2,-25568(gp)
   24a9c:	e0bffb17 	ldw	r2,-20(fp)
   24aa0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24aa4:	e0bfff17 	ldw	r2,-4(fp)
   24aa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   24aac:	0001883a 	nop
   24ab0:	e037883a 	mov	sp,fp
   24ab4:	dfc00117 	ldw	ra,4(sp)
   24ab8:	df000017 	ldw	fp,0(sp)
   24abc:	dec00204 	addi	sp,sp,8
   24ac0:	f800283a 	ret

00024ac4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   24ac4:	defff704 	addi	sp,sp,-36
   24ac8:	dfc00815 	stw	ra,32(sp)
   24acc:	df000715 	stw	fp,28(sp)
   24ad0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   24ad4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   24ad8:	002d3200 	call	2d320 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24adc:	0005303a 	rdctl	r2,status
   24ae0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24ae4:	e0fffd17 	ldw	r3,-12(fp)
   24ae8:	00bfff84 	movi	r2,-2
   24aec:	1884703a 	and	r2,r3,r2
   24af0:	1001703a 	wrctl	status,r2
  
  return context;
   24af4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   24af8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   24afc:	d0a70617 	ldw	r2,-25576(gp)
   24b00:	10800044 	addi	r2,r2,1
   24b04:	d0a70615 	stw	r2,-25576(gp)
   24b08:	e0bffb17 	ldw	r2,-20(fp)
   24b0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24b10:	e0bfff17 	ldw	r2,-4(fp)
   24b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   24b18:	d0a6f643 	ldbu	r2,-25639(gp)
   24b1c:	10803fcc 	andi	r2,r2,255
   24b20:	10800058 	cmpnei	r2,r2,1
   24b24:	10006a1e 	bne	r2,zero,24cd0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   24b28:	d0a6fa03 	ldbu	r2,-25624(gp)
   24b2c:	10803fcc 	andi	r2,r2,255
   24b30:	10c00060 	cmpeqi	r3,r2,1
   24b34:	1800061e 	bne	r3,zero,24b50 <OSTimeTick+0x8c>
   24b38:	10c000a0 	cmpeqi	r3,r2,2
   24b3c:	1800061e 	bne	r3,zero,24b58 <OSTimeTick+0x94>
   24b40:	10000a1e 	bne	r2,zero,24b6c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   24b44:	00800044 	movi	r2,1
   24b48:	e0bffa05 	stb	r2,-24(fp)
                 break;
   24b4c:	00000b06 	br	24b7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   24b50:	e03ffa05 	stb	zero,-24(fp)
                 break;
   24b54:	00000906 	br	24b7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   24b58:	00800044 	movi	r2,1
   24b5c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   24b60:	00800044 	movi	r2,1
   24b64:	d0a6fa05 	stb	r2,-25624(gp)
                 break;
   24b68:	00000406 	br	24b7c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   24b6c:	00800044 	movi	r2,1
   24b70:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   24b74:	d026fa05 	stb	zero,-25624(gp)
                 break;
   24b78:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   24b7c:	e0bffa03 	ldbu	r2,-24(fp)
   24b80:	10005226 	beq	r2,zero,24ccc <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   24b84:	d0a6f917 	ldw	r2,-25628(gp)
   24b88:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   24b8c:	00004906 	br	24cb4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24b90:	0005303a 	rdctl	r2,status
   24b94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24b98:	e0fffc17 	ldw	r3,-16(fp)
   24b9c:	00bfff84 	movi	r2,-2
   24ba0:	1884703a 	and	r2,r3,r2
   24ba4:	1001703a 	wrctl	status,r2
  
  return context;
   24ba8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   24bac:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   24bb0:	e0bff917 	ldw	r2,-28(fp)
   24bb4:	10800b8b 	ldhu	r2,46(r2)
   24bb8:	10bfffcc 	andi	r2,r2,65535
   24bbc:	10003626 	beq	r2,zero,24c98 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   24bc0:	e0bff917 	ldw	r2,-28(fp)
   24bc4:	10800b8b 	ldhu	r2,46(r2)
   24bc8:	10bfffc4 	addi	r2,r2,-1
   24bcc:	1007883a 	mov	r3,r2
   24bd0:	e0bff917 	ldw	r2,-28(fp)
   24bd4:	10c00b8d 	sth	r3,46(r2)
   24bd8:	e0bff917 	ldw	r2,-28(fp)
   24bdc:	10800b8b 	ldhu	r2,46(r2)
   24be0:	10bfffcc 	andi	r2,r2,65535
   24be4:	10002c1e 	bne	r2,zero,24c98 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   24be8:	e0bff917 	ldw	r2,-28(fp)
   24bec:	10800c03 	ldbu	r2,48(r2)
   24bf0:	10803fcc 	andi	r2,r2,255
   24bf4:	10800dcc 	andi	r2,r2,55
   24bf8:	10000b26 	beq	r2,zero,24c28 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   24bfc:	e0bff917 	ldw	r2,-28(fp)
   24c00:	10c00c03 	ldbu	r3,48(r2)
   24c04:	00bff204 	movi	r2,-56
   24c08:	1884703a 	and	r2,r3,r2
   24c0c:	1007883a 	mov	r3,r2
   24c10:	e0bff917 	ldw	r2,-28(fp)
   24c14:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   24c18:	e0bff917 	ldw	r2,-28(fp)
   24c1c:	00c00044 	movi	r3,1
   24c20:	10c00c45 	stb	r3,49(r2)
   24c24:	00000206 	br	24c30 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   24c28:	e0bff917 	ldw	r2,-28(fp)
   24c2c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   24c30:	e0bff917 	ldw	r2,-28(fp)
   24c34:	10800c03 	ldbu	r2,48(r2)
   24c38:	10803fcc 	andi	r2,r2,255
   24c3c:	1080020c 	andi	r2,r2,8
   24c40:	1000151e 	bne	r2,zero,24c98 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   24c44:	e0bff917 	ldw	r2,-28(fp)
   24c48:	10c00d83 	ldbu	r3,54(r2)
   24c4c:	d0a70203 	ldbu	r2,-25592(gp)
   24c50:	1884b03a 	or	r2,r3,r2
   24c54:	d0a70205 	stb	r2,-25592(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   24c58:	e0bff917 	ldw	r2,-28(fp)
   24c5c:	10800d03 	ldbu	r2,52(r2)
   24c60:	10c03fcc 	andi	r3,r2,255
   24c64:	e0bff917 	ldw	r2,-28(fp)
   24c68:	10800d03 	ldbu	r2,52(r2)
   24c6c:	11003fcc 	andi	r4,r2,255
   24c70:	d0a70244 	addi	r2,gp,-25591
   24c74:	2085883a 	add	r2,r4,r2
   24c78:	11000003 	ldbu	r4,0(r2)
   24c7c:	e0bff917 	ldw	r2,-28(fp)
   24c80:	10800d43 	ldbu	r2,53(r2)
   24c84:	2084b03a 	or	r2,r4,r2
   24c88:	1009883a 	mov	r4,r2
   24c8c:	d0a70244 	addi	r2,gp,-25591
   24c90:	1885883a 	add	r2,r3,r2
   24c94:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   24c98:	e0bff917 	ldw	r2,-28(fp)
   24c9c:	10800517 	ldw	r2,20(r2)
   24ca0:	e0bff915 	stw	r2,-28(fp)
   24ca4:	e0bffb17 	ldw	r2,-20(fp)
   24ca8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cac:	e0bffe17 	ldw	r2,-8(fp)
   24cb0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   24cb4:	e0bff917 	ldw	r2,-28(fp)
   24cb8:	10800c83 	ldbu	r2,50(r2)
   24cbc:	10803fcc 	andi	r2,r2,255
   24cc0:	10800518 	cmpnei	r2,r2,20
   24cc4:	103fb21e 	bne	r2,zero,24b90 <__alt_data_end+0xfffe5790>
   24cc8:	00000106 	br	24cd0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   24ccc:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   24cd0:	e037883a 	mov	sp,fp
   24cd4:	dfc00117 	ldw	ra,4(sp)
   24cd8:	df000017 	ldw	fp,0(sp)
   24cdc:	dec00204 	addi	sp,sp,8
   24ce0:	f800283a 	ret

00024ce4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   24ce4:	deffff04 	addi	sp,sp,-4
   24ce8:	df000015 	stw	fp,0(sp)
   24cec:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   24cf0:	00804784 	movi	r2,286
}
   24cf4:	e037883a 	mov	sp,fp
   24cf8:	df000017 	ldw	fp,0(sp)
   24cfc:	dec00104 	addi	sp,sp,4
   24d00:	f800283a 	ret

00024d04 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   24d04:	deffff04 	addi	sp,sp,-4
   24d08:	df000015 	stw	fp,0(sp)
   24d0c:	d839883a 	mov	fp,sp
}
   24d10:	0001883a 	nop
   24d14:	e037883a 	mov	sp,fp
   24d18:	df000017 	ldw	fp,0(sp)
   24d1c:	dec00104 	addi	sp,sp,4
   24d20:	f800283a 	ret

00024d24 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   24d24:	defff804 	addi	sp,sp,-32
   24d28:	dfc00715 	stw	ra,28(sp)
   24d2c:	df000615 	stw	fp,24(sp)
   24d30:	df000604 	addi	fp,sp,24
   24d34:	e13ffc15 	stw	r4,-16(fp)
   24d38:	e17ffd15 	stw	r5,-12(fp)
   24d3c:	3007883a 	mov	r3,r6
   24d40:	3805883a 	mov	r2,r7
   24d44:	e0fffe05 	stb	r3,-8(fp)
   24d48:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   24d4c:	e0bffc17 	ldw	r2,-16(fp)
   24d50:	10800283 	ldbu	r2,10(r2)
   24d54:	10c03fcc 	andi	r3,r2,255
   24d58:	008000f4 	movhi	r2,3
   24d5c:	10b6b304 	addi	r2,r2,-9524
   24d60:	10c5883a 	add	r2,r2,r3
   24d64:	10800003 	ldbu	r2,0(r2)
   24d68:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   24d6c:	e0bffa03 	ldbu	r2,-24(fp)
   24d70:	e0fffc17 	ldw	r3,-16(fp)
   24d74:	1885883a 	add	r2,r3,r2
   24d78:	108002c4 	addi	r2,r2,11
   24d7c:	10800003 	ldbu	r2,0(r2)
   24d80:	10c03fcc 	andi	r3,r2,255
   24d84:	008000f4 	movhi	r2,3
   24d88:	10b6b304 	addi	r2,r2,-9524
   24d8c:	10c5883a 	add	r2,r2,r3
   24d90:	10800003 	ldbu	r2,0(r2)
   24d94:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   24d98:	e0bffa03 	ldbu	r2,-24(fp)
   24d9c:	100490fa 	slli	r2,r2,3
   24da0:	1007883a 	mov	r3,r2
   24da4:	e0bffa43 	ldbu	r2,-23(fp)
   24da8:	1885883a 	add	r2,r3,r2
   24dac:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   24db0:	e0fffa83 	ldbu	r3,-22(fp)
   24db4:	00800134 	movhi	r2,4
   24db8:	10a11c04 	addi	r2,r2,-31632
   24dbc:	18c7883a 	add	r3,r3,r3
   24dc0:	18c7883a 	add	r3,r3,r3
   24dc4:	10c5883a 	add	r2,r2,r3
   24dc8:	10800017 	ldw	r2,0(r2)
   24dcc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   24dd0:	e0bffb17 	ldw	r2,-20(fp)
   24dd4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   24dd8:	e0bffb17 	ldw	r2,-20(fp)
   24ddc:	e0fffd17 	ldw	r3,-12(fp)
   24de0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   24de4:	e0bffb17 	ldw	r2,-20(fp)
   24de8:	10800c03 	ldbu	r2,48(r2)
   24dec:	1007883a 	mov	r3,r2
   24df0:	e0bffe03 	ldbu	r2,-8(fp)
   24df4:	0084303a 	nor	r2,zero,r2
   24df8:	1884703a 	and	r2,r3,r2
   24dfc:	1007883a 	mov	r3,r2
   24e00:	e0bffb17 	ldw	r2,-20(fp)
   24e04:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   24e08:	e0bffb17 	ldw	r2,-20(fp)
   24e0c:	e0ffff03 	ldbu	r3,-4(fp)
   24e10:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   24e14:	e0bffb17 	ldw	r2,-20(fp)
   24e18:	10800c03 	ldbu	r2,48(r2)
   24e1c:	10803fcc 	andi	r2,r2,255
   24e20:	1080020c 	andi	r2,r2,8
   24e24:	1000111e 	bne	r2,zero,24e6c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   24e28:	e0bffb17 	ldw	r2,-20(fp)
   24e2c:	10c00d83 	ldbu	r3,54(r2)
   24e30:	d0a70203 	ldbu	r2,-25592(gp)
   24e34:	1884b03a 	or	r2,r3,r2
   24e38:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   24e3c:	e0fffa03 	ldbu	r3,-24(fp)
   24e40:	e13ffa03 	ldbu	r4,-24(fp)
   24e44:	d0a70244 	addi	r2,gp,-25591
   24e48:	2085883a 	add	r2,r4,r2
   24e4c:	11000003 	ldbu	r4,0(r2)
   24e50:	e0bffb17 	ldw	r2,-20(fp)
   24e54:	10800d43 	ldbu	r2,53(r2)
   24e58:	2084b03a 	or	r2,r4,r2
   24e5c:	1009883a 	mov	r4,r2
   24e60:	d0a70244 	addi	r2,gp,-25591
   24e64:	1885883a 	add	r2,r3,r2
   24e68:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   24e6c:	e17ffc17 	ldw	r5,-16(fp)
   24e70:	e13ffb17 	ldw	r4,-20(fp)
   24e74:	002511c0 	call	2511c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   24e78:	e0bffb17 	ldw	r2,-20(fp)
   24e7c:	10800817 	ldw	r2,32(r2)
   24e80:	10000826 	beq	r2,zero,24ea4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   24e84:	e0bffb17 	ldw	r2,-20(fp)
   24e88:	10800817 	ldw	r2,32(r2)
   24e8c:	100b883a 	mov	r5,r2
   24e90:	e13ffb17 	ldw	r4,-20(fp)
   24e94:	00251d40 	call	251d4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   24e98:	e0bffb17 	ldw	r2,-20(fp)
   24e9c:	e0fffc17 	ldw	r3,-16(fp)
   24ea0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   24ea4:	e0bffa83 	ldbu	r2,-22(fp)
}
   24ea8:	e037883a 	mov	sp,fp
   24eac:	dfc00117 	ldw	ra,4(sp)
   24eb0:	df000017 	ldw	fp,0(sp)
   24eb4:	dec00204 	addi	sp,sp,8
   24eb8:	f800283a 	ret

00024ebc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   24ebc:	defffd04 	addi	sp,sp,-12
   24ec0:	df000215 	stw	fp,8(sp)
   24ec4:	df000204 	addi	fp,sp,8
   24ec8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   24ecc:	d0a70517 	ldw	r2,-25580(gp)
   24ed0:	e0ffff17 	ldw	r3,-4(fp)
   24ed4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   24ed8:	d0a70517 	ldw	r2,-25580(gp)
   24edc:	10800d03 	ldbu	r2,52(r2)
   24ee0:	10803fcc 	andi	r2,r2,255
   24ee4:	d0e70517 	ldw	r3,-25580(gp)
   24ee8:	18c00d03 	ldbu	r3,52(r3)
   24eec:	18c03fcc 	andi	r3,r3,255
   24ef0:	e13fff17 	ldw	r4,-4(fp)
   24ef4:	20c7883a 	add	r3,r4,r3
   24ef8:	18c002c4 	addi	r3,r3,11
   24efc:	19000003 	ldbu	r4,0(r3)
   24f00:	d0e70517 	ldw	r3,-25580(gp)
   24f04:	18c00d43 	ldbu	r3,53(r3)
   24f08:	20c6b03a 	or	r3,r4,r3
   24f0c:	1809883a 	mov	r4,r3
   24f10:	e0ffff17 	ldw	r3,-4(fp)
   24f14:	1885883a 	add	r2,r3,r2
   24f18:	108002c4 	addi	r2,r2,11
   24f1c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   24f20:	e0bfff17 	ldw	r2,-4(fp)
   24f24:	10c00283 	ldbu	r3,10(r2)
   24f28:	d0a70517 	ldw	r2,-25580(gp)
   24f2c:	10800d83 	ldbu	r2,54(r2)
   24f30:	1884b03a 	or	r2,r3,r2
   24f34:	1007883a 	mov	r3,r2
   24f38:	e0bfff17 	ldw	r2,-4(fp)
   24f3c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   24f40:	d0a70517 	ldw	r2,-25580(gp)
   24f44:	10800d03 	ldbu	r2,52(r2)
   24f48:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   24f4c:	e0fffe03 	ldbu	r3,-8(fp)
   24f50:	e13ffe03 	ldbu	r4,-8(fp)
   24f54:	d0a70244 	addi	r2,gp,-25591
   24f58:	2085883a 	add	r2,r4,r2
   24f5c:	10800003 	ldbu	r2,0(r2)
   24f60:	1009883a 	mov	r4,r2
   24f64:	d0a70517 	ldw	r2,-25580(gp)
   24f68:	10800d43 	ldbu	r2,53(r2)
   24f6c:	0084303a 	nor	r2,zero,r2
   24f70:	2084703a 	and	r2,r4,r2
   24f74:	1009883a 	mov	r4,r2
   24f78:	d0a70244 	addi	r2,gp,-25591
   24f7c:	1885883a 	add	r2,r3,r2
   24f80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   24f84:	e0fffe03 	ldbu	r3,-8(fp)
   24f88:	d0a70244 	addi	r2,gp,-25591
   24f8c:	1885883a 	add	r2,r3,r2
   24f90:	10800003 	ldbu	r2,0(r2)
   24f94:	10803fcc 	andi	r2,r2,255
   24f98:	1000071e 	bne	r2,zero,24fb8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   24f9c:	d0a70517 	ldw	r2,-25580(gp)
   24fa0:	10800d83 	ldbu	r2,54(r2)
   24fa4:	0084303a 	nor	r2,zero,r2
   24fa8:	1007883a 	mov	r3,r2
   24fac:	d0a70203 	ldbu	r2,-25592(gp)
   24fb0:	1884703a 	and	r2,r3,r2
   24fb4:	d0a70205 	stb	r2,-25592(gp)
    }
}
   24fb8:	0001883a 	nop
   24fbc:	e037883a 	mov	sp,fp
   24fc0:	df000017 	ldw	fp,0(sp)
   24fc4:	dec00104 	addi	sp,sp,4
   24fc8:	f800283a 	ret

00024fcc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   24fcc:	defffb04 	addi	sp,sp,-20
   24fd0:	df000415 	stw	fp,16(sp)
   24fd4:	df000404 	addi	fp,sp,16
   24fd8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   24fdc:	d0a70517 	ldw	r2,-25580(gp)
   24fe0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   24fe4:	d0a70517 	ldw	r2,-25580(gp)
   24fe8:	e0ffff17 	ldw	r3,-4(fp)
   24fec:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   24ff0:	e0bfff17 	ldw	r2,-4(fp)
   24ff4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   24ff8:	e0bffc17 	ldw	r2,-16(fp)
   24ffc:	10800017 	ldw	r2,0(r2)
   25000:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   25004:	00002006 	br	25088 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   25008:	d0a70517 	ldw	r2,-25580(gp)
   2500c:	10800d03 	ldbu	r2,52(r2)
   25010:	10803fcc 	andi	r2,r2,255
   25014:	d0e70517 	ldw	r3,-25580(gp)
   25018:	18c00d03 	ldbu	r3,52(r3)
   2501c:	18c03fcc 	andi	r3,r3,255
   25020:	e13ffd17 	ldw	r4,-12(fp)
   25024:	20c7883a 	add	r3,r4,r3
   25028:	18c002c4 	addi	r3,r3,11
   2502c:	19000003 	ldbu	r4,0(r3)
   25030:	d0e70517 	ldw	r3,-25580(gp)
   25034:	18c00d43 	ldbu	r3,53(r3)
   25038:	20c6b03a 	or	r3,r4,r3
   2503c:	1809883a 	mov	r4,r3
   25040:	e0fffd17 	ldw	r3,-12(fp)
   25044:	1885883a 	add	r2,r3,r2
   25048:	108002c4 	addi	r2,r2,11
   2504c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   25050:	e0bffd17 	ldw	r2,-12(fp)
   25054:	10c00283 	ldbu	r3,10(r2)
   25058:	d0a70517 	ldw	r2,-25580(gp)
   2505c:	10800d83 	ldbu	r2,54(r2)
   25060:	1884b03a 	or	r2,r3,r2
   25064:	1007883a 	mov	r3,r2
   25068:	e0bffd17 	ldw	r2,-12(fp)
   2506c:	10c00285 	stb	r3,10(r2)
        pevents++;
   25070:	e0bffc17 	ldw	r2,-16(fp)
   25074:	10800104 	addi	r2,r2,4
   25078:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   2507c:	e0bffc17 	ldw	r2,-16(fp)
   25080:	10800017 	ldw	r2,0(r2)
   25084:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   25088:	e0bffd17 	ldw	r2,-12(fp)
   2508c:	103fde1e 	bne	r2,zero,25008 <__alt_data_end+0xfffe5c08>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   25090:	d0a70517 	ldw	r2,-25580(gp)
   25094:	10800d03 	ldbu	r2,52(r2)
   25098:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   2509c:	e0fffe03 	ldbu	r3,-8(fp)
   250a0:	e13ffe03 	ldbu	r4,-8(fp)
   250a4:	d0a70244 	addi	r2,gp,-25591
   250a8:	2085883a 	add	r2,r4,r2
   250ac:	10800003 	ldbu	r2,0(r2)
   250b0:	1009883a 	mov	r4,r2
   250b4:	d0a70517 	ldw	r2,-25580(gp)
   250b8:	10800d43 	ldbu	r2,53(r2)
   250bc:	0084303a 	nor	r2,zero,r2
   250c0:	2084703a 	and	r2,r4,r2
   250c4:	1009883a 	mov	r4,r2
   250c8:	d0a70244 	addi	r2,gp,-25591
   250cc:	1885883a 	add	r2,r3,r2
   250d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   250d4:	e0fffe03 	ldbu	r3,-8(fp)
   250d8:	d0a70244 	addi	r2,gp,-25591
   250dc:	1885883a 	add	r2,r3,r2
   250e0:	10800003 	ldbu	r2,0(r2)
   250e4:	10803fcc 	andi	r2,r2,255
   250e8:	1000071e 	bne	r2,zero,25108 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   250ec:	d0a70517 	ldw	r2,-25580(gp)
   250f0:	10800d83 	ldbu	r2,54(r2)
   250f4:	0084303a 	nor	r2,zero,r2
   250f8:	1007883a 	mov	r3,r2
   250fc:	d0a70203 	ldbu	r2,-25592(gp)
   25100:	1884703a 	and	r2,r3,r2
   25104:	d0a70205 	stb	r2,-25592(gp)
    }
}
   25108:	0001883a 	nop
   2510c:	e037883a 	mov	sp,fp
   25110:	df000017 	ldw	fp,0(sp)
   25114:	dec00104 	addi	sp,sp,4
   25118:	f800283a 	ret

0002511c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   2511c:	defffc04 	addi	sp,sp,-16
   25120:	df000315 	stw	fp,12(sp)
   25124:	df000304 	addi	fp,sp,12
   25128:	e13ffe15 	stw	r4,-8(fp)
   2512c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   25130:	e0bffe17 	ldw	r2,-8(fp)
   25134:	10800d03 	ldbu	r2,52(r2)
   25138:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   2513c:	e0bffd03 	ldbu	r2,-12(fp)
   25140:	e0fffd03 	ldbu	r3,-12(fp)
   25144:	e13fff17 	ldw	r4,-4(fp)
   25148:	20c7883a 	add	r3,r4,r3
   2514c:	18c002c4 	addi	r3,r3,11
   25150:	18c00003 	ldbu	r3,0(r3)
   25154:	1809883a 	mov	r4,r3
   25158:	e0fffe17 	ldw	r3,-8(fp)
   2515c:	18c00d43 	ldbu	r3,53(r3)
   25160:	00c6303a 	nor	r3,zero,r3
   25164:	20c6703a 	and	r3,r4,r3
   25168:	1809883a 	mov	r4,r3
   2516c:	e0ffff17 	ldw	r3,-4(fp)
   25170:	1885883a 	add	r2,r3,r2
   25174:	108002c4 	addi	r2,r2,11
   25178:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   2517c:	e0bffd03 	ldbu	r2,-12(fp)
   25180:	e0ffff17 	ldw	r3,-4(fp)
   25184:	1885883a 	add	r2,r3,r2
   25188:	108002c4 	addi	r2,r2,11
   2518c:	10800003 	ldbu	r2,0(r2)
   25190:	10803fcc 	andi	r2,r2,255
   25194:	10000a1e 	bne	r2,zero,251c0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   25198:	e0bfff17 	ldw	r2,-4(fp)
   2519c:	10800283 	ldbu	r2,10(r2)
   251a0:	1007883a 	mov	r3,r2
   251a4:	e0bffe17 	ldw	r2,-8(fp)
   251a8:	10800d83 	ldbu	r2,54(r2)
   251ac:	0084303a 	nor	r2,zero,r2
   251b0:	1884703a 	and	r2,r3,r2
   251b4:	1007883a 	mov	r3,r2
   251b8:	e0bfff17 	ldw	r2,-4(fp)
   251bc:	10c00285 	stb	r3,10(r2)
    }
}
   251c0:	0001883a 	nop
   251c4:	e037883a 	mov	sp,fp
   251c8:	df000017 	ldw	fp,0(sp)
   251cc:	dec00104 	addi	sp,sp,4
   251d0:	f800283a 	ret

000251d4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   251d4:	defffa04 	addi	sp,sp,-24
   251d8:	df000515 	stw	fp,20(sp)
   251dc:	df000504 	addi	fp,sp,20
   251e0:	e13ffe15 	stw	r4,-8(fp)
   251e4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   251e8:	e0bffe17 	ldw	r2,-8(fp)
   251ec:	10800d03 	ldbu	r2,52(r2)
   251f0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   251f4:	e0bffe17 	ldw	r2,-8(fp)
   251f8:	10800d83 	ldbu	r2,54(r2)
   251fc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   25200:	e0bffe17 	ldw	r2,-8(fp)
   25204:	10800d43 	ldbu	r2,53(r2)
   25208:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   2520c:	e0bfff17 	ldw	r2,-4(fp)
   25210:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   25214:	e0bffb17 	ldw	r2,-20(fp)
   25218:	10800017 	ldw	r2,0(r2)
   2521c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   25220:	00002506 	br	252b8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   25224:	e0bffd03 	ldbu	r2,-12(fp)
   25228:	e0fffd03 	ldbu	r3,-12(fp)
   2522c:	e13ffc17 	ldw	r4,-16(fp)
   25230:	20c7883a 	add	r3,r4,r3
   25234:	18c002c4 	addi	r3,r3,11
   25238:	18c00003 	ldbu	r3,0(r3)
   2523c:	1809883a 	mov	r4,r3
   25240:	e0fffd83 	ldbu	r3,-10(fp)
   25244:	00c6303a 	nor	r3,zero,r3
   25248:	20c6703a 	and	r3,r4,r3
   2524c:	1809883a 	mov	r4,r3
   25250:	e0fffc17 	ldw	r3,-16(fp)
   25254:	1885883a 	add	r2,r3,r2
   25258:	108002c4 	addi	r2,r2,11
   2525c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   25260:	e0bffd03 	ldbu	r2,-12(fp)
   25264:	e0fffc17 	ldw	r3,-16(fp)
   25268:	1885883a 	add	r2,r3,r2
   2526c:	108002c4 	addi	r2,r2,11
   25270:	10800003 	ldbu	r2,0(r2)
   25274:	10803fcc 	andi	r2,r2,255
   25278:	1000091e 	bne	r2,zero,252a0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   2527c:	e0bffc17 	ldw	r2,-16(fp)
   25280:	10800283 	ldbu	r2,10(r2)
   25284:	1007883a 	mov	r3,r2
   25288:	e0bffd43 	ldbu	r2,-11(fp)
   2528c:	0084303a 	nor	r2,zero,r2
   25290:	1884703a 	and	r2,r3,r2
   25294:	1007883a 	mov	r3,r2
   25298:	e0bffc17 	ldw	r2,-16(fp)
   2529c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   252a0:	e0bffb17 	ldw	r2,-20(fp)
   252a4:	10800104 	addi	r2,r2,4
   252a8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   252ac:	e0bffb17 	ldw	r2,-20(fp)
   252b0:	10800017 	ldw	r2,0(r2)
   252b4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   252b8:	e0bffc17 	ldw	r2,-16(fp)
   252bc:	103fd91e 	bne	r2,zero,25224 <__alt_data_end+0xfffe5e24>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   252c0:	0001883a 	nop
   252c4:	e037883a 	mov	sp,fp
   252c8:	df000017 	ldw	fp,0(sp)
   252cc:	dec00104 	addi	sp,sp,4
   252d0:	f800283a 	ret

000252d4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   252d4:	defffc04 	addi	sp,sp,-16
   252d8:	df000315 	stw	fp,12(sp)
   252dc:	df000304 	addi	fp,sp,12
   252e0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   252e4:	e0bfff17 	ldw	r2,-4(fp)
   252e8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   252ec:	e0bfff17 	ldw	r2,-4(fp)
   252f0:	108002c4 	addi	r2,r2,11
   252f4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   252f8:	e03ffe05 	stb	zero,-8(fp)
   252fc:	00000706 	br	2531c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   25300:	e0bffd17 	ldw	r2,-12(fp)
   25304:	10c00044 	addi	r3,r2,1
   25308:	e0fffd15 	stw	r3,-12(fp)
   2530c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   25310:	e0bffe03 	ldbu	r2,-8(fp)
   25314:	10800044 	addi	r2,r2,1
   25318:	e0bffe05 	stb	r2,-8(fp)
   2531c:	e0bffe03 	ldbu	r2,-8(fp)
   25320:	108000f0 	cmpltui	r2,r2,3
   25324:	103ff61e 	bne	r2,zero,25300 <__alt_data_end+0xfffe5f00>
        *ptbl++ = 0;
    }
}
   25328:	0001883a 	nop
   2532c:	e037883a 	mov	sp,fp
   25330:	df000017 	ldw	fp,0(sp)
   25334:	dec00104 	addi	sp,sp,4
   25338:	f800283a 	ret

0002533c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   2533c:	defffb04 	addi	sp,sp,-20
   25340:	dfc00415 	stw	ra,16(sp)
   25344:	df000315 	stw	fp,12(sp)
   25348:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   2534c:	0142d004 	movi	r5,2880
   25350:	010000f4 	movhi	r4,3
   25354:	211d0804 	addi	r4,r4,29728
   25358:	00256b40 	call	256b4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   2535c:	008000f4 	movhi	r2,3
   25360:	109d0804 	addi	r2,r2,29728
   25364:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   25368:	008000f4 	movhi	r2,3
   2536c:	109d1404 	addi	r2,r2,29776
   25370:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   25374:	e03ffd0d 	sth	zero,-12(fp)
   25378:	00001306 	br	253c8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   2537c:	e0bffe17 	ldw	r2,-8(fp)
   25380:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   25384:	e0bffe17 	ldw	r2,-8(fp)
   25388:	e0ffff17 	ldw	r3,-4(fp)
   2538c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   25390:	e0bffe17 	ldw	r2,-8(fp)
   25394:	00c00fc4 	movi	r3,63
   25398:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   2539c:	e0bffe17 	ldw	r2,-8(fp)
   253a0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   253a4:	e0bffe17 	ldw	r2,-8(fp)
   253a8:	10800c04 	addi	r2,r2,48
   253ac:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   253b0:	e0bfff17 	ldw	r2,-4(fp)
   253b4:	10800c04 	addi	r2,r2,48
   253b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   253bc:	e0bffd0b 	ldhu	r2,-12(fp)
   253c0:	10800044 	addi	r2,r2,1
   253c4:	e0bffd0d 	sth	r2,-12(fp)
   253c8:	e0bffd0b 	ldhu	r2,-12(fp)
   253cc:	10800ef0 	cmpltui	r2,r2,59
   253d0:	103fea1e 	bne	r2,zero,2537c <__alt_data_end+0xfffe5f7c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   253d4:	e0bffe17 	ldw	r2,-8(fp)
   253d8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   253dc:	e0bffe17 	ldw	r2,-8(fp)
   253e0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   253e4:	e0bffe17 	ldw	r2,-8(fp)
   253e8:	00c00fc4 	movi	r3,63
   253ec:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   253f0:	e0bffe17 	ldw	r2,-8(fp)
   253f4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   253f8:	008000f4 	movhi	r2,3
   253fc:	109d0804 	addi	r2,r2,29728
   25400:	d0a70315 	stw	r2,-25588(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   25404:	0001883a 	nop
   25408:	e037883a 	mov	sp,fp
   2540c:	dfc00117 	ldw	ra,4(sp)
   25410:	df000017 	ldw	fp,0(sp)
   25414:	dec00204 	addi	sp,sp,8
   25418:	f800283a 	ret

0002541c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   2541c:	deffff04 	addi	sp,sp,-4
   25420:	df000015 	stw	fp,0(sp)
   25424:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   25428:	d0270615 	stw	zero,-25576(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   2542c:	d0270405 	stb	zero,-25584(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   25430:	d026f605 	stb	zero,-25640(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   25434:	d026fe45 	stb	zero,-25607(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   25438:	d026f645 	stb	zero,-25639(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   2543c:	d026fb15 	stw	zero,-25620(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   25440:	d026f715 	stw	zero,-25636(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   25444:	d0270915 	stw	zero,-25564(gp)
    OSIdleCtrMax  = 0L;
   25448:	d026fc15 	stw	zero,-25616(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   2544c:	d0270805 	stb	zero,-25568(gp)
#endif
}
   25450:	0001883a 	nop
   25454:	e037883a 	mov	sp,fp
   25458:	df000017 	ldw	fp,0(sp)
   2545c:	dec00104 	addi	sp,sp,4
   25460:	f800283a 	ret

00025464 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   25464:	defffd04 	addi	sp,sp,-12
   25468:	df000215 	stw	fp,8(sp)
   2546c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   25470:	d0270205 	stb	zero,-25592(gp)
    prdytbl       = &OSRdyTbl[0];
   25474:	d0a70244 	addi	r2,gp,-25591
   25478:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   2547c:	e03ffe05 	stb	zero,-8(fp)
   25480:	00000706 	br	254a0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   25484:	e0bfff17 	ldw	r2,-4(fp)
   25488:	10c00044 	addi	r3,r2,1
   2548c:	e0ffff15 	stw	r3,-4(fp)
   25490:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   25494:	e0bffe03 	ldbu	r2,-8(fp)
   25498:	10800044 	addi	r2,r2,1
   2549c:	e0bffe05 	stb	r2,-8(fp)
   254a0:	e0bffe03 	ldbu	r2,-8(fp)
   254a4:	108000f0 	cmpltui	r2,r2,3
   254a8:	103ff61e 	bne	r2,zero,25484 <__alt_data_end+0xfffe6084>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   254ac:	d026f845 	stb	zero,-25631(gp)
    OSPrioHighRdy = 0;
   254b0:	d026f805 	stb	zero,-25632(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   254b4:	d0270015 	stw	zero,-25600(gp)
    OSTCBCur      = (OS_TCB *)0;
   254b8:	d0270515 	stw	zero,-25580(gp)
}
   254bc:	0001883a 	nop
   254c0:	e037883a 	mov	sp,fp
   254c4:	df000017 	ldw	fp,0(sp)
   254c8:	dec00104 	addi	sp,sp,4
   254cc:	f800283a 	ret

000254d0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   254d0:	defff804 	addi	sp,sp,-32
   254d4:	dfc00715 	stw	ra,28(sp)
   254d8:	df000615 	stw	fp,24(sp)
   254dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   254e0:	008000c4 	movi	r2,3
   254e4:	d8800415 	stw	r2,16(sp)
   254e8:	d8000315 	stw	zero,12(sp)
   254ec:	00808004 	movi	r2,512
   254f0:	d8800215 	stw	r2,8(sp)
   254f4:	008000f4 	movhi	r2,3
   254f8:	109b0804 	addi	r2,r2,27680
   254fc:	d8800115 	stw	r2,4(sp)
   25500:	00bfffd4 	movui	r2,65535
   25504:	d8800015 	stw	r2,0(sp)
   25508:	01c00504 	movi	r7,20
   2550c:	018000f4 	movhi	r6,3
   25510:	319d0704 	addi	r6,r6,29724
   25514:	000b883a 	mov	r5,zero
   25518:	010000b4 	movhi	r4,2
   2551c:	21165f04 	addi	r4,r4,22908
   25520:	002a0480 	call	2a048 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   25524:	e1bfff04 	addi	r6,fp,-4
   25528:	014000f4 	movhi	r5,3
   2552c:	2976f304 	addi	r5,r5,-9268
   25530:	01000504 	movi	r4,20
   25534:	002a8580 	call	2a858 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   25538:	0001883a 	nop
   2553c:	e037883a 	mov	sp,fp
   25540:	dfc00117 	ldw	ra,4(sp)
   25544:	df000017 	ldw	fp,0(sp)
   25548:	dec00204 	addi	sp,sp,8
   2554c:	f800283a 	ret

00025550 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   25550:	defff804 	addi	sp,sp,-32
   25554:	dfc00715 	stw	ra,28(sp)
   25558:	df000615 	stw	fp,24(sp)
   2555c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   25560:	008000c4 	movi	r2,3
   25564:	d8800415 	stw	r2,16(sp)
   25568:	d8000315 	stw	zero,12(sp)
   2556c:	00808004 	movi	r2,512
   25570:	d8800215 	stw	r2,8(sp)
   25574:	008000f4 	movhi	r2,3
   25578:	10989004 	addi	r2,r2,25152
   2557c:	d8800115 	stw	r2,4(sp)
   25580:	00bfff94 	movui	r2,65534
   25584:	d8800015 	stw	r2,0(sp)
   25588:	01c004c4 	movi	r7,19
   2558c:	018000f4 	movhi	r6,3
   25590:	319a8f04 	addi	r6,r6,27196
   25594:	000b883a 	mov	r5,zero
   25598:	010000b4 	movhi	r4,2
   2559c:	21167604 	addi	r4,r4,23000
   255a0:	002a0480 	call	2a048 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   255a4:	e1bfff04 	addi	r6,fp,-4
   255a8:	014000f4 	movhi	r5,3
   255ac:	2976f704 	addi	r5,r5,-9252
   255b0:	010004c4 	movi	r4,19
   255b4:	002a8580 	call	2a858 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   255b8:	0001883a 	nop
   255bc:	e037883a 	mov	sp,fp
   255c0:	dfc00117 	ldw	ra,4(sp)
   255c4:	df000017 	ldw	fp,0(sp)
   255c8:	dec00204 	addi	sp,sp,8
   255cc:	f800283a 	ret

000255d0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   255d0:	defffb04 	addi	sp,sp,-20
   255d4:	dfc00415 	stw	ra,16(sp)
   255d8:	df000315 	stw	fp,12(sp)
   255dc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   255e0:	01414404 	movi	r5,1296
   255e4:	010000f4 	movhi	r4,3
   255e8:	211fd804 	addi	r4,r4,32608
   255ec:	00256b40 	call	256b4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   255f0:	01401504 	movi	r5,84
   255f4:	01000134 	movhi	r4,4
   255f8:	21211c04 	addi	r4,r4,-31632
   255fc:	00256b40 	call	256b4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   25600:	008000f4 	movhi	r2,3
   25604:	109fd804 	addi	r2,r2,32608
   25608:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   2560c:	008000f4 	movhi	r2,3
   25610:	109ff304 	addi	r2,r2,32716
   25614:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   25618:	e03ffd05 	stb	zero,-12(fp)
   2561c:	00001106 	br	25664 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   25620:	e0bffe17 	ldw	r2,-8(fp)
   25624:	e0ffff17 	ldw	r3,-4(fp)
   25628:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   2562c:	e0bffe17 	ldw	r2,-8(fp)
   25630:	00c00fc4 	movi	r3,63
   25634:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   25638:	e0bffe17 	ldw	r2,-8(fp)
   2563c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   25640:	e0bffe17 	ldw	r2,-8(fp)
   25644:	10801b04 	addi	r2,r2,108
   25648:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   2564c:	e0bfff17 	ldw	r2,-4(fp)
   25650:	10801b04 	addi	r2,r2,108
   25654:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   25658:	e0bffd03 	ldbu	r2,-12(fp)
   2565c:	10800044 	addi	r2,r2,1
   25660:	e0bffd05 	stb	r2,-12(fp)
   25664:	e0bffd03 	ldbu	r2,-12(fp)
   25668:	108002f0 	cmpltui	r2,r2,11
   2566c:	103fec1e 	bne	r2,zero,25620 <__alt_data_end+0xfffe6220>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   25670:	e0bffe17 	ldw	r2,-8(fp)
   25674:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   25678:	e0bffe17 	ldw	r2,-8(fp)
   2567c:	00c00fc4 	movi	r3,63
   25680:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   25684:	e0bffe17 	ldw	r2,-8(fp)
   25688:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   2568c:	d026f915 	stw	zero,-25628(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   25690:	008000f4 	movhi	r2,3
   25694:	109fd804 	addi	r2,r2,32608
   25698:	d0a6fd15 	stw	r2,-25612(gp)
}
   2569c:	0001883a 	nop
   256a0:	e037883a 	mov	sp,fp
   256a4:	dfc00117 	ldw	ra,4(sp)
   256a8:	df000017 	ldw	fp,0(sp)
   256ac:	dec00204 	addi	sp,sp,8
   256b0:	f800283a 	ret

000256b4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   256b4:	defffd04 	addi	sp,sp,-12
   256b8:	df000215 	stw	fp,8(sp)
   256bc:	df000204 	addi	fp,sp,8
   256c0:	e13ffe15 	stw	r4,-8(fp)
   256c4:	2805883a 	mov	r2,r5
   256c8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   256cc:	00000706 	br	256ec <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   256d0:	e0bffe17 	ldw	r2,-8(fp)
   256d4:	10c00044 	addi	r3,r2,1
   256d8:	e0fffe15 	stw	r3,-8(fp)
   256dc:	10000005 	stb	zero,0(r2)
        size--;
   256e0:	e0bfff0b 	ldhu	r2,-4(fp)
   256e4:	10bfffc4 	addi	r2,r2,-1
   256e8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   256ec:	e0bfff0b 	ldhu	r2,-4(fp)
   256f0:	103ff71e 	bne	r2,zero,256d0 <__alt_data_end+0xfffe62d0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   256f4:	0001883a 	nop
   256f8:	e037883a 	mov	sp,fp
   256fc:	df000017 	ldw	fp,0(sp)
   25700:	dec00104 	addi	sp,sp,4
   25704:	f800283a 	ret

00025708 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   25708:	defffc04 	addi	sp,sp,-16
   2570c:	df000315 	stw	fp,12(sp)
   25710:	df000304 	addi	fp,sp,12
   25714:	e13ffd15 	stw	r4,-12(fp)
   25718:	e17ffe15 	stw	r5,-8(fp)
   2571c:	3005883a 	mov	r2,r6
   25720:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   25724:	00000b06 	br	25754 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   25728:	e0bffd17 	ldw	r2,-12(fp)
   2572c:	10c00044 	addi	r3,r2,1
   25730:	e0fffd15 	stw	r3,-12(fp)
   25734:	e0fffe17 	ldw	r3,-8(fp)
   25738:	19000044 	addi	r4,r3,1
   2573c:	e13ffe15 	stw	r4,-8(fp)
   25740:	18c00003 	ldbu	r3,0(r3)
   25744:	10c00005 	stb	r3,0(r2)
        size--;
   25748:	e0bfff0b 	ldhu	r2,-4(fp)
   2574c:	10bfffc4 	addi	r2,r2,-1
   25750:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   25754:	e0bfff0b 	ldhu	r2,-4(fp)
   25758:	103ff31e 	bne	r2,zero,25728 <__alt_data_end+0xfffe6328>
        *pdest++ = *psrc++;
        size--;
    }
}
   2575c:	0001883a 	nop
   25760:	e037883a 	mov	sp,fp
   25764:	df000017 	ldw	fp,0(sp)
   25768:	dec00104 	addi	sp,sp,4
   2576c:	f800283a 	ret

00025770 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   25770:	defffb04 	addi	sp,sp,-20
   25774:	dfc00415 	stw	ra,16(sp)
   25778:	df000315 	stw	fp,12(sp)
   2577c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   25780:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25784:	0005303a 	rdctl	r2,status
   25788:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2578c:	e0ffff17 	ldw	r3,-4(fp)
   25790:	00bfff84 	movi	r2,-2
   25794:	1884703a 	and	r2,r3,r2
   25798:	1001703a 	wrctl	status,r2
  
  return context;
   2579c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   257a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   257a4:	d0a70403 	ldbu	r2,-25584(gp)
   257a8:	10803fcc 	andi	r2,r2,255
   257ac:	10001a1e 	bne	r2,zero,25818 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   257b0:	d0a6f603 	ldbu	r2,-25640(gp)
   257b4:	10803fcc 	andi	r2,r2,255
   257b8:	1000171e 	bne	r2,zero,25818 <OS_Sched+0xa8>
            OS_SchedNew();
   257bc:	00258400 	call	25840 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   257c0:	d0e6f803 	ldbu	r3,-25632(gp)
   257c4:	d0a6f843 	ldbu	r2,-25631(gp)
   257c8:	18c03fcc 	andi	r3,r3,255
   257cc:	10803fcc 	andi	r2,r2,255
   257d0:	18801126 	beq	r3,r2,25818 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   257d4:	d0a6f803 	ldbu	r2,-25632(gp)
   257d8:	10c03fcc 	andi	r3,r2,255
   257dc:	00800134 	movhi	r2,4
   257e0:	10a11c04 	addi	r2,r2,-31632
   257e4:	18c7883a 	add	r3,r3,r3
   257e8:	18c7883a 	add	r3,r3,r3
   257ec:	10c5883a 	add	r2,r2,r3
   257f0:	10800017 	ldw	r2,0(r2)
   257f4:	d0a70015 	stw	r2,-25600(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   257f8:	d0a70017 	ldw	r2,-25600(gp)
   257fc:	10c00e17 	ldw	r3,56(r2)
   25800:	18c00044 	addi	r3,r3,1
   25804:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   25808:	d0a6fb17 	ldw	r2,-25620(gp)
   2580c:	10800044 	addi	r2,r2,1
   25810:	d0a6fb15 	stw	r2,-25620(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   25814:	002d06c0 	call	2d06c <OSCtxSw>
   25818:	e0bffd17 	ldw	r2,-12(fp)
   2581c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25820:	e0bffe17 	ldw	r2,-8(fp)
   25824:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   25828:	0001883a 	nop
   2582c:	e037883a 	mov	sp,fp
   25830:	dfc00117 	ldw	ra,4(sp)
   25834:	df000017 	ldw	fp,0(sp)
   25838:	dec00204 	addi	sp,sp,8
   2583c:	f800283a 	ret

00025840 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   25840:	defffe04 	addi	sp,sp,-8
   25844:	df000115 	stw	fp,4(sp)
   25848:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   2584c:	d0a70203 	ldbu	r2,-25592(gp)
   25850:	10c03fcc 	andi	r3,r2,255
   25854:	008000f4 	movhi	r2,3
   25858:	10b6b304 	addi	r2,r2,-9524
   2585c:	10c5883a 	add	r2,r2,r3
   25860:	10800003 	ldbu	r2,0(r2)
   25864:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   25868:	e0bfff03 	ldbu	r2,-4(fp)
   2586c:	100490fa 	slli	r2,r2,3
   25870:	1009883a 	mov	r4,r2
   25874:	e0ffff03 	ldbu	r3,-4(fp)
   25878:	d0a70244 	addi	r2,gp,-25591
   2587c:	1885883a 	add	r2,r3,r2
   25880:	10800003 	ldbu	r2,0(r2)
   25884:	10c03fcc 	andi	r3,r2,255
   25888:	008000f4 	movhi	r2,3
   2588c:	10b6b304 	addi	r2,r2,-9524
   25890:	10c5883a 	add	r2,r2,r3
   25894:	10800003 	ldbu	r2,0(r2)
   25898:	2085883a 	add	r2,r4,r2
   2589c:	d0a6f805 	stb	r2,-25632(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   258a0:	0001883a 	nop
   258a4:	e037883a 	mov	sp,fp
   258a8:	df000017 	ldw	fp,0(sp)
   258ac:	dec00104 	addi	sp,sp,4
   258b0:	f800283a 	ret

000258b4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   258b4:	defffc04 	addi	sp,sp,-16
   258b8:	df000315 	stw	fp,12(sp)
   258bc:	df000304 	addi	fp,sp,12
   258c0:	e13ffe15 	stw	r4,-8(fp)
   258c4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   258c8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   258cc:	00000b06 	br	258fc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   258d0:	e0bffe17 	ldw	r2,-8(fp)
   258d4:	10c00044 	addi	r3,r2,1
   258d8:	e0fffe15 	stw	r3,-8(fp)
   258dc:	e0ffff17 	ldw	r3,-4(fp)
   258e0:	19000044 	addi	r4,r3,1
   258e4:	e13fff15 	stw	r4,-4(fp)
   258e8:	18c00003 	ldbu	r3,0(r3)
   258ec:	10c00005 	stb	r3,0(r2)
        len++;
   258f0:	e0bffd03 	ldbu	r2,-12(fp)
   258f4:	10800044 	addi	r2,r2,1
   258f8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   258fc:	e0bfff17 	ldw	r2,-4(fp)
   25900:	10800003 	ldbu	r2,0(r2)
   25904:	10803fcc 	andi	r2,r2,255
   25908:	103ff11e 	bne	r2,zero,258d0 <__alt_data_end+0xfffe64d0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   2590c:	e0bffe17 	ldw	r2,-8(fp)
   25910:	10000005 	stb	zero,0(r2)
    return (len);
   25914:	e0bffd03 	ldbu	r2,-12(fp)
}
   25918:	e037883a 	mov	sp,fp
   2591c:	df000017 	ldw	fp,0(sp)
   25920:	dec00104 	addi	sp,sp,4
   25924:	f800283a 	ret

00025928 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   25928:	defffd04 	addi	sp,sp,-12
   2592c:	df000215 	stw	fp,8(sp)
   25930:	df000204 	addi	fp,sp,8
   25934:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   25938:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   2593c:	00000606 	br	25958 <OS_StrLen+0x30>
        psrc++;
   25940:	e0bfff17 	ldw	r2,-4(fp)
   25944:	10800044 	addi	r2,r2,1
   25948:	e0bfff15 	stw	r2,-4(fp)
        len++;
   2594c:	e0bffe03 	ldbu	r2,-8(fp)
   25950:	10800044 	addi	r2,r2,1
   25954:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   25958:	e0bfff17 	ldw	r2,-4(fp)
   2595c:	10800003 	ldbu	r2,0(r2)
   25960:	10803fcc 	andi	r2,r2,255
   25964:	103ff61e 	bne	r2,zero,25940 <__alt_data_end+0xfffe6540>
        psrc++;
        len++;
    }
    return (len);
   25968:	e0bffe03 	ldbu	r2,-8(fp)
}
   2596c:	e037883a 	mov	sp,fp
   25970:	df000017 	ldw	fp,0(sp)
   25974:	dec00104 	addi	sp,sp,4
   25978:	f800283a 	ret

0002597c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   2597c:	defffa04 	addi	sp,sp,-24
   25980:	dfc00515 	stw	ra,20(sp)
   25984:	df000415 	stw	fp,16(sp)
   25988:	df000404 	addi	fp,sp,16
   2598c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   25990:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25994:	0005303a 	rdctl	r2,status
   25998:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2599c:	e0fffd17 	ldw	r3,-12(fp)
   259a0:	00bfff84 	movi	r2,-2
   259a4:	1884703a 	and	r2,r3,r2
   259a8:	1001703a 	wrctl	status,r2
  
  return context;
   259ac:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   259b0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   259b4:	d0a6f717 	ldw	r2,-25636(gp)
   259b8:	10800044 	addi	r2,r2,1
   259bc:	d0a6f715 	stw	r2,-25636(gp)
   259c0:	e0bffc17 	ldw	r2,-16(fp)
   259c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   259c8:	e0bffe17 	ldw	r2,-8(fp)
   259cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   259d0:	002d3800 	call	2d380 <OSTaskIdleHook>
    }
   259d4:	003fef06 	br	25994 <__alt_data_end+0xfffe6594>

000259d8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   259d8:	defffa04 	addi	sp,sp,-24
   259dc:	dfc00515 	stw	ra,20(sp)
   259e0:	df000415 	stw	fp,16(sp)
   259e4:	df000404 	addi	fp,sp,16
   259e8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   259ec:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   259f0:	00000206 	br	259fc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   259f4:	01003204 	movi	r4,200
   259f8:	002b1180 	call	2b118 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   259fc:	d0a70803 	ldbu	r2,-25568(gp)
   25a00:	10803fcc 	andi	r2,r2,255
   25a04:	103ffb26 	beq	r2,zero,259f4 <__alt_data_end+0xfffe65f4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   25a08:	d0a6fc17 	ldw	r2,-25616(gp)
   25a0c:	01401904 	movi	r5,100
   25a10:	1009883a 	mov	r4,r2
   25a14:	00230b00 	call	230b0 <__udivsi3>
   25a18:	d0a6fc15 	stw	r2,-25616(gp)
    if (OSIdleCtrMax == 0L) {
   25a1c:	d0a6fc17 	ldw	r2,-25616(gp)
   25a20:	1000031e 	bne	r2,zero,25a30 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   25a24:	d026fe05 	stb	zero,-25608(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   25a28:	01003fc4 	movi	r4,255
   25a2c:	002ada00 	call	2ada0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25a30:	0005303a 	rdctl	r2,status
   25a34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25a38:	e0fffd17 	ldw	r3,-12(fp)
   25a3c:	00bfff84 	movi	r2,-2
   25a40:	1884703a 	and	r2,r3,r2
   25a44:	1001703a 	wrctl	status,r2
  
  return context;
   25a48:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   25a4c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   25a50:	d0a6f717 	ldw	r2,-25636(gp)
   25a54:	d0a70915 	stw	r2,-25564(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   25a58:	d026f715 	stw	zero,-25636(gp)
   25a5c:	e0bffc17 	ldw	r2,-16(fp)
   25a60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25a64:	e0bffe17 	ldw	r2,-8(fp)
   25a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   25a6c:	d0a70917 	ldw	r2,-25564(gp)
   25a70:	d0e6fc17 	ldw	r3,-25616(gp)
   25a74:	180b883a 	mov	r5,r3
   25a78:	1009883a 	mov	r4,r2
   25a7c:	00230b00 	call	230b0 <__udivsi3>
   25a80:	1007883a 	mov	r3,r2
   25a84:	00801904 	movi	r2,100
   25a88:	10c5c83a 	sub	r2,r2,r3
   25a8c:	d0a6fe05 	stb	r2,-25608(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   25a90:	002d3000 	call	2d300 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   25a94:	0025aa40 	call	25aa4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   25a98:	01001904 	movi	r4,100
   25a9c:	002b1180 	call	2b118 <OSTimeDly>
    }
   25aa0:	003fe306 	br	25a30 <__alt_data_end+0xfffe6630>

00025aa4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   25aa4:	defffa04 	addi	sp,sp,-24
   25aa8:	dfc00515 	stw	ra,20(sp)
   25aac:	df000415 	stw	fp,16(sp)
   25ab0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   25ab4:	e03ffc05 	stb	zero,-16(fp)
   25ab8:	00002406 	br	25b4c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   25abc:	e0bffc03 	ldbu	r2,-16(fp)
   25ac0:	e0fffe04 	addi	r3,fp,-8
   25ac4:	180b883a 	mov	r5,r3
   25ac8:	1009883a 	mov	r4,r2
   25acc:	002abe00 	call	2abe0 <OSTaskStkChk>
   25ad0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   25ad4:	e0bffc43 	ldbu	r2,-15(fp)
   25ad8:	1000191e 	bne	r2,zero,25b40 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   25adc:	e0fffc03 	ldbu	r3,-16(fp)
   25ae0:	00800134 	movhi	r2,4
   25ae4:	10a11c04 	addi	r2,r2,-31632
   25ae8:	18c7883a 	add	r3,r3,r3
   25aec:	18c7883a 	add	r3,r3,r3
   25af0:	10c5883a 	add	r2,r2,r3
   25af4:	10800017 	ldw	r2,0(r2)
   25af8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   25afc:	e0bffd17 	ldw	r2,-12(fp)
   25b00:	10000f26 	beq	r2,zero,25b40 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   25b04:	e0bffd17 	ldw	r2,-12(fp)
   25b08:	10800060 	cmpeqi	r2,r2,1
   25b0c:	10000c1e 	bne	r2,zero,25b40 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   25b10:	e0bffd17 	ldw	r2,-12(fp)
   25b14:	10c00217 	ldw	r3,8(r2)
   25b18:	e0bffd17 	ldw	r2,-12(fp)
   25b1c:	10800317 	ldw	r2,12(r2)
   25b20:	1085883a 	add	r2,r2,r2
   25b24:	1085883a 	add	r2,r2,r2
   25b28:	1887883a 	add	r3,r3,r2
   25b2c:	e0bffd17 	ldw	r2,-12(fp)
   25b30:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   25b34:	e0ffff17 	ldw	r3,-4(fp)
   25b38:	e0bffd17 	ldw	r2,-12(fp)
   25b3c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   25b40:	e0bffc03 	ldbu	r2,-16(fp)
   25b44:	10800044 	addi	r2,r2,1
   25b48:	e0bffc05 	stb	r2,-16(fp)
   25b4c:	e0bffc03 	ldbu	r2,-16(fp)
   25b50:	10800570 	cmpltui	r2,r2,21
   25b54:	103fd91e 	bne	r2,zero,25abc <__alt_data_end+0xfffe66bc>
#endif
                }
            }
        }
    }
}
   25b58:	0001883a 	nop
   25b5c:	e037883a 	mov	sp,fp
   25b60:	dfc00117 	ldw	ra,4(sp)
   25b64:	df000017 	ldw	fp,0(sp)
   25b68:	dec00204 	addi	sp,sp,8
   25b6c:	f800283a 	ret

00025b70 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   25b70:	defff204 	addi	sp,sp,-56
   25b74:	dfc00d15 	stw	ra,52(sp)
   25b78:	df000c15 	stw	fp,48(sp)
   25b7c:	df000c04 	addi	fp,sp,48
   25b80:	e17ffc15 	stw	r5,-16(fp)
   25b84:	e1bffd15 	stw	r6,-12(fp)
   25b88:	3807883a 	mov	r3,r7
   25b8c:	e0800417 	ldw	r2,16(fp)
   25b90:	e13ffb05 	stb	r4,-20(fp)
   25b94:	e0fffe0d 	sth	r3,-8(fp)
   25b98:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   25b9c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25ba0:	0005303a 	rdctl	r2,status
   25ba4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ba8:	e0fffa17 	ldw	r3,-24(fp)
   25bac:	00bfff84 	movi	r2,-2
   25bb0:	1884703a 	and	r2,r3,r2
   25bb4:	1001703a 	wrctl	status,r2
  
  return context;
   25bb8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   25bbc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   25bc0:	d0a6fd17 	ldw	r2,-25612(gp)
   25bc4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   25bc8:	e0bff617 	ldw	r2,-40(fp)
   25bcc:	10009326 	beq	r2,zero,25e1c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   25bd0:	e0bff617 	ldw	r2,-40(fp)
   25bd4:	10800517 	ldw	r2,20(r2)
   25bd8:	d0a6fd15 	stw	r2,-25612(gp)
   25bdc:	e0bff417 	ldw	r2,-48(fp)
   25be0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25be4:	e0bff817 	ldw	r2,-32(fp)
   25be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   25bec:	e0bff617 	ldw	r2,-40(fp)
   25bf0:	e0fffc17 	ldw	r3,-16(fp)
   25bf4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   25bf8:	e0bff617 	ldw	r2,-40(fp)
   25bfc:	e0fffb03 	ldbu	r3,-20(fp)
   25c00:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   25c04:	e0bff617 	ldw	r2,-40(fp)
   25c08:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   25c0c:	e0bff617 	ldw	r2,-40(fp)
   25c10:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   25c14:	e0bff617 	ldw	r2,-40(fp)
   25c18:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   25c1c:	e0bff617 	ldw	r2,-40(fp)
   25c20:	e0c00317 	ldw	r3,12(fp)
   25c24:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   25c28:	e0bff617 	ldw	r2,-40(fp)
   25c2c:	e0c00217 	ldw	r3,8(fp)
   25c30:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   25c34:	e0bff617 	ldw	r2,-40(fp)
   25c38:	e0fffd17 	ldw	r3,-12(fp)
   25c3c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   25c40:	e0bff617 	ldw	r2,-40(fp)
   25c44:	e0ffff0b 	ldhu	r3,-4(fp)
   25c48:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   25c4c:	e0bff617 	ldw	r2,-40(fp)
   25c50:	e0fffe0b 	ldhu	r3,-8(fp)
   25c54:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   25c58:	e0bff617 	ldw	r2,-40(fp)
   25c5c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   25c60:	e0bffb03 	ldbu	r2,-20(fp)
   25c64:	1004d0fa 	srli	r2,r2,3
   25c68:	1007883a 	mov	r3,r2
   25c6c:	e0bff617 	ldw	r2,-40(fp)
   25c70:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   25c74:	e0bffb03 	ldbu	r2,-20(fp)
   25c78:	108001cc 	andi	r2,r2,7
   25c7c:	1007883a 	mov	r3,r2
   25c80:	e0bff617 	ldw	r2,-40(fp)
   25c84:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   25c88:	e0bff617 	ldw	r2,-40(fp)
   25c8c:	10800d03 	ldbu	r2,52(r2)
   25c90:	10803fcc 	andi	r2,r2,255
   25c94:	00c00044 	movi	r3,1
   25c98:	1884983a 	sll	r2,r3,r2
   25c9c:	1007883a 	mov	r3,r2
   25ca0:	e0bff617 	ldw	r2,-40(fp)
   25ca4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   25ca8:	e0bff617 	ldw	r2,-40(fp)
   25cac:	10800cc3 	ldbu	r2,51(r2)
   25cb0:	10803fcc 	andi	r2,r2,255
   25cb4:	00c00044 	movi	r3,1
   25cb8:	1884983a 	sll	r2,r3,r2
   25cbc:	1007883a 	mov	r3,r2
   25cc0:	e0bff617 	ldw	r2,-40(fp)
   25cc4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   25cc8:	e0bff617 	ldw	r2,-40(fp)
   25ccc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   25cd0:	e0bff617 	ldw	r2,-40(fp)
   25cd4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   25cd8:	e0bff617 	ldw	r2,-40(fp)
   25cdc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   25ce0:	e0bff617 	ldw	r2,-40(fp)
   25ce4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   25ce8:	e0bff617 	ldw	r2,-40(fp)
   25cec:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   25cf0:	e0bff617 	ldw	r2,-40(fp)
   25cf4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   25cf8:	e0bff617 	ldw	r2,-40(fp)
   25cfc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   25d00:	e0bff617 	ldw	r2,-40(fp)
   25d04:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   25d08:	e0bff617 	ldw	r2,-40(fp)
   25d0c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   25d10:	e0bff617 	ldw	r2,-40(fp)
   25d14:	00c00fc4 	movi	r3,63
   25d18:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   25d1c:	e0bff617 	ldw	r2,-40(fp)
   25d20:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   25d24:	e13ff617 	ldw	r4,-40(fp)
   25d28:	002d3a00 	call	2d3a0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   25d2c:	e13ff617 	ldw	r4,-40(fp)
   25d30:	002d2980 	call	2d298 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25d34:	0005303a 	rdctl	r2,status
   25d38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25d3c:	e0fff517 	ldw	r3,-44(fp)
   25d40:	00bfff84 	movi	r2,-2
   25d44:	1884703a 	and	r2,r3,r2
   25d48:	1001703a 	wrctl	status,r2
  
  return context;
   25d4c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   25d50:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   25d54:	e0fffb03 	ldbu	r3,-20(fp)
   25d58:	00800134 	movhi	r2,4
   25d5c:	10a11c04 	addi	r2,r2,-31632
   25d60:	18c7883a 	add	r3,r3,r3
   25d64:	18c7883a 	add	r3,r3,r3
   25d68:	10c5883a 	add	r2,r2,r3
   25d6c:	e0fff617 	ldw	r3,-40(fp)
   25d70:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   25d74:	d0e6f917 	ldw	r3,-25628(gp)
   25d78:	e0bff617 	ldw	r2,-40(fp)
   25d7c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   25d80:	e0bff617 	ldw	r2,-40(fp)
   25d84:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   25d88:	d0a6f917 	ldw	r2,-25628(gp)
   25d8c:	10000326 	beq	r2,zero,25d9c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   25d90:	d0a6f917 	ldw	r2,-25628(gp)
   25d94:	e0fff617 	ldw	r3,-40(fp)
   25d98:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   25d9c:	e0bff617 	ldw	r2,-40(fp)
   25da0:	d0a6f915 	stw	r2,-25628(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   25da4:	e0bff617 	ldw	r2,-40(fp)
   25da8:	10c00d83 	ldbu	r3,54(r2)
   25dac:	d0a70203 	ldbu	r2,-25592(gp)
   25db0:	1884b03a 	or	r2,r3,r2
   25db4:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   25db8:	e0bff617 	ldw	r2,-40(fp)
   25dbc:	10800d03 	ldbu	r2,52(r2)
   25dc0:	10c03fcc 	andi	r3,r2,255
   25dc4:	e0bff617 	ldw	r2,-40(fp)
   25dc8:	10800d03 	ldbu	r2,52(r2)
   25dcc:	11003fcc 	andi	r4,r2,255
   25dd0:	d0a70244 	addi	r2,gp,-25591
   25dd4:	2085883a 	add	r2,r4,r2
   25dd8:	11000003 	ldbu	r4,0(r2)
   25ddc:	e0bff617 	ldw	r2,-40(fp)
   25de0:	10800d43 	ldbu	r2,53(r2)
   25de4:	2084b03a 	or	r2,r4,r2
   25de8:	1009883a 	mov	r4,r2
   25dec:	d0a70244 	addi	r2,gp,-25591
   25df0:	1885883a 	add	r2,r3,r2
   25df4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   25df8:	d0a6fe43 	ldbu	r2,-25607(gp)
   25dfc:	10800044 	addi	r2,r2,1
   25e00:	d0a6fe45 	stb	r2,-25607(gp)
   25e04:	e0bff417 	ldw	r2,-48(fp)
   25e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25e0c:	e0bff717 	ldw	r2,-36(fp)
   25e10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   25e14:	0005883a 	mov	r2,zero
   25e18:	00000506 	br	25e30 <OS_TCBInit+0x2c0>
   25e1c:	e0bff417 	ldw	r2,-48(fp)
   25e20:	e0bff915 	stw	r2,-28(fp)
   25e24:	e0bff917 	ldw	r2,-28(fp)
   25e28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   25e2c:	00801084 	movi	r2,66
}
   25e30:	e037883a 	mov	sp,fp
   25e34:	dfc00117 	ldw	ra,4(sp)
   25e38:	df000017 	ldw	fp,0(sp)
   25e3c:	dec00204 	addi	sp,sp,8
   25e40:	f800283a 	ret

00025e44 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   25e44:	defffe04 	addi	sp,sp,-8
   25e48:	df000115 	stw	fp,4(sp)
   25e4c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   25e50:	d0a00d04 	addi	r2,gp,-32716
   25e54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   25e58:	d0a00e04 	addi	r2,gp,-32712
   25e5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   25e60:	d0a00f84 	addi	r2,gp,-32706
   25e64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   25e68:	d0a01004 	addi	r2,gp,-32704
   25e6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   25e70:	d0a00f04 	addi	r2,gp,-32708
   25e74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   25e78:	d0a01084 	addi	r2,gp,-32702
   25e7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   25e80:	d0a01104 	addi	r2,gp,-32700
   25e84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   25e88:	d0a01184 	addi	r2,gp,-32698
   25e8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   25e90:	d0a01204 	addi	r2,gp,-32696
   25e94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   25e98:	d0a01284 	addi	r2,gp,-32694
   25e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   25ea0:	d0a01304 	addi	r2,gp,-32692
   25ea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   25ea8:	d0a01384 	addi	r2,gp,-32690
   25eac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   25eb0:	d0a01404 	addi	r2,gp,-32688
   25eb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   25eb8:	d0a01484 	addi	r2,gp,-32686
   25ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   25ec0:	d0a01504 	addi	r2,gp,-32684
   25ec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   25ec8:	d0a01584 	addi	r2,gp,-32682
   25ecc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   25ed0:	d0a01604 	addi	r2,gp,-32680
   25ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   25ed8:	d0a01684 	addi	r2,gp,-32678
   25edc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   25ee0:	d0a01704 	addi	r2,gp,-32676
   25ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   25ee8:	d0a01784 	addi	r2,gp,-32674
   25eec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   25ef0:	d0a01804 	addi	r2,gp,-32672
   25ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   25ef8:	d0a01884 	addi	r2,gp,-32670
   25efc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   25f00:	d0a01904 	addi	r2,gp,-32668
   25f04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   25f08:	d0a01984 	addi	r2,gp,-32666
   25f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   25f10:	d0a01a04 	addi	r2,gp,-32664
   25f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   25f18:	d0a01a84 	addi	r2,gp,-32662
   25f1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   25f20:	d0a01b04 	addi	r2,gp,-32660
   25f24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   25f28:	d0a01b84 	addi	r2,gp,-32658
   25f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   25f30:	d0a01c04 	addi	r2,gp,-32656
   25f34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   25f38:	d0a01c84 	addi	r2,gp,-32654
   25f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   25f40:	d0a01d04 	addi	r2,gp,-32652
   25f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   25f48:	d0a01d84 	addi	r2,gp,-32650
   25f4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   25f50:	d0a01e04 	addi	r2,gp,-32648
   25f54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   25f58:	d0a01e84 	addi	r2,gp,-32646
   25f5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   25f60:	d0a01f04 	addi	r2,gp,-32644
   25f64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   25f68:	d0a01f84 	addi	r2,gp,-32642
   25f6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   25f70:	d0a02004 	addi	r2,gp,-32640
   25f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   25f78:	d0a02084 	addi	r2,gp,-32638
   25f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   25f80:	d0a02104 	addi	r2,gp,-32636
   25f84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   25f88:	d0a02184 	addi	r2,gp,-32634
   25f8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   25f90:	d0a02204 	addi	r2,gp,-32632
   25f94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   25f98:	d0a02284 	addi	r2,gp,-32630
   25f9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   25fa0:	d0a02304 	addi	r2,gp,-32628
   25fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   25fa8:	d0a02384 	addi	r2,gp,-32626
   25fac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   25fb0:	d0a02404 	addi	r2,gp,-32624
   25fb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   25fb8:	d0a02904 	addi	r2,gp,-32604
   25fbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   25fc0:	0001883a 	nop
   25fc4:	e037883a 	mov	sp,fp
   25fc8:	df000017 	ldw	fp,0(sp)
   25fcc:	dec00104 	addi	sp,sp,4
   25fd0:	f800283a 	ret

00025fd4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   25fd4:	defff204 	addi	sp,sp,-56
   25fd8:	df000d15 	stw	fp,52(sp)
   25fdc:	df000d04 	addi	fp,sp,52
   25fe0:	e13ffc15 	stw	r4,-16(fp)
   25fe4:	2807883a 	mov	r3,r5
   25fe8:	3005883a 	mov	r2,r6
   25fec:	e1ffff15 	stw	r7,-4(fp)
   25ff0:	e0fffd0d 	sth	r3,-12(fp)
   25ff4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   25ff8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   25ffc:	e0bfff17 	ldw	r2,-4(fp)
   26000:	1000021e 	bne	r2,zero,2600c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   26004:	0005883a 	mov	r2,zero
   26008:	0000b006 	br	262cc <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   2600c:	e0bffc17 	ldw	r2,-16(fp)
   26010:	1000051e 	bne	r2,zero,26028 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   26014:	e0bfff17 	ldw	r2,-4(fp)
   26018:	00c01b84 	movi	r3,110
   2601c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26020:	0005883a 	mov	r2,zero
   26024:	0000a906 	br	262cc <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   26028:	e0bffc17 	ldw	r2,-16(fp)
   2602c:	10800003 	ldbu	r2,0(r2)
   26030:	10803fcc 	andi	r2,r2,255
   26034:	10800160 	cmpeqi	r2,r2,5
   26038:	1000051e 	bne	r2,zero,26050 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   2603c:	e0bfff17 	ldw	r2,-4(fp)
   26040:	00c00044 	movi	r3,1
   26044:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26048:	0005883a 	mov	r2,zero
   2604c:	00009f06 	br	262cc <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   26050:	e0fffe03 	ldbu	r3,-8(fp)
   26054:	00bfe004 	movi	r2,-128
   26058:	1884703a 	and	r2,r3,r2
   2605c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   26060:	e0bff503 	ldbu	r2,-44(fp)
   26064:	10000626 	beq	r2,zero,26080 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   26068:	e0bffe03 	ldbu	r2,-8(fp)
   2606c:	10801fcc 	andi	r2,r2,127
   26070:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   26074:	00800044 	movi	r2,1
   26078:	e0bff385 	stb	r2,-50(fp)
   2607c:	00000106 	br	26084 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   26080:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   26084:	e0bfff17 	ldw	r2,-4(fp)
   26088:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2608c:	0005303a 	rdctl	r2,status
   26090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26094:	e0fffb17 	ldw	r3,-20(fp)
   26098:	00bfff84 	movi	r2,-2
   2609c:	1884703a 	and	r2,r3,r2
   260a0:	1001703a 	wrctl	status,r2
  
  return context;
   260a4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   260a8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   260ac:	e0bffe03 	ldbu	r2,-8(fp)
   260b0:	10c00060 	cmpeqi	r3,r2,1
   260b4:	18005f1e 	bne	r3,zero,26234 <OSFlagAccept+0x260>
   260b8:	10c00088 	cmpgei	r3,r2,2
   260bc:	1800021e 	bne	r3,zero,260c8 <OSFlagAccept+0xf4>
   260c0:	10003f26 	beq	r2,zero,261c0 <OSFlagAccept+0x1ec>
   260c4:	00007706 	br	262a4 <OSFlagAccept+0x2d0>
   260c8:	10c000a0 	cmpeqi	r3,r2,2
   260cc:	1800031e 	bne	r3,zero,260dc <OSFlagAccept+0x108>
   260d0:	108000e0 	cmpeqi	r2,r2,3
   260d4:	10001e1e 	bne	r2,zero,26150 <OSFlagAccept+0x17c>
   260d8:	00007206 	br	262a4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   260dc:	e0bffc17 	ldw	r2,-16(fp)
   260e0:	10c0020b 	ldhu	r3,8(r2)
   260e4:	e0bffd0b 	ldhu	r2,-12(fp)
   260e8:	1884703a 	and	r2,r3,r2
   260ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   260f0:	e0fff30b 	ldhu	r3,-52(fp)
   260f4:	e0bffd0b 	ldhu	r2,-12(fp)
   260f8:	18800d1e 	bne	r3,r2,26130 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   260fc:	e0bff383 	ldbu	r2,-50(fp)
   26100:	10800058 	cmpnei	r2,r2,1
   26104:	10000d1e 	bne	r2,zero,2613c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   26108:	e0bffc17 	ldw	r2,-16(fp)
   2610c:	1080020b 	ldhu	r2,8(r2)
   26110:	1007883a 	mov	r3,r2
   26114:	e0bff30b 	ldhu	r2,-52(fp)
   26118:	0084303a 	nor	r2,zero,r2
   2611c:	1884703a 	and	r2,r3,r2
   26120:	1007883a 	mov	r3,r2
   26124:	e0bffc17 	ldw	r2,-16(fp)
   26128:	10c0020d 	sth	r3,8(r2)
   2612c:	00000306 	br	2613c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   26130:	e0bfff17 	ldw	r2,-4(fp)
   26134:	00c01c04 	movi	r3,112
   26138:	10c00005 	stb	r3,0(r2)
   2613c:	e0bff417 	ldw	r2,-48(fp)
   26140:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26144:	e0bff617 	ldw	r2,-40(fp)
   26148:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   2614c:	00005e06 	br	262c8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   26150:	e0bffc17 	ldw	r2,-16(fp)
   26154:	10c0020b 	ldhu	r3,8(r2)
   26158:	e0bffd0b 	ldhu	r2,-12(fp)
   2615c:	1884703a 	and	r2,r3,r2
   26160:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   26164:	e0bff30b 	ldhu	r2,-52(fp)
   26168:	10000d26 	beq	r2,zero,261a0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   2616c:	e0bff383 	ldbu	r2,-50(fp)
   26170:	10800058 	cmpnei	r2,r2,1
   26174:	10000d1e 	bne	r2,zero,261ac <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   26178:	e0bffc17 	ldw	r2,-16(fp)
   2617c:	1080020b 	ldhu	r2,8(r2)
   26180:	1007883a 	mov	r3,r2
   26184:	e0bff30b 	ldhu	r2,-52(fp)
   26188:	0084303a 	nor	r2,zero,r2
   2618c:	1884703a 	and	r2,r3,r2
   26190:	1007883a 	mov	r3,r2
   26194:	e0bffc17 	ldw	r2,-16(fp)
   26198:	10c0020d 	sth	r3,8(r2)
   2619c:	00000306 	br	261ac <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   261a0:	e0bfff17 	ldw	r2,-4(fp)
   261a4:	00c01c04 	movi	r3,112
   261a8:	10c00005 	stb	r3,0(r2)
   261ac:	e0bff417 	ldw	r2,-48(fp)
   261b0:	e0bff715 	stw	r2,-36(fp)
   261b4:	e0bff717 	ldw	r2,-36(fp)
   261b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   261bc:	00004206 	br	262c8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   261c0:	e0bffc17 	ldw	r2,-16(fp)
   261c4:	1080020b 	ldhu	r2,8(r2)
   261c8:	0084303a 	nor	r2,zero,r2
   261cc:	1007883a 	mov	r3,r2
   261d0:	e0bffd0b 	ldhu	r2,-12(fp)
   261d4:	1884703a 	and	r2,r3,r2
   261d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   261dc:	e0fff30b 	ldhu	r3,-52(fp)
   261e0:	e0bffd0b 	ldhu	r2,-12(fp)
   261e4:	18800b1e 	bne	r3,r2,26214 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   261e8:	e0bff383 	ldbu	r2,-50(fp)
   261ec:	10800058 	cmpnei	r2,r2,1
   261f0:	10000b1e 	bne	r2,zero,26220 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   261f4:	e0bffc17 	ldw	r2,-16(fp)
   261f8:	10c0020b 	ldhu	r3,8(r2)
   261fc:	e0bff30b 	ldhu	r2,-52(fp)
   26200:	1884b03a 	or	r2,r3,r2
   26204:	1007883a 	mov	r3,r2
   26208:	e0bffc17 	ldw	r2,-16(fp)
   2620c:	10c0020d 	sth	r3,8(r2)
   26210:	00000306 	br	26220 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   26214:	e0bfff17 	ldw	r2,-4(fp)
   26218:	00c01c04 	movi	r3,112
   2621c:	10c00005 	stb	r3,0(r2)
   26220:	e0bff417 	ldw	r2,-48(fp)
   26224:	e0bff815 	stw	r2,-32(fp)
   26228:	e0bff817 	ldw	r2,-32(fp)
   2622c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   26230:	00002506 	br	262c8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   26234:	e0bffc17 	ldw	r2,-16(fp)
   26238:	1080020b 	ldhu	r2,8(r2)
   2623c:	0084303a 	nor	r2,zero,r2
   26240:	1007883a 	mov	r3,r2
   26244:	e0bffd0b 	ldhu	r2,-12(fp)
   26248:	1884703a 	and	r2,r3,r2
   2624c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   26250:	e0bff30b 	ldhu	r2,-52(fp)
   26254:	10000b26 	beq	r2,zero,26284 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   26258:	e0bff383 	ldbu	r2,-50(fp)
   2625c:	10800058 	cmpnei	r2,r2,1
   26260:	10000b1e 	bne	r2,zero,26290 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   26264:	e0bffc17 	ldw	r2,-16(fp)
   26268:	10c0020b 	ldhu	r3,8(r2)
   2626c:	e0bff30b 	ldhu	r2,-52(fp)
   26270:	1884b03a 	or	r2,r3,r2
   26274:	1007883a 	mov	r3,r2
   26278:	e0bffc17 	ldw	r2,-16(fp)
   2627c:	10c0020d 	sth	r3,8(r2)
   26280:	00000306 	br	26290 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   26284:	e0bfff17 	ldw	r2,-4(fp)
   26288:	00c01c04 	movi	r3,112
   2628c:	10c00005 	stb	r3,0(r2)
   26290:	e0bff417 	ldw	r2,-48(fp)
   26294:	e0bff915 	stw	r2,-28(fp)
   26298:	e0bff917 	ldw	r2,-28(fp)
   2629c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   262a0:	00000906 	br	262c8 <OSFlagAccept+0x2f4>
   262a4:	e0bff417 	ldw	r2,-48(fp)
   262a8:	e0bffa15 	stw	r2,-24(fp)
   262ac:	e0bffa17 	ldw	r2,-24(fp)
   262b0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   262b4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   262b8:	e0bfff17 	ldw	r2,-4(fp)
   262bc:	00c01bc4 	movi	r3,111
   262c0:	10c00005 	stb	r3,0(r2)
             break;
   262c4:	0001883a 	nop
    }
    return (flags_rdy);
   262c8:	e0bff30b 	ldhu	r2,-52(fp)
}
   262cc:	e037883a 	mov	sp,fp
   262d0:	df000017 	ldw	fp,0(sp)
   262d4:	dec00104 	addi	sp,sp,4
   262d8:	f800283a 	ret

000262dc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   262dc:	defff804 	addi	sp,sp,-32
   262e0:	df000715 	stw	fp,28(sp)
   262e4:	df000704 	addi	fp,sp,28
   262e8:	2005883a 	mov	r2,r4
   262ec:	e17fff15 	stw	r5,-4(fp)
   262f0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   262f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   262f8:	e0bfff17 	ldw	r2,-4(fp)
   262fc:	1000021e 	bne	r2,zero,26308 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   26300:	0005883a 	mov	r2,zero
   26304:	00003306 	br	263d4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   26308:	d0a70403 	ldbu	r2,-25584(gp)
   2630c:	10803fcc 	andi	r2,r2,255
   26310:	10000526 	beq	r2,zero,26328 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   26314:	e0bfff17 	ldw	r2,-4(fp)
   26318:	00c00404 	movi	r3,16
   2631c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   26320:	0005883a 	mov	r2,zero
   26324:	00002b06 	br	263d4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26328:	0005303a 	rdctl	r2,status
   2632c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26330:	e0fffd17 	ldw	r3,-12(fp)
   26334:	00bfff84 	movi	r2,-2
   26338:	1884703a 	and	r2,r3,r2
   2633c:	1001703a 	wrctl	status,r2
  
  return context;
   26340:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   26344:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   26348:	d0a70717 	ldw	r2,-25572(gp)
   2634c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   26350:	e0bffb17 	ldw	r2,-20(fp)
   26354:	10001726 	beq	r2,zero,263b4 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   26358:	d0a70717 	ldw	r2,-25572(gp)
   2635c:	10800117 	ldw	r2,4(r2)
   26360:	d0a70715 	stw	r2,-25572(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   26364:	e0bffb17 	ldw	r2,-20(fp)
   26368:	00c00144 	movi	r3,5
   2636c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   26370:	e0bffb17 	ldw	r2,-20(fp)
   26374:	e0fffe0b 	ldhu	r3,-8(fp)
   26378:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   2637c:	e0bffb17 	ldw	r2,-20(fp)
   26380:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   26384:	e0bffb17 	ldw	r2,-20(fp)
   26388:	00c00fc4 	movi	r3,63
   2638c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   26390:	e0bffb17 	ldw	r2,-20(fp)
   26394:	100002c5 	stb	zero,11(r2)
   26398:	e0bff917 	ldw	r2,-28(fp)
   2639c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   263a0:	e0bffa17 	ldw	r2,-24(fp)
   263a4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   263a8:	e0bfff17 	ldw	r2,-4(fp)
   263ac:	10000005 	stb	zero,0(r2)
   263b0:	00000706 	br	263d0 <OSFlagCreate+0xf4>
   263b4:	e0bff917 	ldw	r2,-28(fp)
   263b8:	e0bffc15 	stw	r2,-16(fp)
   263bc:	e0bffc17 	ldw	r2,-16(fp)
   263c0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   263c4:	e0bfff17 	ldw	r2,-4(fp)
   263c8:	00c01c84 	movi	r3,114
   263cc:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   263d0:	e0bffb17 	ldw	r2,-20(fp)
}
   263d4:	e037883a 	mov	sp,fp
   263d8:	df000017 	ldw	fp,0(sp)
   263dc:	dec00104 	addi	sp,sp,4
   263e0:	f800283a 	ret

000263e4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   263e4:	defff204 	addi	sp,sp,-56
   263e8:	dfc00d15 	stw	ra,52(sp)
   263ec:	df000c15 	stw	fp,48(sp)
   263f0:	df000c04 	addi	fp,sp,48
   263f4:	e13ffd15 	stw	r4,-12(fp)
   263f8:	2805883a 	mov	r2,r5
   263fc:	e1bfff15 	stw	r6,-4(fp)
   26400:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   26404:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   26408:	e0bfff17 	ldw	r2,-4(fp)
   2640c:	1000021e 	bne	r2,zero,26418 <OSFlagDel+0x34>
        return (pgrp);
   26410:	e0bffd17 	ldw	r2,-12(fp)
   26414:	00008006 	br	26618 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   26418:	e0bffd17 	ldw	r2,-12(fp)
   2641c:	1000051e 	bne	r2,zero,26434 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   26420:	e0bfff17 	ldw	r2,-4(fp)
   26424:	00c01b84 	movi	r3,110
   26428:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   2642c:	e0bffd17 	ldw	r2,-12(fp)
   26430:	00007906 	br	26618 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   26434:	d0a70403 	ldbu	r2,-25584(gp)
   26438:	10803fcc 	andi	r2,r2,255
   2643c:	10000526 	beq	r2,zero,26454 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   26440:	e0bfff17 	ldw	r2,-4(fp)
   26444:	00c003c4 	movi	r3,15
   26448:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   2644c:	e0bffd17 	ldw	r2,-12(fp)
   26450:	00007106 	br	26618 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   26454:	e0bffd17 	ldw	r2,-12(fp)
   26458:	10800003 	ldbu	r2,0(r2)
   2645c:	10803fcc 	andi	r2,r2,255
   26460:	10800160 	cmpeqi	r2,r2,5
   26464:	1000051e 	bne	r2,zero,2647c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   26468:	e0bfff17 	ldw	r2,-4(fp)
   2646c:	00c00044 	movi	r3,1
   26470:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   26474:	e0bffd17 	ldw	r2,-12(fp)
   26478:	00006706 	br	26618 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2647c:	0005303a 	rdctl	r2,status
   26480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26484:	e0fffc17 	ldw	r3,-16(fp)
   26488:	00bfff84 	movi	r2,-2
   2648c:	1884703a 	and	r2,r3,r2
   26490:	1001703a 	wrctl	status,r2
  
  return context;
   26494:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   26498:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   2649c:	e0bffd17 	ldw	r2,-12(fp)
   264a0:	10800117 	ldw	r2,4(r2)
   264a4:	10000326 	beq	r2,zero,264b4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   264a8:	00800044 	movi	r2,1
   264ac:	e0bff405 	stb	r2,-48(fp)
   264b0:	00000106 	br	264b8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   264b4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   264b8:	e0bffe03 	ldbu	r2,-8(fp)
   264bc:	10000326 	beq	r2,zero,264cc <OSFlagDel+0xe8>
   264c0:	10800060 	cmpeqi	r2,r2,1
   264c4:	1000231e 	bne	r2,zero,26554 <OSFlagDel+0x170>
   264c8:	00004806 	br	265ec <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   264cc:	e0bff403 	ldbu	r2,-48(fp)
   264d0:	1000161e 	bne	r2,zero,2652c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   264d4:	e0bffd17 	ldw	r2,-12(fp)
   264d8:	00c00fc4 	movi	r3,63
   264dc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   264e0:	e0bffd17 	ldw	r2,-12(fp)
   264e4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   264e8:	e0bffd17 	ldw	r2,-12(fp)
   264ec:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   264f0:	d0e70717 	ldw	r3,-25572(gp)
   264f4:	e0bffd17 	ldw	r2,-12(fp)
   264f8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   264fc:	e0bffd17 	ldw	r2,-12(fp)
   26500:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   26504:	e0bffd17 	ldw	r2,-12(fp)
   26508:	d0a70715 	stw	r2,-25572(gp)
   2650c:	e0bff717 	ldw	r2,-36(fp)
   26510:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26514:	e0bff817 	ldw	r2,-32(fp)
   26518:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   2651c:	e0bfff17 	ldw	r2,-4(fp)
   26520:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   26524:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   26528:	00003a06 	br	26614 <OSFlagDel+0x230>
   2652c:	e0bff717 	ldw	r2,-36(fp)
   26530:	e0bff915 	stw	r2,-28(fp)
   26534:	e0bff917 	ldw	r2,-28(fp)
   26538:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   2653c:	e0bfff17 	ldw	r2,-4(fp)
   26540:	00c01244 	movi	r3,73
   26544:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   26548:	e0bffd17 	ldw	r2,-12(fp)
   2654c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   26550:	00003006 	br	26614 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   26554:	e0bffd17 	ldw	r2,-12(fp)
   26558:	10800117 	ldw	r2,4(r2)
   2655c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   26560:	00000606 	br	2657c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   26564:	000b883a 	mov	r5,zero
   26568:	e13ff517 	ldw	r4,-44(fp)
   2656c:	00275500 	call	27550 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   26570:	e0bff517 	ldw	r2,-44(fp)
   26574:	10800017 	ldw	r2,0(r2)
   26578:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   2657c:	e0bff517 	ldw	r2,-44(fp)
   26580:	103ff81e 	bne	r2,zero,26564 <__alt_data_end+0xfffe7164>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   26584:	e0bffd17 	ldw	r2,-12(fp)
   26588:	00c00fc4 	movi	r3,63
   2658c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   26590:	e0bffd17 	ldw	r2,-12(fp)
   26594:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   26598:	e0bffd17 	ldw	r2,-12(fp)
   2659c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   265a0:	d0e70717 	ldw	r3,-25572(gp)
   265a4:	e0bffd17 	ldw	r2,-12(fp)
   265a8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   265ac:	e0bffd17 	ldw	r2,-12(fp)
   265b0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   265b4:	e0bffd17 	ldw	r2,-12(fp)
   265b8:	d0a70715 	stw	r2,-25572(gp)
   265bc:	e0bff717 	ldw	r2,-36(fp)
   265c0:	e0bffa15 	stw	r2,-24(fp)
   265c4:	e0bffa17 	ldw	r2,-24(fp)
   265c8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   265cc:	e0bff403 	ldbu	r2,-48(fp)
   265d0:	10800058 	cmpnei	r2,r2,1
   265d4:	1000011e 	bne	r2,zero,265dc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   265d8:	00257700 	call	25770 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   265dc:	e0bfff17 	ldw	r2,-4(fp)
   265e0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   265e4:	e03ff615 	stw	zero,-40(fp)
             break;
   265e8:	00000a06 	br	26614 <OSFlagDel+0x230>
   265ec:	e0bff717 	ldw	r2,-36(fp)
   265f0:	e0bffb15 	stw	r2,-20(fp)
   265f4:	e0bffb17 	ldw	r2,-20(fp)
   265f8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   265fc:	e0bfff17 	ldw	r2,-4(fp)
   26600:	00c001c4 	movi	r3,7
   26604:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   26608:	e0bffd17 	ldw	r2,-12(fp)
   2660c:	e0bff615 	stw	r2,-40(fp)
             break;
   26610:	0001883a 	nop
    }
    return (pgrp_return);
   26614:	e0bff617 	ldw	r2,-40(fp)
}
   26618:	e037883a 	mov	sp,fp
   2661c:	dfc00117 	ldw	ra,4(sp)
   26620:	df000017 	ldw	fp,0(sp)
   26624:	dec00204 	addi	sp,sp,8
   26628:	f800283a 	ret

0002662c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   2662c:	defff604 	addi	sp,sp,-40
   26630:	dfc00915 	stw	ra,36(sp)
   26634:	df000815 	stw	fp,32(sp)
   26638:	df000804 	addi	fp,sp,32
   2663c:	e13ffd15 	stw	r4,-12(fp)
   26640:	e17ffe15 	stw	r5,-8(fp)
   26644:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   26648:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   2664c:	e0bfff17 	ldw	r2,-4(fp)
   26650:	1000021e 	bne	r2,zero,2665c <OSFlagNameGet+0x30>
        return (0);
   26654:	0005883a 	mov	r2,zero
   26658:	00003906 	br	26740 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   2665c:	e0bffd17 	ldw	r2,-12(fp)
   26660:	1000051e 	bne	r2,zero,26678 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   26664:	e0bfff17 	ldw	r2,-4(fp)
   26668:	00c01b84 	movi	r3,110
   2666c:	10c00005 	stb	r3,0(r2)
        return (0);
   26670:	0005883a 	mov	r2,zero
   26674:	00003206 	br	26740 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   26678:	e0bffe17 	ldw	r2,-8(fp)
   2667c:	1000051e 	bne	r2,zero,26694 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   26680:	e0bfff17 	ldw	r2,-4(fp)
   26684:	00c00304 	movi	r3,12
   26688:	10c00005 	stb	r3,0(r2)
        return (0);
   2668c:	0005883a 	mov	r2,zero
   26690:	00002b06 	br	26740 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   26694:	d0a70403 	ldbu	r2,-25584(gp)
   26698:	10803fcc 	andi	r2,r2,255
   2669c:	10000526 	beq	r2,zero,266b4 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   266a0:	e0bfff17 	ldw	r2,-4(fp)
   266a4:	00c00444 	movi	r3,17
   266a8:	10c00005 	stb	r3,0(r2)
        return (0);
   266ac:	0005883a 	mov	r2,zero
   266b0:	00002306 	br	26740 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   266b4:	0005303a 	rdctl	r2,status
   266b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   266bc:	e0fffc17 	ldw	r3,-16(fp)
   266c0:	00bfff84 	movi	r2,-2
   266c4:	1884703a 	and	r2,r3,r2
   266c8:	1001703a 	wrctl	status,r2
  
  return context;
   266cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   266d0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   266d4:	e0bffd17 	ldw	r2,-12(fp)
   266d8:	10800003 	ldbu	r2,0(r2)
   266dc:	10803fcc 	andi	r2,r2,255
   266e0:	10800160 	cmpeqi	r2,r2,5
   266e4:	1000091e 	bne	r2,zero,2670c <OSFlagNameGet+0xe0>
   266e8:	e0bff817 	ldw	r2,-32(fp)
   266ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   266f0:	e0bff917 	ldw	r2,-28(fp)
   266f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   266f8:	e0bfff17 	ldw	r2,-4(fp)
   266fc:	00c00044 	movi	r3,1
   26700:	10c00005 	stb	r3,0(r2)
        return (0);
   26704:	0005883a 	mov	r2,zero
   26708:	00000d06 	br	26740 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   2670c:	e0bffd17 	ldw	r2,-12(fp)
   26710:	10800284 	addi	r2,r2,10
   26714:	100b883a 	mov	r5,r2
   26718:	e13ffe17 	ldw	r4,-8(fp)
   2671c:	00258b40 	call	258b4 <OS_StrCopy>
   26720:	e0bffb05 	stb	r2,-20(fp)
   26724:	e0bff817 	ldw	r2,-32(fp)
   26728:	e0bffa15 	stw	r2,-24(fp)
   2672c:	e0bffa17 	ldw	r2,-24(fp)
   26730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   26734:	e0bfff17 	ldw	r2,-4(fp)
   26738:	10000005 	stb	zero,0(r2)
    return (len);
   2673c:	e0bffb03 	ldbu	r2,-20(fp)
}
   26740:	e037883a 	mov	sp,fp
   26744:	dfc00117 	ldw	ra,4(sp)
   26748:	df000017 	ldw	fp,0(sp)
   2674c:	dec00204 	addi	sp,sp,8
   26750:	f800283a 	ret

00026754 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   26754:	defff504 	addi	sp,sp,-44
   26758:	dfc00a15 	stw	ra,40(sp)
   2675c:	df000915 	stw	fp,36(sp)
   26760:	df000904 	addi	fp,sp,36
   26764:	e13ffd15 	stw	r4,-12(fp)
   26768:	e17ffe15 	stw	r5,-8(fp)
   2676c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   26770:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   26774:	e0bfff17 	ldw	r2,-4(fp)
   26778:	10004326 	beq	r2,zero,26888 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   2677c:	e0bffd17 	ldw	r2,-12(fp)
   26780:	1000041e 	bne	r2,zero,26794 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   26784:	e0bfff17 	ldw	r2,-4(fp)
   26788:	00c01b84 	movi	r3,110
   2678c:	10c00005 	stb	r3,0(r2)
        return;
   26790:	00003e06 	br	2688c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   26794:	e0bffe17 	ldw	r2,-8(fp)
   26798:	1000041e 	bne	r2,zero,267ac <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   2679c:	e0bfff17 	ldw	r2,-4(fp)
   267a0:	00c00304 	movi	r3,12
   267a4:	10c00005 	stb	r3,0(r2)
        return;
   267a8:	00003806 	br	2688c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   267ac:	d0a70403 	ldbu	r2,-25584(gp)
   267b0:	10803fcc 	andi	r2,r2,255
   267b4:	10000426 	beq	r2,zero,267c8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   267b8:	e0bfff17 	ldw	r2,-4(fp)
   267bc:	00c00484 	movi	r3,18
   267c0:	10c00005 	stb	r3,0(r2)
        return;
   267c4:	00003106 	br	2688c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   267c8:	0005303a 	rdctl	r2,status
   267cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   267d0:	e0fffc17 	ldw	r3,-16(fp)
   267d4:	00bfff84 	movi	r2,-2
   267d8:	1884703a 	and	r2,r3,r2
   267dc:	1001703a 	wrctl	status,r2
  
  return context;
   267e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   267e4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   267e8:	e0bffd17 	ldw	r2,-12(fp)
   267ec:	10800003 	ldbu	r2,0(r2)
   267f0:	10803fcc 	andi	r2,r2,255
   267f4:	10800160 	cmpeqi	r2,r2,5
   267f8:	1000081e 	bne	r2,zero,2681c <OSFlagNameSet+0xc8>
   267fc:	e0bff717 	ldw	r2,-36(fp)
   26800:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26804:	e0bff817 	ldw	r2,-32(fp)
   26808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   2680c:	e0bfff17 	ldw	r2,-4(fp)
   26810:	00c00044 	movi	r3,1
   26814:	10c00005 	stb	r3,0(r2)
        return;
   26818:	00001c06 	br	2688c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   2681c:	e13ffe17 	ldw	r4,-8(fp)
   26820:	00259280 	call	25928 <OS_StrLen>
   26824:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   26828:	e0bffa03 	ldbu	r2,-24(fp)
   2682c:	10800830 	cmpltui	r2,r2,32
   26830:	1000081e 	bne	r2,zero,26854 <OSFlagNameSet+0x100>
   26834:	e0bff717 	ldw	r2,-36(fp)
   26838:	e0bff915 	stw	r2,-28(fp)
   2683c:	e0bff917 	ldw	r2,-28(fp)
   26840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   26844:	e0bfff17 	ldw	r2,-4(fp)
   26848:	00c01cc4 	movi	r3,115
   2684c:	10c00005 	stb	r3,0(r2)
        return;
   26850:	00000e06 	br	2688c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   26854:	e0bffd17 	ldw	r2,-12(fp)
   26858:	10800284 	addi	r2,r2,10
   2685c:	e17ffe17 	ldw	r5,-8(fp)
   26860:	1009883a 	mov	r4,r2
   26864:	00258b40 	call	258b4 <OS_StrCopy>
   26868:	e0bff717 	ldw	r2,-36(fp)
   2686c:	e0bffb15 	stw	r2,-20(fp)
   26870:	e0bffb17 	ldw	r2,-20(fp)
   26874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   26878:	e0bfff17 	ldw	r2,-4(fp)
   2687c:	10000005 	stb	zero,0(r2)
    return;
   26880:	0001883a 	nop
   26884:	00000106 	br	2688c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   26888:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   2688c:	e037883a 	mov	sp,fp
   26890:	dfc00117 	ldw	ra,4(sp)
   26894:	df000017 	ldw	fp,0(sp)
   26898:	dec00204 	addi	sp,sp,8
   2689c:	f800283a 	ret

000268a0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   268a0:	deffe104 	addi	sp,sp,-124
   268a4:	dfc01e15 	stw	ra,120(sp)
   268a8:	df001d15 	stw	fp,116(sp)
   268ac:	df001d04 	addi	fp,sp,116
   268b0:	e13ffc15 	stw	r4,-16(fp)
   268b4:	2809883a 	mov	r4,r5
   268b8:	3007883a 	mov	r3,r6
   268bc:	3805883a 	mov	r2,r7
   268c0:	e13ffd0d 	sth	r4,-12(fp)
   268c4:	e0fffe05 	stb	r3,-8(fp)
   268c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   268cc:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   268d0:	e0800217 	ldw	r2,8(fp)
   268d4:	1000021e 	bne	r2,zero,268e0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   268d8:	0005883a 	mov	r2,zero
   268dc:	00015906 	br	26e44 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   268e0:	e0bffc17 	ldw	r2,-16(fp)
   268e4:	1000051e 	bne	r2,zero,268fc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   268e8:	e0800217 	ldw	r2,8(fp)
   268ec:	00c01b84 	movi	r3,110
   268f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   268f4:	0005883a 	mov	r2,zero
   268f8:	00015206 	br	26e44 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   268fc:	d0a70403 	ldbu	r2,-25584(gp)
   26900:	10803fcc 	andi	r2,r2,255
   26904:	10000526 	beq	r2,zero,2691c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   26908:	e0800217 	ldw	r2,8(fp)
   2690c:	00c00084 	movi	r3,2
   26910:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26914:	0005883a 	mov	r2,zero
   26918:	00014a06 	br	26e44 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   2691c:	d0a6f603 	ldbu	r2,-25640(gp)
   26920:	10803fcc 	andi	r2,r2,255
   26924:	10000526 	beq	r2,zero,2693c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   26928:	e0800217 	ldw	r2,8(fp)
   2692c:	00c00344 	movi	r3,13
   26930:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26934:	0005883a 	mov	r2,zero
   26938:	00014206 	br	26e44 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   2693c:	e0bffc17 	ldw	r2,-16(fp)
   26940:	10800003 	ldbu	r2,0(r2)
   26944:	10803fcc 	andi	r2,r2,255
   26948:	10800160 	cmpeqi	r2,r2,5
   2694c:	1000051e 	bne	r2,zero,26964 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   26950:	e0800217 	ldw	r2,8(fp)
   26954:	00c00044 	movi	r3,1
   26958:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   2695c:	0005883a 	mov	r2,zero
   26960:	00013806 	br	26e44 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   26964:	e0fffe03 	ldbu	r3,-8(fp)
   26968:	00bfe004 	movi	r2,-128
   2696c:	1884703a 	and	r2,r3,r2
   26970:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   26974:	e0bfe603 	ldbu	r2,-104(fp)
   26978:	10000626 	beq	r2,zero,26994 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   2697c:	e0bffe03 	ldbu	r2,-8(fp)
   26980:	10801fcc 	andi	r2,r2,127
   26984:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   26988:	00800044 	movi	r2,1
   2698c:	e0bfe405 	stb	r2,-112(fp)
   26990:	00000106 	br	26998 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   26994:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26998:	0005303a 	rdctl	r2,status
   2699c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   269a0:	e0fff617 	ldw	r3,-40(fp)
   269a4:	00bfff84 	movi	r2,-2
   269a8:	1884703a 	and	r2,r3,r2
   269ac:	1001703a 	wrctl	status,r2
  
  return context;
   269b0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   269b4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   269b8:	e0bffe03 	ldbu	r2,-8(fp)
   269bc:	10c00060 	cmpeqi	r3,r2,1
   269c0:	1800921e 	bne	r3,zero,26c0c <OSFlagPend+0x36c>
   269c4:	10c00088 	cmpgei	r3,r2,2
   269c8:	1800021e 	bne	r3,zero,269d4 <OSFlagPend+0x134>
   269cc:	10006126 	beq	r2,zero,26b54 <OSFlagPend+0x2b4>
   269d0:	0000bb06 	br	26cc0 <OSFlagPend+0x420>
   269d4:	10c000a0 	cmpeqi	r3,r2,2
   269d8:	1800031e 	bne	r3,zero,269e8 <OSFlagPend+0x148>
   269dc:	108000e0 	cmpeqi	r2,r2,3
   269e0:	10002f1e 	bne	r2,zero,26aa0 <OSFlagPend+0x200>
   269e4:	0000b606 	br	26cc0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   269e8:	e0bffc17 	ldw	r2,-16(fp)
   269ec:	10c0020b 	ldhu	r3,8(r2)
   269f0:	e0bffd0b 	ldhu	r2,-12(fp)
   269f4:	1884703a 	and	r2,r3,r2
   269f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   269fc:	e0ffe80b 	ldhu	r3,-96(fp)
   26a00:	e0bffd0b 	ldhu	r2,-12(fp)
   26a04:	1880171e 	bne	r3,r2,26a64 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   26a08:	e0bfe403 	ldbu	r2,-112(fp)
   26a0c:	10800058 	cmpnei	r2,r2,1
   26a10:	1000091e 	bne	r2,zero,26a38 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   26a14:	e0bffc17 	ldw	r2,-16(fp)
   26a18:	1080020b 	ldhu	r2,8(r2)
   26a1c:	1007883a 	mov	r3,r2
   26a20:	e0bfe80b 	ldhu	r2,-96(fp)
   26a24:	0084303a 	nor	r2,zero,r2
   26a28:	1884703a 	and	r2,r3,r2
   26a2c:	1007883a 	mov	r3,r2
   26a30:	e0bffc17 	ldw	r2,-16(fp)
   26a34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   26a38:	d0a70517 	ldw	r2,-25580(gp)
   26a3c:	e0ffe80b 	ldhu	r3,-96(fp)
   26a40:	10c00b0d 	sth	r3,44(r2)
   26a44:	e0bfe517 	ldw	r2,-108(fp)
   26a48:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26a4c:	e0bfe717 	ldw	r2,-100(fp)
   26a50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   26a54:	e0800217 	ldw	r2,8(fp)
   26a58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   26a5c:	e0bfe80b 	ldhu	r2,-96(fp)
   26a60:	0000f806 	br	26e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   26a64:	e13ffd0b 	ldhu	r4,-12(fp)
   26a68:	e17ffe03 	ldbu	r5,-8(fp)
   26a6c:	e0bfff0b 	ldhu	r2,-4(fp)
   26a70:	e0fff704 	addi	r3,fp,-36
   26a74:	d8800015 	stw	r2,0(sp)
   26a78:	280f883a 	mov	r7,r5
   26a7c:	200d883a 	mov	r6,r4
   26a80:	180b883a 	mov	r5,r3
   26a84:	e13ffc17 	ldw	r4,-16(fp)
   26a88:	00273100 	call	27310 <OS_FlagBlock>
   26a8c:	e0bfe517 	ldw	r2,-108(fp)
   26a90:	e0bfe915 	stw	r2,-92(fp)
   26a94:	e0bfe917 	ldw	r2,-92(fp)
   26a98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   26a9c:	00009206 	br	26ce8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   26aa0:	e0bffc17 	ldw	r2,-16(fp)
   26aa4:	10c0020b 	ldhu	r3,8(r2)
   26aa8:	e0bffd0b 	ldhu	r2,-12(fp)
   26aac:	1884703a 	and	r2,r3,r2
   26ab0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   26ab4:	e0bfe80b 	ldhu	r2,-96(fp)
   26ab8:	10001726 	beq	r2,zero,26b18 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   26abc:	e0bfe403 	ldbu	r2,-112(fp)
   26ac0:	10800058 	cmpnei	r2,r2,1
   26ac4:	1000091e 	bne	r2,zero,26aec <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   26ac8:	e0bffc17 	ldw	r2,-16(fp)
   26acc:	1080020b 	ldhu	r2,8(r2)
   26ad0:	1007883a 	mov	r3,r2
   26ad4:	e0bfe80b 	ldhu	r2,-96(fp)
   26ad8:	0084303a 	nor	r2,zero,r2
   26adc:	1884703a 	and	r2,r3,r2
   26ae0:	1007883a 	mov	r3,r2
   26ae4:	e0bffc17 	ldw	r2,-16(fp)
   26ae8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   26aec:	d0a70517 	ldw	r2,-25580(gp)
   26af0:	e0ffe80b 	ldhu	r3,-96(fp)
   26af4:	10c00b0d 	sth	r3,44(r2)
   26af8:	e0bfe517 	ldw	r2,-108(fp)
   26afc:	e0bfea15 	stw	r2,-88(fp)
   26b00:	e0bfea17 	ldw	r2,-88(fp)
   26b04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   26b08:	e0800217 	ldw	r2,8(fp)
   26b0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   26b10:	e0bfe80b 	ldhu	r2,-96(fp)
   26b14:	0000cb06 	br	26e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   26b18:	e13ffd0b 	ldhu	r4,-12(fp)
   26b1c:	e17ffe03 	ldbu	r5,-8(fp)
   26b20:	e0bfff0b 	ldhu	r2,-4(fp)
   26b24:	e0fff704 	addi	r3,fp,-36
   26b28:	d8800015 	stw	r2,0(sp)
   26b2c:	280f883a 	mov	r7,r5
   26b30:	200d883a 	mov	r6,r4
   26b34:	180b883a 	mov	r5,r3
   26b38:	e13ffc17 	ldw	r4,-16(fp)
   26b3c:	00273100 	call	27310 <OS_FlagBlock>
   26b40:	e0bfe517 	ldw	r2,-108(fp)
   26b44:	e0bfeb15 	stw	r2,-84(fp)
   26b48:	e0bfeb17 	ldw	r2,-84(fp)
   26b4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   26b50:	00006506 	br	26ce8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   26b54:	e0bffc17 	ldw	r2,-16(fp)
   26b58:	1080020b 	ldhu	r2,8(r2)
   26b5c:	0084303a 	nor	r2,zero,r2
   26b60:	1007883a 	mov	r3,r2
   26b64:	e0bffd0b 	ldhu	r2,-12(fp)
   26b68:	1884703a 	and	r2,r3,r2
   26b6c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   26b70:	e0ffe80b 	ldhu	r3,-96(fp)
   26b74:	e0bffd0b 	ldhu	r2,-12(fp)
   26b78:	1880151e 	bne	r3,r2,26bd0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   26b7c:	e0bfe403 	ldbu	r2,-112(fp)
   26b80:	10800058 	cmpnei	r2,r2,1
   26b84:	1000071e 	bne	r2,zero,26ba4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   26b88:	e0bffc17 	ldw	r2,-16(fp)
   26b8c:	10c0020b 	ldhu	r3,8(r2)
   26b90:	e0bfe80b 	ldhu	r2,-96(fp)
   26b94:	1884b03a 	or	r2,r3,r2
   26b98:	1007883a 	mov	r3,r2
   26b9c:	e0bffc17 	ldw	r2,-16(fp)
   26ba0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   26ba4:	d0a70517 	ldw	r2,-25580(gp)
   26ba8:	e0ffe80b 	ldhu	r3,-96(fp)
   26bac:	10c00b0d 	sth	r3,44(r2)
   26bb0:	e0bfe517 	ldw	r2,-108(fp)
   26bb4:	e0bfec15 	stw	r2,-80(fp)
   26bb8:	e0bfec17 	ldw	r2,-80(fp)
   26bbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   26bc0:	e0800217 	ldw	r2,8(fp)
   26bc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   26bc8:	e0bfe80b 	ldhu	r2,-96(fp)
   26bcc:	00009d06 	br	26e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   26bd0:	e13ffd0b 	ldhu	r4,-12(fp)
   26bd4:	e17ffe03 	ldbu	r5,-8(fp)
   26bd8:	e0bfff0b 	ldhu	r2,-4(fp)
   26bdc:	e0fff704 	addi	r3,fp,-36
   26be0:	d8800015 	stw	r2,0(sp)
   26be4:	280f883a 	mov	r7,r5
   26be8:	200d883a 	mov	r6,r4
   26bec:	180b883a 	mov	r5,r3
   26bf0:	e13ffc17 	ldw	r4,-16(fp)
   26bf4:	00273100 	call	27310 <OS_FlagBlock>
   26bf8:	e0bfe517 	ldw	r2,-108(fp)
   26bfc:	e0bfed15 	stw	r2,-76(fp)
   26c00:	e0bfed17 	ldw	r2,-76(fp)
   26c04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   26c08:	00003706 	br	26ce8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   26c0c:	e0bffc17 	ldw	r2,-16(fp)
   26c10:	1080020b 	ldhu	r2,8(r2)
   26c14:	0084303a 	nor	r2,zero,r2
   26c18:	1007883a 	mov	r3,r2
   26c1c:	e0bffd0b 	ldhu	r2,-12(fp)
   26c20:	1884703a 	and	r2,r3,r2
   26c24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   26c28:	e0bfe80b 	ldhu	r2,-96(fp)
   26c2c:	10001526 	beq	r2,zero,26c84 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   26c30:	e0bfe403 	ldbu	r2,-112(fp)
   26c34:	10800058 	cmpnei	r2,r2,1
   26c38:	1000071e 	bne	r2,zero,26c58 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   26c3c:	e0bffc17 	ldw	r2,-16(fp)
   26c40:	10c0020b 	ldhu	r3,8(r2)
   26c44:	e0bfe80b 	ldhu	r2,-96(fp)
   26c48:	1884b03a 	or	r2,r3,r2
   26c4c:	1007883a 	mov	r3,r2
   26c50:	e0bffc17 	ldw	r2,-16(fp)
   26c54:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   26c58:	d0a70517 	ldw	r2,-25580(gp)
   26c5c:	e0ffe80b 	ldhu	r3,-96(fp)
   26c60:	10c00b0d 	sth	r3,44(r2)
   26c64:	e0bfe517 	ldw	r2,-108(fp)
   26c68:	e0bfee15 	stw	r2,-72(fp)
   26c6c:	e0bfee17 	ldw	r2,-72(fp)
   26c70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   26c74:	e0800217 	ldw	r2,8(fp)
   26c78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   26c7c:	e0bfe80b 	ldhu	r2,-96(fp)
   26c80:	00007006 	br	26e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   26c84:	e13ffd0b 	ldhu	r4,-12(fp)
   26c88:	e17ffe03 	ldbu	r5,-8(fp)
   26c8c:	e0bfff0b 	ldhu	r2,-4(fp)
   26c90:	e0fff704 	addi	r3,fp,-36
   26c94:	d8800015 	stw	r2,0(sp)
   26c98:	280f883a 	mov	r7,r5
   26c9c:	200d883a 	mov	r6,r4
   26ca0:	180b883a 	mov	r5,r3
   26ca4:	e13ffc17 	ldw	r4,-16(fp)
   26ca8:	00273100 	call	27310 <OS_FlagBlock>
   26cac:	e0bfe517 	ldw	r2,-108(fp)
   26cb0:	e0bfef15 	stw	r2,-68(fp)
   26cb4:	e0bfef17 	ldw	r2,-68(fp)
   26cb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   26cbc:	00000a06 	br	26ce8 <OSFlagPend+0x448>
   26cc0:	e0bfe517 	ldw	r2,-108(fp)
   26cc4:	e0bff015 	stw	r2,-64(fp)
   26cc8:	e0bff017 	ldw	r2,-64(fp)
   26ccc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   26cd0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   26cd4:	e0800217 	ldw	r2,8(fp)
   26cd8:	00c01bc4 	movi	r3,111
   26cdc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   26ce0:	e0bfe80b 	ldhu	r2,-96(fp)
   26ce4:	00005706 	br	26e44 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   26ce8:	00257700 	call	25770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26cec:	0005303a 	rdctl	r2,status
   26cf0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26cf4:	e0fff117 	ldw	r3,-60(fp)
   26cf8:	00bfff84 	movi	r2,-2
   26cfc:	1884703a 	and	r2,r3,r2
   26d00:	1001703a 	wrctl	status,r2
  
  return context;
   26d04:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   26d08:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   26d0c:	d0a70517 	ldw	r2,-25580(gp)
   26d10:	10800c43 	ldbu	r2,49(r2)
   26d14:	10803fcc 	andi	r2,r2,255
   26d18:	10001c26 	beq	r2,zero,26d8c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   26d1c:	d0a70517 	ldw	r2,-25580(gp)
   26d20:	10800c43 	ldbu	r2,49(r2)
   26d24:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   26d28:	d0a70517 	ldw	r2,-25580(gp)
   26d2c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   26d30:	e0bff704 	addi	r2,fp,-36
   26d34:	1009883a 	mov	r4,r2
   26d38:	00276440 	call	27644 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   26d3c:	d0a70517 	ldw	r2,-25580(gp)
   26d40:	10000c05 	stb	zero,48(r2)
   26d44:	e0bfe517 	ldw	r2,-108(fp)
   26d48:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26d4c:	e0bff217 	ldw	r2,-56(fp)
   26d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   26d54:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   26d58:	e0bff303 	ldbu	r2,-52(fp)
   26d5c:	108000a0 	cmpeqi	r2,r2,2
   26d60:	10000426 	beq	r2,zero,26d74 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   26d64:	e0800217 	ldw	r2,8(fp)
   26d68:	00c00384 	movi	r3,14
   26d6c:	10c00005 	stb	r3,0(r2)
                 break;
   26d70:	00000406 	br	26d84 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   26d74:	e0800217 	ldw	r2,8(fp)
   26d78:	00c00284 	movi	r3,10
   26d7c:	10c00005 	stb	r3,0(r2)
                 break;
   26d80:	0001883a 	nop
        }
        return (flags_rdy);
   26d84:	e0bfe80b 	ldhu	r2,-96(fp)
   26d88:	00002e06 	br	26e44 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   26d8c:	d0a70517 	ldw	r2,-25580(gp)
   26d90:	10800b0b 	ldhu	r2,44(r2)
   26d94:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   26d98:	e0bfe403 	ldbu	r2,-112(fp)
   26d9c:	10800058 	cmpnei	r2,r2,1
   26da0:	1000211e 	bne	r2,zero,26e28 <OSFlagPend+0x588>
        switch (wait_type) {
   26da4:	e0bffe03 	ldbu	r2,-8(fp)
   26da8:	10001616 	blt	r2,zero,26e04 <OSFlagPend+0x564>
   26dac:	10c00090 	cmplti	r3,r2,2
   26db0:	18000c1e 	bne	r3,zero,26de4 <OSFlagPend+0x544>
   26db4:	10800108 	cmpgei	r2,r2,4
   26db8:	1000121e 	bne	r2,zero,26e04 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   26dbc:	e0bffc17 	ldw	r2,-16(fp)
   26dc0:	1080020b 	ldhu	r2,8(r2)
   26dc4:	1007883a 	mov	r3,r2
   26dc8:	e0bfe80b 	ldhu	r2,-96(fp)
   26dcc:	0084303a 	nor	r2,zero,r2
   26dd0:	1884703a 	and	r2,r3,r2
   26dd4:	1007883a 	mov	r3,r2
   26dd8:	e0bffc17 	ldw	r2,-16(fp)
   26ddc:	10c0020d 	sth	r3,8(r2)
                 break;
   26de0:	00001106 	br	26e28 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   26de4:	e0bffc17 	ldw	r2,-16(fp)
   26de8:	10c0020b 	ldhu	r3,8(r2)
   26dec:	e0bfe80b 	ldhu	r2,-96(fp)
   26df0:	1884b03a 	or	r2,r3,r2
   26df4:	1007883a 	mov	r3,r2
   26df8:	e0bffc17 	ldw	r2,-16(fp)
   26dfc:	10c0020d 	sth	r3,8(r2)
                 break;
   26e00:	00000906 	br	26e28 <OSFlagPend+0x588>
   26e04:	e0bfe517 	ldw	r2,-108(fp)
   26e08:	e0bff415 	stw	r2,-48(fp)
   26e0c:	e0bff417 	ldw	r2,-48(fp)
   26e10:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   26e14:	e0800217 	ldw	r2,8(fp)
   26e18:	00c01bc4 	movi	r3,111
   26e1c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   26e20:	0005883a 	mov	r2,zero
   26e24:	00000706 	br	26e44 <OSFlagPend+0x5a4>
   26e28:	e0bfe517 	ldw	r2,-108(fp)
   26e2c:	e0bff515 	stw	r2,-44(fp)
   26e30:	e0bff517 	ldw	r2,-44(fp)
   26e34:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   26e38:	e0800217 	ldw	r2,8(fp)
   26e3c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   26e40:	e0bfe80b 	ldhu	r2,-96(fp)
}
   26e44:	e037883a 	mov	sp,fp
   26e48:	dfc00117 	ldw	ra,4(sp)
   26e4c:	df000017 	ldw	fp,0(sp)
   26e50:	dec00204 	addi	sp,sp,8
   26e54:	f800283a 	ret

00026e58 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   26e58:	defffb04 	addi	sp,sp,-20
   26e5c:	df000415 	stw	fp,16(sp)
   26e60:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   26e64:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26e68:	0005303a 	rdctl	r2,status
   26e6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26e70:	e0fffe17 	ldw	r3,-8(fp)
   26e74:	00bfff84 	movi	r2,-2
   26e78:	1884703a 	and	r2,r3,r2
   26e7c:	1001703a 	wrctl	status,r2
  
  return context;
   26e80:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   26e84:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   26e88:	d0a70517 	ldw	r2,-25580(gp)
   26e8c:	10800b0b 	ldhu	r2,44(r2)
   26e90:	e0bffd0d 	sth	r2,-12(fp)
   26e94:	e0bffc17 	ldw	r2,-16(fp)
   26e98:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26e9c:	e0bfff17 	ldw	r2,-4(fp)
   26ea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   26ea4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   26ea8:	e037883a 	mov	sp,fp
   26eac:	df000017 	ldw	fp,0(sp)
   26eb0:	dec00104 	addi	sp,sp,4
   26eb4:	f800283a 	ret

00026eb8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   26eb8:	deffef04 	addi	sp,sp,-68
   26ebc:	dfc01015 	stw	ra,64(sp)
   26ec0:	df000f15 	stw	fp,60(sp)
   26ec4:	df000f04 	addi	fp,sp,60
   26ec8:	e13ffc15 	stw	r4,-16(fp)
   26ecc:	2807883a 	mov	r3,r5
   26ed0:	3005883a 	mov	r2,r6
   26ed4:	e1ffff15 	stw	r7,-4(fp)
   26ed8:	e0fffd0d 	sth	r3,-12(fp)
   26edc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   26ee0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   26ee4:	e0bfff17 	ldw	r2,-4(fp)
   26ee8:	1000021e 	bne	r2,zero,26ef4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   26eec:	0005883a 	mov	r2,zero
   26ef0:	0000d106 	br	27238 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   26ef4:	e0bffc17 	ldw	r2,-16(fp)
   26ef8:	1000051e 	bne	r2,zero,26f10 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   26efc:	e0bfff17 	ldw	r2,-4(fp)
   26f00:	00c01b84 	movi	r3,110
   26f04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26f08:	0005883a 	mov	r2,zero
   26f0c:	0000ca06 	br	27238 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   26f10:	e0bffc17 	ldw	r2,-16(fp)
   26f14:	10800003 	ldbu	r2,0(r2)
   26f18:	10803fcc 	andi	r2,r2,255
   26f1c:	10800160 	cmpeqi	r2,r2,5
   26f20:	1000051e 	bne	r2,zero,26f38 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   26f24:	e0bfff17 	ldw	r2,-4(fp)
   26f28:	00c00044 	movi	r3,1
   26f2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   26f30:	0005883a 	mov	r2,zero
   26f34:	0000c006 	br	27238 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26f38:	0005303a 	rdctl	r2,status
   26f3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26f40:	e0fffb17 	ldw	r3,-20(fp)
   26f44:	00bfff84 	movi	r2,-2
   26f48:	1884703a 	and	r2,r3,r2
   26f4c:	1001703a 	wrctl	status,r2
  
  return context;
   26f50:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   26f54:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   26f58:	e0bffe03 	ldbu	r2,-8(fp)
   26f5c:	10000326 	beq	r2,zero,26f6c <OSFlagPost+0xb4>
   26f60:	10800060 	cmpeqi	r2,r2,1
   26f64:	10000b1e 	bne	r2,zero,26f94 <OSFlagPost+0xdc>
   26f68:	00001206 	br	26fb4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   26f6c:	e0bffc17 	ldw	r2,-16(fp)
   26f70:	1080020b 	ldhu	r2,8(r2)
   26f74:	1007883a 	mov	r3,r2
   26f78:	e0bffd0b 	ldhu	r2,-12(fp)
   26f7c:	0084303a 	nor	r2,zero,r2
   26f80:	1884703a 	and	r2,r3,r2
   26f84:	1007883a 	mov	r3,r2
   26f88:	e0bffc17 	ldw	r2,-16(fp)
   26f8c:	10c0020d 	sth	r3,8(r2)
             break;
   26f90:	00001106 	br	26fd8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   26f94:	e0bffc17 	ldw	r2,-16(fp)
   26f98:	10c0020b 	ldhu	r3,8(r2)
   26f9c:	e0bffd0b 	ldhu	r2,-12(fp)
   26fa0:	1884b03a 	or	r2,r3,r2
   26fa4:	1007883a 	mov	r3,r2
   26fa8:	e0bffc17 	ldw	r2,-16(fp)
   26fac:	10c0020d 	sth	r3,8(r2)
             break;
   26fb0:	00000906 	br	26fd8 <OSFlagPost+0x120>
   26fb4:	e0bff317 	ldw	r2,-52(fp)
   26fb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26fbc:	e0bff417 	ldw	r2,-48(fp)
   26fc0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   26fc4:	e0bfff17 	ldw	r2,-4(fp)
   26fc8:	00c01c44 	movi	r3,113
   26fcc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   26fd0:	0005883a 	mov	r2,zero
   26fd4:	00009806 	br	27238 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   26fd8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   26fdc:	e0bffc17 	ldw	r2,-16(fp)
   26fe0:	10800117 	ldw	r2,4(r2)
   26fe4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   26fe8:	00007706 	br	271c8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   26fec:	e0bff117 	ldw	r2,-60(fp)
   26ff0:	10800483 	ldbu	r2,18(r2)
   26ff4:	10803fcc 	andi	r2,r2,255
   26ff8:	10c00060 	cmpeqi	r3,r2,1
   26ffc:	18004a1e 	bne	r3,zero,27128 <OSFlagPost+0x270>
   27000:	10c00088 	cmpgei	r3,r2,2
   27004:	1800021e 	bne	r3,zero,27010 <OSFlagPost+0x158>
   27008:	10002f26 	beq	r2,zero,270c8 <OSFlagPost+0x210>
   2700c:	00005b06 	br	2717c <OSFlagPost+0x2c4>
   27010:	10c000a0 	cmpeqi	r3,r2,2
   27014:	1800031e 	bne	r3,zero,27024 <OSFlagPost+0x16c>
   27018:	108000e0 	cmpeqi	r2,r2,3
   2701c:	1000171e 	bne	r2,zero,2707c <OSFlagPost+0x1c4>
   27020:	00005606 	br	2717c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   27024:	e0bffc17 	ldw	r2,-16(fp)
   27028:	10c0020b 	ldhu	r3,8(r2)
   2702c:	e0bff117 	ldw	r2,-60(fp)
   27030:	1080040b 	ldhu	r2,16(r2)
   27034:	1884703a 	and	r2,r3,r2
   27038:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   2703c:	e0bff117 	ldw	r2,-60(fp)
   27040:	1080040b 	ldhu	r2,16(r2)
   27044:	10ffffcc 	andi	r3,r2,65535
   27048:	e0bff60b 	ldhu	r2,-40(fp)
   2704c:	1880541e 	bne	r3,r2,271a0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   27050:	e0bff60b 	ldhu	r2,-40(fp)
   27054:	100b883a 	mov	r5,r2
   27058:	e13ff117 	ldw	r4,-60(fp)
   2705c:	00275500 	call	27550 <OS_FlagTaskRdy>
   27060:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   27064:	e0bff683 	ldbu	r2,-38(fp)
   27068:	10800058 	cmpnei	r2,r2,1
   2706c:	10004c1e 	bne	r2,zero,271a0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   27070:	00800044 	movi	r2,1
   27074:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   27078:	00004906 	br	271a0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   2707c:	e0bffc17 	ldw	r2,-16(fp)
   27080:	10c0020b 	ldhu	r3,8(r2)
   27084:	e0bff117 	ldw	r2,-60(fp)
   27088:	1080040b 	ldhu	r2,16(r2)
   2708c:	1884703a 	and	r2,r3,r2
   27090:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   27094:	e0bff60b 	ldhu	r2,-40(fp)
   27098:	10004326 	beq	r2,zero,271a8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   2709c:	e0bff60b 	ldhu	r2,-40(fp)
   270a0:	100b883a 	mov	r5,r2
   270a4:	e13ff117 	ldw	r4,-60(fp)
   270a8:	00275500 	call	27550 <OS_FlagTaskRdy>
   270ac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   270b0:	e0bff683 	ldbu	r2,-38(fp)
   270b4:	10800058 	cmpnei	r2,r2,1
   270b8:	10003b1e 	bne	r2,zero,271a8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   270bc:	00800044 	movi	r2,1
   270c0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   270c4:	00003806 	br	271a8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   270c8:	e0bffc17 	ldw	r2,-16(fp)
   270cc:	1080020b 	ldhu	r2,8(r2)
   270d0:	0084303a 	nor	r2,zero,r2
   270d4:	1007883a 	mov	r3,r2
   270d8:	e0bff117 	ldw	r2,-60(fp)
   270dc:	1080040b 	ldhu	r2,16(r2)
   270e0:	1884703a 	and	r2,r3,r2
   270e4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   270e8:	e0bff117 	ldw	r2,-60(fp)
   270ec:	1080040b 	ldhu	r2,16(r2)
   270f0:	10ffffcc 	andi	r3,r2,65535
   270f4:	e0bff60b 	ldhu	r2,-40(fp)
   270f8:	18802d1e 	bne	r3,r2,271b0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   270fc:	e0bff60b 	ldhu	r2,-40(fp)
   27100:	100b883a 	mov	r5,r2
   27104:	e13ff117 	ldw	r4,-60(fp)
   27108:	00275500 	call	27550 <OS_FlagTaskRdy>
   2710c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   27110:	e0bff683 	ldbu	r2,-38(fp)
   27114:	10800058 	cmpnei	r2,r2,1
   27118:	1000251e 	bne	r2,zero,271b0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   2711c:	00800044 	movi	r2,1
   27120:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   27124:	00002206 	br	271b0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   27128:	e0bffc17 	ldw	r2,-16(fp)
   2712c:	1080020b 	ldhu	r2,8(r2)
   27130:	0084303a 	nor	r2,zero,r2
   27134:	1007883a 	mov	r3,r2
   27138:	e0bff117 	ldw	r2,-60(fp)
   2713c:	1080040b 	ldhu	r2,16(r2)
   27140:	1884703a 	and	r2,r3,r2
   27144:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   27148:	e0bff60b 	ldhu	r2,-40(fp)
   2714c:	10001a26 	beq	r2,zero,271b8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   27150:	e0bff60b 	ldhu	r2,-40(fp)
   27154:	100b883a 	mov	r5,r2
   27158:	e13ff117 	ldw	r4,-60(fp)
   2715c:	00275500 	call	27550 <OS_FlagTaskRdy>
   27160:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   27164:	e0bff683 	ldbu	r2,-38(fp)
   27168:	10800058 	cmpnei	r2,r2,1
   2716c:	1000121e 	bne	r2,zero,271b8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   27170:	00800044 	movi	r2,1
   27174:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   27178:	00000f06 	br	271b8 <OSFlagPost+0x300>
   2717c:	e0bff317 	ldw	r2,-52(fp)
   27180:	e0bff515 	stw	r2,-44(fp)
   27184:	e0bff517 	ldw	r2,-44(fp)
   27188:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   2718c:	e0bfff17 	ldw	r2,-4(fp)
   27190:	00c01bc4 	movi	r3,111
   27194:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   27198:	0005883a 	mov	r2,zero
   2719c:	00002606 	br	27238 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   271a0:	0001883a 	nop
   271a4:	00000506 	br	271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   271a8:	0001883a 	nop
   271ac:	00000306 	br	271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   271b0:	0001883a 	nop
   271b4:	00000106 	br	271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   271b8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   271bc:	e0bff117 	ldw	r2,-60(fp)
   271c0:	10800017 	ldw	r2,0(r2)
   271c4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   271c8:	e0bff117 	ldw	r2,-60(fp)
   271cc:	103f871e 	bne	r2,zero,26fec <__alt_data_end+0xfffe7bec>
   271d0:	e0bff317 	ldw	r2,-52(fp)
   271d4:	e0bff715 	stw	r2,-36(fp)
   271d8:	e0bff717 	ldw	r2,-36(fp)
   271dc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   271e0:	e0bff203 	ldbu	r2,-56(fp)
   271e4:	10800058 	cmpnei	r2,r2,1
   271e8:	1000011e 	bne	r2,zero,271f0 <OSFlagPost+0x338>
        OS_Sched();
   271ec:	00257700 	call	25770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   271f0:	0005303a 	rdctl	r2,status
   271f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   271f8:	e0fffa17 	ldw	r3,-24(fp)
   271fc:	00bfff84 	movi	r2,-2
   27200:	1884703a 	and	r2,r3,r2
   27204:	1001703a 	wrctl	status,r2
  
  return context;
   27208:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   2720c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   27210:	e0bffc17 	ldw	r2,-16(fp)
   27214:	1080020b 	ldhu	r2,8(r2)
   27218:	e0bff90d 	sth	r2,-28(fp)
   2721c:	e0bff317 	ldw	r2,-52(fp)
   27220:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27224:	e0bff817 	ldw	r2,-32(fp)
   27228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   2722c:	e0bfff17 	ldw	r2,-4(fp)
   27230:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   27234:	e0bff90b 	ldhu	r2,-28(fp)
}
   27238:	e037883a 	mov	sp,fp
   2723c:	dfc00117 	ldw	ra,4(sp)
   27240:	df000017 	ldw	fp,0(sp)
   27244:	dec00204 	addi	sp,sp,8
   27248:	f800283a 	ret

0002724c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   2724c:	defff904 	addi	sp,sp,-28
   27250:	df000615 	stw	fp,24(sp)
   27254:	df000604 	addi	fp,sp,24
   27258:	e13ffe15 	stw	r4,-8(fp)
   2725c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   27260:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   27264:	e0bfff17 	ldw	r2,-4(fp)
   27268:	1000021e 	bne	r2,zero,27274 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   2726c:	0005883a 	mov	r2,zero
   27270:	00002306 	br	27300 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   27274:	e0bffe17 	ldw	r2,-8(fp)
   27278:	1000051e 	bne	r2,zero,27290 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   2727c:	e0bfff17 	ldw	r2,-4(fp)
   27280:	00c01b84 	movi	r3,110
   27284:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   27288:	0005883a 	mov	r2,zero
   2728c:	00001c06 	br	27300 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   27290:	e0bffe17 	ldw	r2,-8(fp)
   27294:	10800003 	ldbu	r2,0(r2)
   27298:	10803fcc 	andi	r2,r2,255
   2729c:	10800160 	cmpeqi	r2,r2,5
   272a0:	1000051e 	bne	r2,zero,272b8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   272a4:	e0bfff17 	ldw	r2,-4(fp)
   272a8:	00c00044 	movi	r3,1
   272ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   272b0:	0005883a 	mov	r2,zero
   272b4:	00001206 	br	27300 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   272b8:	0005303a 	rdctl	r2,status
   272bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   272c0:	e0fffc17 	ldw	r3,-16(fp)
   272c4:	00bfff84 	movi	r2,-2
   272c8:	1884703a 	and	r2,r3,r2
   272cc:	1001703a 	wrctl	status,r2
  
  return context;
   272d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   272d4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   272d8:	e0bffe17 	ldw	r2,-8(fp)
   272dc:	1080020b 	ldhu	r2,8(r2)
   272e0:	e0bffb0d 	sth	r2,-20(fp)
   272e4:	e0bffa17 	ldw	r2,-24(fp)
   272e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   272ec:	e0bffd17 	ldw	r2,-12(fp)
   272f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   272f4:	e0bfff17 	ldw	r2,-4(fp)
   272f8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   272fc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   27300:	e037883a 	mov	sp,fp
   27304:	df000017 	ldw	fp,0(sp)
   27308:	dec00104 	addi	sp,sp,4
   2730c:	f800283a 	ret

00027310 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   27310:	defff804 	addi	sp,sp,-32
   27314:	df000715 	stw	fp,28(sp)
   27318:	df000704 	addi	fp,sp,28
   2731c:	e13ffb15 	stw	r4,-20(fp)
   27320:	e17ffc15 	stw	r5,-16(fp)
   27324:	3009883a 	mov	r4,r6
   27328:	3807883a 	mov	r3,r7
   2732c:	e0800117 	ldw	r2,4(fp)
   27330:	e13ffd0d 	sth	r4,-12(fp)
   27334:	e0fffe05 	stb	r3,-8(fp)
   27338:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   2733c:	d0a70517 	ldw	r2,-25580(gp)
   27340:	d0e70517 	ldw	r3,-25580(gp)
   27344:	18c00c03 	ldbu	r3,48(r3)
   27348:	18c00814 	ori	r3,r3,32
   2734c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   27350:	d0a70517 	ldw	r2,-25580(gp)
   27354:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   27358:	d0a70517 	ldw	r2,-25580(gp)
   2735c:	e0ffff0b 	ldhu	r3,-4(fp)
   27360:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   27364:	d0a70517 	ldw	r2,-25580(gp)
   27368:	e0fffc17 	ldw	r3,-16(fp)
   2736c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   27370:	e0bffc17 	ldw	r2,-16(fp)
   27374:	e0fffd0b 	ldhu	r3,-12(fp)
   27378:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   2737c:	e0bffc17 	ldw	r2,-16(fp)
   27380:	e0fffe03 	ldbu	r3,-8(fp)
   27384:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   27388:	d0e70517 	ldw	r3,-25580(gp)
   2738c:	e0bffc17 	ldw	r2,-16(fp)
   27390:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   27394:	e0bffb17 	ldw	r2,-20(fp)
   27398:	10c00117 	ldw	r3,4(r2)
   2739c:	e0bffc17 	ldw	r2,-16(fp)
   273a0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   273a4:	e0bffc17 	ldw	r2,-16(fp)
   273a8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   273ac:	e0bffc17 	ldw	r2,-16(fp)
   273b0:	e0fffb17 	ldw	r3,-20(fp)
   273b4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   273b8:	e0bffb17 	ldw	r2,-20(fp)
   273bc:	10800117 	ldw	r2,4(r2)
   273c0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   273c4:	e0bff917 	ldw	r2,-28(fp)
   273c8:	10000326 	beq	r2,zero,273d8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   273cc:	e0bff917 	ldw	r2,-28(fp)
   273d0:	e0fffc17 	ldw	r3,-16(fp)
   273d4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   273d8:	e0bffb17 	ldw	r2,-20(fp)
   273dc:	e0fffc17 	ldw	r3,-16(fp)
   273e0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   273e4:	d0a70517 	ldw	r2,-25580(gp)
   273e8:	10800d03 	ldbu	r2,52(r2)
   273ec:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   273f0:	e0fffa03 	ldbu	r3,-24(fp)
   273f4:	e13ffa03 	ldbu	r4,-24(fp)
   273f8:	d0a70244 	addi	r2,gp,-25591
   273fc:	2085883a 	add	r2,r4,r2
   27400:	10800003 	ldbu	r2,0(r2)
   27404:	1009883a 	mov	r4,r2
   27408:	d0a70517 	ldw	r2,-25580(gp)
   2740c:	10800d43 	ldbu	r2,53(r2)
   27410:	0084303a 	nor	r2,zero,r2
   27414:	2084703a 	and	r2,r4,r2
   27418:	1009883a 	mov	r4,r2
   2741c:	d0a70244 	addi	r2,gp,-25591
   27420:	1885883a 	add	r2,r3,r2
   27424:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   27428:	e0fffa03 	ldbu	r3,-24(fp)
   2742c:	d0a70244 	addi	r2,gp,-25591
   27430:	1885883a 	add	r2,r3,r2
   27434:	10800003 	ldbu	r2,0(r2)
   27438:	10803fcc 	andi	r2,r2,255
   2743c:	1000071e 	bne	r2,zero,2745c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   27440:	d0a70517 	ldw	r2,-25580(gp)
   27444:	10800d83 	ldbu	r2,54(r2)
   27448:	0084303a 	nor	r2,zero,r2
   2744c:	1007883a 	mov	r3,r2
   27450:	d0a70203 	ldbu	r2,-25592(gp)
   27454:	1884703a 	and	r2,r3,r2
   27458:	d0a70205 	stb	r2,-25592(gp)
    }
}
   2745c:	0001883a 	nop
   27460:	e037883a 	mov	sp,fp
   27464:	df000017 	ldw	fp,0(sp)
   27468:	dec00104 	addi	sp,sp,4
   2746c:	f800283a 	ret

00027470 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   27470:	defffb04 	addi	sp,sp,-20
   27474:	dfc00415 	stw	ra,16(sp)
   27478:	df000315 	stw	fp,12(sp)
   2747c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   27480:	0140dc04 	movi	r5,880
   27484:	010000f4 	movhi	r4,3
   27488:	2114a804 	addi	r4,r4,21152
   2748c:	00256b40 	call	256b4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   27490:	008000f4 	movhi	r2,3
   27494:	1094a804 	addi	r2,r2,21152
   27498:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   2749c:	008000f4 	movhi	r2,3
   274a0:	1094b304 	addi	r2,r2,21196
   274a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   274a8:	e03ffd0d 	sth	zero,-12(fp)
   274ac:	00001306 	br	274fc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   274b0:	e0bffe17 	ldw	r2,-8(fp)
   274b4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   274b8:	e0bffe17 	ldw	r2,-8(fp)
   274bc:	e0ffff17 	ldw	r3,-4(fp)
   274c0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   274c4:	e0bffe17 	ldw	r2,-8(fp)
   274c8:	00c00fc4 	movi	r3,63
   274cc:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   274d0:	e0bffe17 	ldw	r2,-8(fp)
   274d4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   274d8:	e0bffe17 	ldw	r2,-8(fp)
   274dc:	10800b04 	addi	r2,r2,44
   274e0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   274e4:	e0bfff17 	ldw	r2,-4(fp)
   274e8:	10800b04 	addi	r2,r2,44
   274ec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   274f0:	e0bffd0b 	ldhu	r2,-12(fp)
   274f4:	10800044 	addi	r2,r2,1
   274f8:	e0bffd0d 	sth	r2,-12(fp)
   274fc:	e0bffd0b 	ldhu	r2,-12(fp)
   27500:	108004f0 	cmpltui	r2,r2,19
   27504:	103fea1e 	bne	r2,zero,274b0 <__alt_data_end+0xfffe80b0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   27508:	e0bffe17 	ldw	r2,-8(fp)
   2750c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   27510:	e0bffe17 	ldw	r2,-8(fp)
   27514:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   27518:	e0bffe17 	ldw	r2,-8(fp)
   2751c:	00c00fc4 	movi	r3,63
   27520:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   27524:	e0bffe17 	ldw	r2,-8(fp)
   27528:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   2752c:	008000f4 	movhi	r2,3
   27530:	1094a804 	addi	r2,r2,21152
   27534:	d0a70715 	stw	r2,-25572(gp)
#endif
}
   27538:	0001883a 	nop
   2753c:	e037883a 	mov	sp,fp
   27540:	dfc00117 	ldw	ra,4(sp)
   27544:	df000017 	ldw	fp,0(sp)
   27548:	dec00204 	addi	sp,sp,8
   2754c:	f800283a 	ret

00027550 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   27550:	defffa04 	addi	sp,sp,-24
   27554:	dfc00515 	stw	ra,20(sp)
   27558:	df000415 	stw	fp,16(sp)
   2755c:	df000404 	addi	fp,sp,16
   27560:	e13ffe15 	stw	r4,-8(fp)
   27564:	2805883a 	mov	r2,r5
   27568:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   2756c:	e0bffe17 	ldw	r2,-8(fp)
   27570:	10800217 	ldw	r2,8(r2)
   27574:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   27578:	e0bffd17 	ldw	r2,-12(fp)
   2757c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   27580:	e0bffd17 	ldw	r2,-12(fp)
   27584:	e0ffff0b 	ldhu	r3,-4(fp)
   27588:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   2758c:	e0bffd17 	ldw	r2,-12(fp)
   27590:	10c00c03 	ldbu	r3,48(r2)
   27594:	00bff7c4 	movi	r2,-33
   27598:	1884703a 	and	r2,r3,r2
   2759c:	1007883a 	mov	r3,r2
   275a0:	e0bffd17 	ldw	r2,-12(fp)
   275a4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   275a8:	e0bffd17 	ldw	r2,-12(fp)
   275ac:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   275b0:	e0bffd17 	ldw	r2,-12(fp)
   275b4:	10800c03 	ldbu	r2,48(r2)
   275b8:	10803fcc 	andi	r2,r2,255
   275bc:	1000181e 	bne	r2,zero,27620 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   275c0:	e0bffd17 	ldw	r2,-12(fp)
   275c4:	10c00d83 	ldbu	r3,54(r2)
   275c8:	d0a70203 	ldbu	r2,-25592(gp)
   275cc:	1884b03a 	or	r2,r3,r2
   275d0:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   275d4:	e0bffd17 	ldw	r2,-12(fp)
   275d8:	10800d03 	ldbu	r2,52(r2)
   275dc:	10c03fcc 	andi	r3,r2,255
   275e0:	e0bffd17 	ldw	r2,-12(fp)
   275e4:	10800d03 	ldbu	r2,52(r2)
   275e8:	11003fcc 	andi	r4,r2,255
   275ec:	d0a70244 	addi	r2,gp,-25591
   275f0:	2085883a 	add	r2,r4,r2
   275f4:	11000003 	ldbu	r4,0(r2)
   275f8:	e0bffd17 	ldw	r2,-12(fp)
   275fc:	10800d43 	ldbu	r2,53(r2)
   27600:	2084b03a 	or	r2,r4,r2
   27604:	1009883a 	mov	r4,r2
   27608:	d0a70244 	addi	r2,gp,-25591
   2760c:	1885883a 	add	r2,r3,r2
   27610:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   27614:	00800044 	movi	r2,1
   27618:	e0bffc05 	stb	r2,-16(fp)
   2761c:	00000106 	br	27624 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   27620:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   27624:	e13ffe17 	ldw	r4,-8(fp)
   27628:	00276440 	call	27644 <OS_FlagUnlink>
    return (sched);
   2762c:	e0bffc03 	ldbu	r2,-16(fp)
}
   27630:	e037883a 	mov	sp,fp
   27634:	dfc00117 	ldw	ra,4(sp)
   27638:	df000017 	ldw	fp,0(sp)
   2763c:	dec00204 	addi	sp,sp,8
   27640:	f800283a 	ret

00027644 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   27644:	defffa04 	addi	sp,sp,-24
   27648:	df000515 	stw	fp,20(sp)
   2764c:	df000504 	addi	fp,sp,20
   27650:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   27654:	e0bfff17 	ldw	r2,-4(fp)
   27658:	10800117 	ldw	r2,4(r2)
   2765c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   27660:	e0bfff17 	ldw	r2,-4(fp)
   27664:	10800017 	ldw	r2,0(r2)
   27668:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   2766c:	e0bffb17 	ldw	r2,-20(fp)
   27670:	10000b1e 	bne	r2,zero,276a0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   27674:	e0bfff17 	ldw	r2,-4(fp)
   27678:	10800317 	ldw	r2,12(r2)
   2767c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   27680:	e0bffd17 	ldw	r2,-12(fp)
   27684:	e0fffc17 	ldw	r3,-16(fp)
   27688:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   2768c:	e0bffc17 	ldw	r2,-16(fp)
   27690:	10000b26 	beq	r2,zero,276c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   27694:	e0bffc17 	ldw	r2,-16(fp)
   27698:	10000115 	stw	zero,4(r2)
   2769c:	00000806 	br	276c0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   276a0:	e0bffb17 	ldw	r2,-20(fp)
   276a4:	e0fffc17 	ldw	r3,-16(fp)
   276a8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   276ac:	e0bffc17 	ldw	r2,-16(fp)
   276b0:	10000326 	beq	r2,zero,276c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   276b4:	e0bffc17 	ldw	r2,-16(fp)
   276b8:	e0fffb17 	ldw	r3,-20(fp)
   276bc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   276c0:	e0bfff17 	ldw	r2,-4(fp)
   276c4:	10800217 	ldw	r2,8(r2)
   276c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   276cc:	e0bffe17 	ldw	r2,-8(fp)
   276d0:	10000a15 	stw	zero,40(r2)
#endif
}
   276d4:	0001883a 	nop
   276d8:	e037883a 	mov	sp,fp
   276dc:	df000017 	ldw	fp,0(sp)
   276e0:	dec00104 	addi	sp,sp,4
   276e4:	f800283a 	ret

000276e8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   276e8:	defff404 	addi	sp,sp,-48
   276ec:	df000b15 	stw	fp,44(sp)
   276f0:	df000b04 	addi	fp,sp,44
   276f4:	e13ffc15 	stw	r4,-16(fp)
   276f8:	e17ffd15 	stw	r5,-12(fp)
   276fc:	e1bffe15 	stw	r6,-8(fp)
   27700:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   27704:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   27708:	e0bfff17 	ldw	r2,-4(fp)
   2770c:	1000021e 	bne	r2,zero,27718 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   27710:	0005883a 	mov	r2,zero
   27714:	00006506 	br	278ac <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   27718:	e0bffc17 	ldw	r2,-16(fp)
   2771c:	1000051e 	bne	r2,zero,27734 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   27720:	e0bfff17 	ldw	r2,-4(fp)
   27724:	00c01884 	movi	r3,98
   27728:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   2772c:	0005883a 	mov	r2,zero
   27730:	00005e06 	br	278ac <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   27734:	e0bffc17 	ldw	r2,-16(fp)
   27738:	108000cc 	andi	r2,r2,3
   2773c:	10000526 	beq	r2,zero,27754 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   27740:	e0bfff17 	ldw	r2,-4(fp)
   27744:	00c01884 	movi	r3,98
   27748:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   2774c:	0005883a 	mov	r2,zero
   27750:	00005606 	br	278ac <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   27754:	e0bffd17 	ldw	r2,-12(fp)
   27758:	108000a8 	cmpgeui	r2,r2,2
   2775c:	1000051e 	bne	r2,zero,27774 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   27760:	e0bfff17 	ldw	r2,-4(fp)
   27764:	00c016c4 	movi	r3,91
   27768:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   2776c:	0005883a 	mov	r2,zero
   27770:	00004e06 	br	278ac <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   27774:	e0bffe17 	ldw	r2,-8(fp)
   27778:	10800128 	cmpgeui	r2,r2,4
   2777c:	1000051e 	bne	r2,zero,27794 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   27780:	e0bfff17 	ldw	r2,-4(fp)
   27784:	00c01704 	movi	r3,92
   27788:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   2778c:	0005883a 	mov	r2,zero
   27790:	00004606 	br	278ac <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27794:	0005303a 	rdctl	r2,status
   27798:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2779c:	e0fffb17 	ldw	r3,-20(fp)
   277a0:	00bfff84 	movi	r2,-2
   277a4:	1884703a 	and	r2,r3,r2
   277a8:	1001703a 	wrctl	status,r2
  
  return context;
   277ac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   277b0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   277b4:	d0a6ff17 	ldw	r2,-25604(gp)
   277b8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   277bc:	d0a6ff17 	ldw	r2,-25604(gp)
   277c0:	10000326 	beq	r2,zero,277d0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   277c4:	d0a6ff17 	ldw	r2,-25604(gp)
   277c8:	10800117 	ldw	r2,4(r2)
   277cc:	d0a6ff15 	stw	r2,-25604(gp)
   277d0:	e0bff817 	ldw	r2,-32(fp)
   277d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   277d8:	e0bff917 	ldw	r2,-28(fp)
   277dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   277e0:	e0bffa17 	ldw	r2,-24(fp)
   277e4:	1000051e 	bne	r2,zero,277fc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   277e8:	e0bfff17 	ldw	r2,-4(fp)
   277ec:	00c01684 	movi	r3,90
   277f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   277f4:	0005883a 	mov	r2,zero
   277f8:	00002c06 	br	278ac <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   277fc:	e0bffc17 	ldw	r2,-16(fp)
   27800:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   27804:	e0fffc17 	ldw	r3,-16(fp)
   27808:	e0bffe17 	ldw	r2,-8(fp)
   2780c:	1885883a 	add	r2,r3,r2
   27810:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   27814:	e03ff715 	stw	zero,-36(fp)
   27818:	00000c06 	br	2784c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   2781c:	e0bff617 	ldw	r2,-40(fp)
   27820:	e0fff517 	ldw	r3,-44(fp)
   27824:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   27828:	e0bff517 	ldw	r2,-44(fp)
   2782c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   27830:	e0fff517 	ldw	r3,-44(fp)
   27834:	e0bffe17 	ldw	r2,-8(fp)
   27838:	1885883a 	add	r2,r3,r2
   2783c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   27840:	e0bff717 	ldw	r2,-36(fp)
   27844:	10800044 	addi	r2,r2,1
   27848:	e0bff715 	stw	r2,-36(fp)
   2784c:	e0bffd17 	ldw	r2,-12(fp)
   27850:	10bfffc4 	addi	r2,r2,-1
   27854:	e0fff717 	ldw	r3,-36(fp)
   27858:	18bff036 	bltu	r3,r2,2781c <__alt_data_end+0xfffe841c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   2785c:	e0bff617 	ldw	r2,-40(fp)
   27860:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   27864:	e0bffa17 	ldw	r2,-24(fp)
   27868:	e0fffc17 	ldw	r3,-16(fp)
   2786c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   27870:	e0bffa17 	ldw	r2,-24(fp)
   27874:	e0fffc17 	ldw	r3,-16(fp)
   27878:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   2787c:	e0bffa17 	ldw	r2,-24(fp)
   27880:	e0fffd17 	ldw	r3,-12(fp)
   27884:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   27888:	e0bffa17 	ldw	r2,-24(fp)
   2788c:	e0fffd17 	ldw	r3,-12(fp)
   27890:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   27894:	e0bffa17 	ldw	r2,-24(fp)
   27898:	e0fffe17 	ldw	r3,-8(fp)
   2789c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   278a0:	e0bfff17 	ldw	r2,-4(fp)
   278a4:	10000005 	stb	zero,0(r2)
    return (pmem);
   278a8:	e0bffa17 	ldw	r2,-24(fp)
}
   278ac:	e037883a 	mov	sp,fp
   278b0:	df000017 	ldw	fp,0(sp)
   278b4:	dec00104 	addi	sp,sp,4
   278b8:	f800283a 	ret

000278bc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   278bc:	defff804 	addi	sp,sp,-32
   278c0:	df000715 	stw	fp,28(sp)
   278c4:	df000704 	addi	fp,sp,28
   278c8:	e13ffe15 	stw	r4,-8(fp)
   278cc:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   278d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   278d4:	e0bfff17 	ldw	r2,-4(fp)
   278d8:	1000021e 	bne	r2,zero,278e4 <OSMemGet+0x28>
        return ((void *)0);
   278dc:	0005883a 	mov	r2,zero
   278e0:	00002e06 	br	2799c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   278e4:	e0bffe17 	ldw	r2,-8(fp)
   278e8:	1000051e 	bne	r2,zero,27900 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   278ec:	e0bfff17 	ldw	r2,-4(fp)
   278f0:	00c01804 	movi	r3,96
   278f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   278f8:	0005883a 	mov	r2,zero
   278fc:	00002706 	br	2799c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27900:	0005303a 	rdctl	r2,status
   27904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27908:	e0fffd17 	ldw	r3,-12(fp)
   2790c:	00bfff84 	movi	r2,-2
   27910:	1884703a 	and	r2,r3,r2
   27914:	1001703a 	wrctl	status,r2
  
  return context;
   27918:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2791c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   27920:	e0bffe17 	ldw	r2,-8(fp)
   27924:	10800417 	ldw	r2,16(r2)
   27928:	10001426 	beq	r2,zero,2797c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   2792c:	e0bffe17 	ldw	r2,-8(fp)
   27930:	10800117 	ldw	r2,4(r2)
   27934:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   27938:	e0bffb17 	ldw	r2,-20(fp)
   2793c:	10c00017 	ldw	r3,0(r2)
   27940:	e0bffe17 	ldw	r2,-8(fp)
   27944:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   27948:	e0bffe17 	ldw	r2,-8(fp)
   2794c:	10800417 	ldw	r2,16(r2)
   27950:	10ffffc4 	addi	r3,r2,-1
   27954:	e0bffe17 	ldw	r2,-8(fp)
   27958:	10c00415 	stw	r3,16(r2)
   2795c:	e0bff917 	ldw	r2,-28(fp)
   27960:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27964:	e0bffa17 	ldw	r2,-24(fp)
   27968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   2796c:	e0bfff17 	ldw	r2,-4(fp)
   27970:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   27974:	e0bffb17 	ldw	r2,-20(fp)
   27978:	00000806 	br	2799c <OSMemGet+0xe0>
   2797c:	e0bff917 	ldw	r2,-28(fp)
   27980:	e0bffc15 	stw	r2,-16(fp)
   27984:	e0bffc17 	ldw	r2,-16(fp)
   27988:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   2798c:	e0bfff17 	ldw	r2,-4(fp)
   27990:	00c01744 	movi	r3,93
   27994:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   27998:	0005883a 	mov	r2,zero
}
   2799c:	e037883a 	mov	sp,fp
   279a0:	df000017 	ldw	fp,0(sp)
   279a4:	dec00104 	addi	sp,sp,4
   279a8:	f800283a 	ret

000279ac <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   279ac:	defff704 	addi	sp,sp,-36
   279b0:	dfc00815 	stw	ra,32(sp)
   279b4:	df000715 	stw	fp,28(sp)
   279b8:	df000704 	addi	fp,sp,28
   279bc:	e13ffd15 	stw	r4,-12(fp)
   279c0:	e17ffe15 	stw	r5,-8(fp)
   279c4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   279c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   279cc:	e0bfff17 	ldw	r2,-4(fp)
   279d0:	1000021e 	bne	r2,zero,279dc <OSMemNameGet+0x30>
        return (0);
   279d4:	0005883a 	mov	r2,zero
   279d8:	00002b06 	br	27a88 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   279dc:	e0bffd17 	ldw	r2,-12(fp)
   279e0:	1000051e 	bne	r2,zero,279f8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   279e4:	e0bfff17 	ldw	r2,-4(fp)
   279e8:	00c01804 	movi	r3,96
   279ec:	10c00005 	stb	r3,0(r2)
        return (0);
   279f0:	0005883a 	mov	r2,zero
   279f4:	00002406 	br	27a88 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   279f8:	e0bffe17 	ldw	r2,-8(fp)
   279fc:	1000051e 	bne	r2,zero,27a14 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   27a00:	e0bfff17 	ldw	r2,-4(fp)
   27a04:	00c00304 	movi	r3,12
   27a08:	10c00005 	stb	r3,0(r2)
        return (0);
   27a0c:	0005883a 	mov	r2,zero
   27a10:	00001d06 	br	27a88 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   27a14:	d0a70403 	ldbu	r2,-25584(gp)
   27a18:	10803fcc 	andi	r2,r2,255
   27a1c:	10000526 	beq	r2,zero,27a34 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   27a20:	e0bfff17 	ldw	r2,-4(fp)
   27a24:	00c00444 	movi	r3,17
   27a28:	10c00005 	stb	r3,0(r2)
        return (0);
   27a2c:	0005883a 	mov	r2,zero
   27a30:	00001506 	br	27a88 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27a34:	0005303a 	rdctl	r2,status
   27a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27a3c:	e0fffb17 	ldw	r3,-20(fp)
   27a40:	00bfff84 	movi	r2,-2
   27a44:	1884703a 	and	r2,r3,r2
   27a48:	1001703a 	wrctl	status,r2
  
  return context;
   27a4c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   27a50:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   27a54:	e0bffd17 	ldw	r2,-12(fp)
   27a58:	10800504 	addi	r2,r2,20
   27a5c:	100b883a 	mov	r5,r2
   27a60:	e13ffe17 	ldw	r4,-8(fp)
   27a64:	00258b40 	call	258b4 <OS_StrCopy>
   27a68:	e0bffa05 	stb	r2,-24(fp)
   27a6c:	e0bff917 	ldw	r2,-28(fp)
   27a70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27a74:	e0bffc17 	ldw	r2,-16(fp)
   27a78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   27a7c:	e0bfff17 	ldw	r2,-4(fp)
   27a80:	10000005 	stb	zero,0(r2)
    return (len);
   27a84:	e0bffa03 	ldbu	r2,-24(fp)
}
   27a88:	e037883a 	mov	sp,fp
   27a8c:	dfc00117 	ldw	ra,4(sp)
   27a90:	df000017 	ldw	fp,0(sp)
   27a94:	dec00204 	addi	sp,sp,8
   27a98:	f800283a 	ret

00027a9c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   27a9c:	defff604 	addi	sp,sp,-40
   27aa0:	dfc00915 	stw	ra,36(sp)
   27aa4:	df000815 	stw	fp,32(sp)
   27aa8:	df000804 	addi	fp,sp,32
   27aac:	e13ffd15 	stw	r4,-12(fp)
   27ab0:	e17ffe15 	stw	r5,-8(fp)
   27ab4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   27ab8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   27abc:	e0bfff17 	ldw	r2,-4(fp)
   27ac0:	10003526 	beq	r2,zero,27b98 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   27ac4:	e0bffd17 	ldw	r2,-12(fp)
   27ac8:	1000041e 	bne	r2,zero,27adc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   27acc:	e0bfff17 	ldw	r2,-4(fp)
   27ad0:	00c01804 	movi	r3,96
   27ad4:	10c00005 	stb	r3,0(r2)
        return;
   27ad8:	00003006 	br	27b9c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   27adc:	e0bffe17 	ldw	r2,-8(fp)
   27ae0:	1000041e 	bne	r2,zero,27af4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   27ae4:	e0bfff17 	ldw	r2,-4(fp)
   27ae8:	00c00304 	movi	r3,12
   27aec:	10c00005 	stb	r3,0(r2)
        return;
   27af0:	00002a06 	br	27b9c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   27af4:	d0a70403 	ldbu	r2,-25584(gp)
   27af8:	10803fcc 	andi	r2,r2,255
   27afc:	10000426 	beq	r2,zero,27b10 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   27b00:	e0bfff17 	ldw	r2,-4(fp)
   27b04:	00c00484 	movi	r3,18
   27b08:	10c00005 	stb	r3,0(r2)
        return;
   27b0c:	00002306 	br	27b9c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27b10:	0005303a 	rdctl	r2,status
   27b14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27b18:	e0fffc17 	ldw	r3,-16(fp)
   27b1c:	00bfff84 	movi	r2,-2
   27b20:	1884703a 	and	r2,r3,r2
   27b24:	1001703a 	wrctl	status,r2
  
  return context;
   27b28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   27b2c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   27b30:	e13ffe17 	ldw	r4,-8(fp)
   27b34:	00259280 	call	25928 <OS_StrLen>
   27b38:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   27b3c:	e0bffa03 	ldbu	r2,-24(fp)
   27b40:	10800830 	cmpltui	r2,r2,32
   27b44:	1000081e 	bne	r2,zero,27b68 <OSMemNameSet+0xcc>
   27b48:	e0bff817 	ldw	r2,-32(fp)
   27b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27b50:	e0bff917 	ldw	r2,-28(fp)
   27b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   27b58:	e0bfff17 	ldw	r2,-4(fp)
   27b5c:	00c018c4 	movi	r3,99
   27b60:	10c00005 	stb	r3,0(r2)
        return;
   27b64:	00000d06 	br	27b9c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   27b68:	e0bffd17 	ldw	r2,-12(fp)
   27b6c:	10800504 	addi	r2,r2,20
   27b70:	e17ffe17 	ldw	r5,-8(fp)
   27b74:	1009883a 	mov	r4,r2
   27b78:	00258b40 	call	258b4 <OS_StrCopy>
   27b7c:	e0bff817 	ldw	r2,-32(fp)
   27b80:	e0bffb15 	stw	r2,-20(fp)
   27b84:	e0bffb17 	ldw	r2,-20(fp)
   27b88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   27b8c:	e0bfff17 	ldw	r2,-4(fp)
   27b90:	10000005 	stb	zero,0(r2)
   27b94:	00000106 	br	27b9c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   27b98:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   27b9c:	e037883a 	mov	sp,fp
   27ba0:	dfc00117 	ldw	ra,4(sp)
   27ba4:	df000017 	ldw	fp,0(sp)
   27ba8:	dec00204 	addi	sp,sp,8
   27bac:	f800283a 	ret

00027bb0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   27bb0:	defff904 	addi	sp,sp,-28
   27bb4:	df000615 	stw	fp,24(sp)
   27bb8:	df000604 	addi	fp,sp,24
   27bbc:	e13ffe15 	stw	r4,-8(fp)
   27bc0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   27bc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   27bc8:	e0bffe17 	ldw	r2,-8(fp)
   27bcc:	1000021e 	bne	r2,zero,27bd8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   27bd0:	00801804 	movi	r2,96
   27bd4:	00002806 	br	27c78 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   27bd8:	e0bfff17 	ldw	r2,-4(fp)
   27bdc:	1000021e 	bne	r2,zero,27be8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   27be0:	008017c4 	movi	r2,95
   27be4:	00002406 	br	27c78 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27be8:	0005303a 	rdctl	r2,status
   27bec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27bf0:	e0fffd17 	ldw	r3,-12(fp)
   27bf4:	00bfff84 	movi	r2,-2
   27bf8:	1884703a 	and	r2,r3,r2
   27bfc:	1001703a 	wrctl	status,r2
  
  return context;
   27c00:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   27c04:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   27c08:	e0bffe17 	ldw	r2,-8(fp)
   27c0c:	10c00417 	ldw	r3,16(r2)
   27c10:	e0bffe17 	ldw	r2,-8(fp)
   27c14:	10800317 	ldw	r2,12(r2)
   27c18:	18800636 	bltu	r3,r2,27c34 <OSMemPut+0x84>
   27c1c:	e0bffa17 	ldw	r2,-24(fp)
   27c20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27c24:	e0bffb17 	ldw	r2,-20(fp)
   27c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   27c2c:	00801784 	movi	r2,94
   27c30:	00001106 	br	27c78 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   27c34:	e0bffe17 	ldw	r2,-8(fp)
   27c38:	10c00117 	ldw	r3,4(r2)
   27c3c:	e0bfff17 	ldw	r2,-4(fp)
   27c40:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   27c44:	e0bffe17 	ldw	r2,-8(fp)
   27c48:	e0ffff17 	ldw	r3,-4(fp)
   27c4c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   27c50:	e0bffe17 	ldw	r2,-8(fp)
   27c54:	10800417 	ldw	r2,16(r2)
   27c58:	10c00044 	addi	r3,r2,1
   27c5c:	e0bffe17 	ldw	r2,-8(fp)
   27c60:	10c00415 	stw	r3,16(r2)
   27c64:	e0bffa17 	ldw	r2,-24(fp)
   27c68:	e0bffc15 	stw	r2,-16(fp)
   27c6c:	e0bffc17 	ldw	r2,-16(fp)
   27c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   27c74:	0005883a 	mov	r2,zero
}
   27c78:	e037883a 	mov	sp,fp
   27c7c:	df000017 	ldw	fp,0(sp)
   27c80:	dec00104 	addi	sp,sp,4
   27c84:	f800283a 	ret

00027c88 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   27c88:	defffa04 	addi	sp,sp,-24
   27c8c:	df000515 	stw	fp,20(sp)
   27c90:	df000504 	addi	fp,sp,20
   27c94:	e13ffe15 	stw	r4,-8(fp)
   27c98:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   27c9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   27ca0:	e0bffe17 	ldw	r2,-8(fp)
   27ca4:	1000021e 	bne	r2,zero,27cb0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   27ca8:	00801804 	movi	r2,96
   27cac:	00002c06 	br	27d60 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   27cb0:	e0bfff17 	ldw	r2,-4(fp)
   27cb4:	1000021e 	bne	r2,zero,27cc0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   27cb8:	00801844 	movi	r2,97
   27cbc:	00002806 	br	27d60 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27cc0:	0005303a 	rdctl	r2,status
   27cc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27cc8:	e0fffc17 	ldw	r3,-16(fp)
   27ccc:	00bfff84 	movi	r2,-2
   27cd0:	1884703a 	and	r2,r3,r2
   27cd4:	1001703a 	wrctl	status,r2
  
  return context;
   27cd8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   27cdc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   27ce0:	e0bffe17 	ldw	r2,-8(fp)
   27ce4:	10c00017 	ldw	r3,0(r2)
   27ce8:	e0bfff17 	ldw	r2,-4(fp)
   27cec:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   27cf0:	e0bffe17 	ldw	r2,-8(fp)
   27cf4:	10c00117 	ldw	r3,4(r2)
   27cf8:	e0bfff17 	ldw	r2,-4(fp)
   27cfc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   27d00:	e0bffe17 	ldw	r2,-8(fp)
   27d04:	10c00217 	ldw	r3,8(r2)
   27d08:	e0bfff17 	ldw	r2,-4(fp)
   27d0c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   27d10:	e0bffe17 	ldw	r2,-8(fp)
   27d14:	10c00317 	ldw	r3,12(r2)
   27d18:	e0bfff17 	ldw	r2,-4(fp)
   27d1c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   27d20:	e0bffe17 	ldw	r2,-8(fp)
   27d24:	10c00417 	ldw	r3,16(r2)
   27d28:	e0bfff17 	ldw	r2,-4(fp)
   27d2c:	10c00415 	stw	r3,16(r2)
   27d30:	e0bffb17 	ldw	r2,-20(fp)
   27d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27d38:	e0bffd17 	ldw	r2,-12(fp)
   27d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   27d40:	e0bfff17 	ldw	r2,-4(fp)
   27d44:	10c00317 	ldw	r3,12(r2)
   27d48:	e0bfff17 	ldw	r2,-4(fp)
   27d4c:	10800417 	ldw	r2,16(r2)
   27d50:	1887c83a 	sub	r3,r3,r2
   27d54:	e0bfff17 	ldw	r2,-4(fp)
   27d58:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   27d5c:	0005883a 	mov	r2,zero
}
   27d60:	e037883a 	mov	sp,fp
   27d64:	df000017 	ldw	fp,0(sp)
   27d68:	dec00104 	addi	sp,sp,4
   27d6c:	f800283a 	ret

00027d70 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   27d70:	defffc04 	addi	sp,sp,-16
   27d74:	dfc00315 	stw	ra,12(sp)
   27d78:	df000215 	stw	fp,8(sp)
   27d7c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   27d80:	01430c04 	movi	r5,3120
   27d84:	010000f4 	movhi	r4,3
   27d88:	21158404 	addi	r4,r4,22032
   27d8c:	00256b40 	call	256b4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   27d90:	008000f4 	movhi	r2,3
   27d94:	10958404 	addi	r2,r2,22032
   27d98:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   27d9c:	e03fff0d 	sth	zero,-4(fp)
   27da0:	00001606 	br	27dfc <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   27da4:	e0bfff0b 	ldhu	r2,-4(fp)
   27da8:	10800044 	addi	r2,r2,1
   27dac:	01400d04 	movi	r5,52
   27db0:	1009883a 	mov	r4,r2
   27db4:	002316c0 	call	2316c <__mulsi3>
   27db8:	1007883a 	mov	r3,r2
   27dbc:	008000f4 	movhi	r2,3
   27dc0:	10958404 	addi	r2,r2,22032
   27dc4:	1887883a 	add	r3,r3,r2
   27dc8:	e0bffe17 	ldw	r2,-8(fp)
   27dcc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   27dd0:	e0bffe17 	ldw	r2,-8(fp)
   27dd4:	00c00fc4 	movi	r3,63
   27dd8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   27ddc:	e0bffe17 	ldw	r2,-8(fp)
   27de0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   27de4:	e0bffe17 	ldw	r2,-8(fp)
   27de8:	10800d04 	addi	r2,r2,52
   27dec:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   27df0:	e0bfff0b 	ldhu	r2,-4(fp)
   27df4:	10800044 	addi	r2,r2,1
   27df8:	e0bfff0d 	sth	r2,-4(fp)
   27dfc:	e0bfff0b 	ldhu	r2,-4(fp)
   27e00:	10800ef0 	cmpltui	r2,r2,59
   27e04:	103fe71e 	bne	r2,zero,27da4 <__alt_data_end+0xfffe89a4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   27e08:	e0bffe17 	ldw	r2,-8(fp)
   27e0c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   27e10:	e0bffe17 	ldw	r2,-8(fp)
   27e14:	00c00fc4 	movi	r3,63
   27e18:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   27e1c:	e0bffe17 	ldw	r2,-8(fp)
   27e20:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   27e24:	008000f4 	movhi	r2,3
   27e28:	10958404 	addi	r2,r2,22032
   27e2c:	d0a6ff15 	stw	r2,-25604(gp)
#endif
}
   27e30:	0001883a 	nop
   27e34:	e037883a 	mov	sp,fp
   27e38:	dfc00117 	ldw	ra,4(sp)
   27e3c:	df000017 	ldw	fp,0(sp)
   27e40:	dec00204 	addi	sp,sp,8
   27e44:	f800283a 	ret

00027e48 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   27e48:	defff804 	addi	sp,sp,-32
   27e4c:	df000715 	stw	fp,28(sp)
   27e50:	df000704 	addi	fp,sp,28
   27e54:	e13ffe15 	stw	r4,-8(fp)
   27e58:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   27e5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   27e60:	e0bfff17 	ldw	r2,-4(fp)
   27e64:	1000021e 	bne	r2,zero,27e70 <OSQAccept+0x28>
        return ((void *)0);
   27e68:	0005883a 	mov	r2,zero
   27e6c:	00004206 	br	27f78 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   27e70:	e0bffe17 	ldw	r2,-8(fp)
   27e74:	1000051e 	bne	r2,zero,27e8c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   27e78:	e0bfff17 	ldw	r2,-4(fp)
   27e7c:	00c00104 	movi	r3,4
   27e80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   27e84:	0005883a 	mov	r2,zero
   27e88:	00003b06 	br	27f78 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   27e8c:	e0bffe17 	ldw	r2,-8(fp)
   27e90:	10800003 	ldbu	r2,0(r2)
   27e94:	10803fcc 	andi	r2,r2,255
   27e98:	108000a0 	cmpeqi	r2,r2,2
   27e9c:	1000051e 	bne	r2,zero,27eb4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   27ea0:	e0bfff17 	ldw	r2,-4(fp)
   27ea4:	00c00044 	movi	r3,1
   27ea8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   27eac:	0005883a 	mov	r2,zero
   27eb0:	00003106 	br	27f78 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27eb4:	0005303a 	rdctl	r2,status
   27eb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27ebc:	e0fffd17 	ldw	r3,-12(fp)
   27ec0:	00bfff84 	movi	r2,-2
   27ec4:	1884703a 	and	r2,r3,r2
   27ec8:	1001703a 	wrctl	status,r2
  
  return context;
   27ecc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   27ed0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   27ed4:	e0bffe17 	ldw	r2,-8(fp)
   27ed8:	10800117 	ldw	r2,4(r2)
   27edc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   27ee0:	e0bffc17 	ldw	r2,-16(fp)
   27ee4:	1080058b 	ldhu	r2,22(r2)
   27ee8:	10bfffcc 	andi	r2,r2,65535
   27eec:	10001926 	beq	r2,zero,27f54 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   27ef0:	e0bffc17 	ldw	r2,-16(fp)
   27ef4:	10800417 	ldw	r2,16(r2)
   27ef8:	11000104 	addi	r4,r2,4
   27efc:	e0fffc17 	ldw	r3,-16(fp)
   27f00:	19000415 	stw	r4,16(r3)
   27f04:	10800017 	ldw	r2,0(r2)
   27f08:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   27f0c:	e0bffc17 	ldw	r2,-16(fp)
   27f10:	1080058b 	ldhu	r2,22(r2)
   27f14:	10bfffc4 	addi	r2,r2,-1
   27f18:	1007883a 	mov	r3,r2
   27f1c:	e0bffc17 	ldw	r2,-16(fp)
   27f20:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   27f24:	e0bffc17 	ldw	r2,-16(fp)
   27f28:	10c00417 	ldw	r3,16(r2)
   27f2c:	e0bffc17 	ldw	r2,-16(fp)
   27f30:	10800217 	ldw	r2,8(r2)
   27f34:	1880041e 	bne	r3,r2,27f48 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   27f38:	e0bffc17 	ldw	r2,-16(fp)
   27f3c:	10c00117 	ldw	r3,4(r2)
   27f40:	e0bffc17 	ldw	r2,-16(fp)
   27f44:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   27f48:	e0bfff17 	ldw	r2,-4(fp)
   27f4c:	10000005 	stb	zero,0(r2)
   27f50:	00000406 	br	27f64 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   27f54:	e0bfff17 	ldw	r2,-4(fp)
   27f58:	00c007c4 	movi	r3,31
   27f5c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   27f60:	e03ff915 	stw	zero,-28(fp)
   27f64:	e0bffa17 	ldw	r2,-24(fp)
   27f68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27f6c:	e0bffb17 	ldw	r2,-20(fp)
   27f70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   27f74:	e0bff917 	ldw	r2,-28(fp)
}
   27f78:	e037883a 	mov	sp,fp
   27f7c:	df000017 	ldw	fp,0(sp)
   27f80:	dec00104 	addi	sp,sp,4
   27f84:	f800283a 	ret

00027f88 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   27f88:	defff404 	addi	sp,sp,-48
   27f8c:	dfc00b15 	stw	ra,44(sp)
   27f90:	df000a15 	stw	fp,40(sp)
   27f94:	df000a04 	addi	fp,sp,40
   27f98:	e13ffe15 	stw	r4,-8(fp)
   27f9c:	2805883a 	mov	r2,r5
   27fa0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   27fa4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   27fa8:	d0a70403 	ldbu	r2,-25584(gp)
   27fac:	10803fcc 	andi	r2,r2,255
   27fb0:	10000226 	beq	r2,zero,27fbc <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   27fb4:	0005883a 	mov	r2,zero
   27fb8:	00005906 	br	28120 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27fbc:	0005303a 	rdctl	r2,status
   27fc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27fc4:	e0fffd17 	ldw	r3,-12(fp)
   27fc8:	00bfff84 	movi	r2,-2
   27fcc:	1884703a 	and	r2,r3,r2
   27fd0:	1001703a 	wrctl	status,r2
  
  return context;
   27fd4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   27fd8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   27fdc:	d0a70317 	ldw	r2,-25588(gp)
   27fe0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   27fe4:	d0a70317 	ldw	r2,-25588(gp)
   27fe8:	10000326 	beq	r2,zero,27ff8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   27fec:	d0a70317 	ldw	r2,-25588(gp)
   27ff0:	10800117 	ldw	r2,4(r2)
   27ff4:	d0a70315 	stw	r2,-25588(gp)
   27ff8:	e0bff717 	ldw	r2,-36(fp)
   27ffc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28000:	e0bff817 	ldw	r2,-32(fp)
   28004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   28008:	e0bff617 	ldw	r2,-40(fp)
   2800c:	10004326 	beq	r2,zero,2811c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28010:	0005303a 	rdctl	r2,status
   28014:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28018:	e0fff917 	ldw	r3,-28(fp)
   2801c:	00bfff84 	movi	r2,-2
   28020:	1884703a 	and	r2,r3,r2
   28024:	1001703a 	wrctl	status,r2
  
  return context;
   28028:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   2802c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   28030:	d0a70117 	ldw	r2,-25596(gp)
   28034:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   28038:	e0bffb17 	ldw	r2,-20(fp)
   2803c:	10002d26 	beq	r2,zero,280f4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   28040:	d0a70117 	ldw	r2,-25596(gp)
   28044:	10800017 	ldw	r2,0(r2)
   28048:	d0a70115 	stw	r2,-25596(gp)
   2804c:	e0bff717 	ldw	r2,-36(fp)
   28050:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28054:	e0bffa17 	ldw	r2,-24(fp)
   28058:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   2805c:	e0bffb17 	ldw	r2,-20(fp)
   28060:	e0fffe17 	ldw	r3,-8(fp)
   28064:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   28068:	e0bfff0b 	ldhu	r2,-4(fp)
   2806c:	1085883a 	add	r2,r2,r2
   28070:	1085883a 	add	r2,r2,r2
   28074:	1007883a 	mov	r3,r2
   28078:	e0bffe17 	ldw	r2,-8(fp)
   2807c:	10c7883a 	add	r3,r2,r3
   28080:	e0bffb17 	ldw	r2,-20(fp)
   28084:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   28088:	e0bffb17 	ldw	r2,-20(fp)
   2808c:	e0fffe17 	ldw	r3,-8(fp)
   28090:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   28094:	e0bffb17 	ldw	r2,-20(fp)
   28098:	e0fffe17 	ldw	r3,-8(fp)
   2809c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   280a0:	e0bffb17 	ldw	r2,-20(fp)
   280a4:	e0ffff0b 	ldhu	r3,-4(fp)
   280a8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   280ac:	e0bffb17 	ldw	r2,-20(fp)
   280b0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   280b4:	e0bff617 	ldw	r2,-40(fp)
   280b8:	00c00084 	movi	r3,2
   280bc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   280c0:	e0bff617 	ldw	r2,-40(fp)
   280c4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   280c8:	e0bff617 	ldw	r2,-40(fp)
   280cc:	e0fffb17 	ldw	r3,-20(fp)
   280d0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   280d4:	e0bff617 	ldw	r2,-40(fp)
   280d8:	00c00fc4 	movi	r3,63
   280dc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   280e0:	e0bff617 	ldw	r2,-40(fp)
   280e4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   280e8:	e13ff617 	ldw	r4,-40(fp)
   280ec:	00252d40 	call	252d4 <OS_EventWaitListInit>
   280f0:	00000a06 	br	2811c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   280f4:	d0e70317 	ldw	r3,-25588(gp)
   280f8:	e0bff617 	ldw	r2,-40(fp)
   280fc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   28100:	e0bff617 	ldw	r2,-40(fp)
   28104:	d0a70315 	stw	r2,-25588(gp)
   28108:	e0bff717 	ldw	r2,-36(fp)
   2810c:	e0bffc15 	stw	r2,-16(fp)
   28110:	e0bffc17 	ldw	r2,-16(fp)
   28114:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   28118:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   2811c:	e0bff617 	ldw	r2,-40(fp)
}
   28120:	e037883a 	mov	sp,fp
   28124:	dfc00117 	ldw	ra,4(sp)
   28128:	df000017 	ldw	fp,0(sp)
   2812c:	dec00204 	addi	sp,sp,8
   28130:	f800283a 	ret

00028134 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   28134:	defff204 	addi	sp,sp,-56
   28138:	dfc00d15 	stw	ra,52(sp)
   2813c:	df000c15 	stw	fp,48(sp)
   28140:	df000c04 	addi	fp,sp,48
   28144:	e13ffd15 	stw	r4,-12(fp)
   28148:	2805883a 	mov	r2,r5
   2814c:	e1bfff15 	stw	r6,-4(fp)
   28150:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   28154:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   28158:	e0bfff17 	ldw	r2,-4(fp)
   2815c:	1000021e 	bne	r2,zero,28168 <OSQDel+0x34>
        return (pevent);
   28160:	e0bffd17 	ldw	r2,-12(fp)
   28164:	00008e06 	br	283a0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   28168:	e0bffd17 	ldw	r2,-12(fp)
   2816c:	1000051e 	bne	r2,zero,28184 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   28170:	e0bfff17 	ldw	r2,-4(fp)
   28174:	00c00104 	movi	r3,4
   28178:	10c00005 	stb	r3,0(r2)
        return (pevent);
   2817c:	e0bffd17 	ldw	r2,-12(fp)
   28180:	00008706 	br	283a0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   28184:	e0bffd17 	ldw	r2,-12(fp)
   28188:	10800003 	ldbu	r2,0(r2)
   2818c:	10803fcc 	andi	r2,r2,255
   28190:	108000a0 	cmpeqi	r2,r2,2
   28194:	1000051e 	bne	r2,zero,281ac <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   28198:	e0bfff17 	ldw	r2,-4(fp)
   2819c:	00c00044 	movi	r3,1
   281a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   281a4:	e0bffd17 	ldw	r2,-12(fp)
   281a8:	00007d06 	br	283a0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   281ac:	d0a70403 	ldbu	r2,-25584(gp)
   281b0:	10803fcc 	andi	r2,r2,255
   281b4:	10000526 	beq	r2,zero,281cc <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   281b8:	e0bfff17 	ldw	r2,-4(fp)
   281bc:	00c003c4 	movi	r3,15
   281c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   281c4:	e0bffd17 	ldw	r2,-12(fp)
   281c8:	00007506 	br	283a0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   281cc:	0005303a 	rdctl	r2,status
   281d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   281d4:	e0fffc17 	ldw	r3,-16(fp)
   281d8:	00bfff84 	movi	r2,-2
   281dc:	1884703a 	and	r2,r3,r2
   281e0:	1001703a 	wrctl	status,r2
  
  return context;
   281e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   281e8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   281ec:	e0bffd17 	ldw	r2,-12(fp)
   281f0:	10800283 	ldbu	r2,10(r2)
   281f4:	10803fcc 	andi	r2,r2,255
   281f8:	10000326 	beq	r2,zero,28208 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   281fc:	00800044 	movi	r2,1
   28200:	e0bff405 	stb	r2,-48(fp)
   28204:	00000106 	br	2820c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   28208:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   2820c:	e0bffe03 	ldbu	r2,-8(fp)
   28210:	10000326 	beq	r2,zero,28220 <OSQDel+0xec>
   28214:	10800060 	cmpeqi	r2,r2,1
   28218:	1000301e 	bne	r2,zero,282dc <OSQDel+0x1a8>
   2821c:	00005506 	br	28374 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   28220:	e0bff403 	ldbu	r2,-48(fp)
   28224:	10001e1e 	bne	r2,zero,282a0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   28228:	e0bffd17 	ldw	r2,-12(fp)
   2822c:	00c00fc4 	movi	r3,63
   28230:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   28234:	e0bffd17 	ldw	r2,-12(fp)
   28238:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   2823c:	e0bffd17 	ldw	r2,-12(fp)
   28240:	10800117 	ldw	r2,4(r2)
   28244:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   28248:	d0e70117 	ldw	r3,-25596(gp)
   2824c:	e0bff817 	ldw	r2,-32(fp)
   28250:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   28254:	e0bff817 	ldw	r2,-32(fp)
   28258:	d0a70115 	stw	r2,-25596(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   2825c:	e0bffd17 	ldw	r2,-12(fp)
   28260:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   28264:	d0e70317 	ldw	r3,-25588(gp)
   28268:	e0bffd17 	ldw	r2,-12(fp)
   2826c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   28270:	e0bffd17 	ldw	r2,-12(fp)
   28274:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   28278:	e0bffd17 	ldw	r2,-12(fp)
   2827c:	d0a70315 	stw	r2,-25588(gp)
   28280:	e0bff617 	ldw	r2,-40(fp)
   28284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28288:	e0bff717 	ldw	r2,-36(fp)
   2828c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   28290:	e0bfff17 	ldw	r2,-4(fp)
   28294:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   28298:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   2829c:	00003f06 	br	2839c <OSQDel+0x268>
   282a0:	e0bff617 	ldw	r2,-40(fp)
   282a4:	e0bff915 	stw	r2,-28(fp)
   282a8:	e0bff917 	ldw	r2,-28(fp)
   282ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   282b0:	e0bfff17 	ldw	r2,-4(fp)
   282b4:	00c01244 	movi	r3,73
   282b8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   282bc:	e0bffd17 	ldw	r2,-12(fp)
   282c0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   282c4:	00003506 	br	2839c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   282c8:	000f883a 	mov	r7,zero
   282cc:	01800104 	movi	r6,4
   282d0:	000b883a 	mov	r5,zero
   282d4:	e13ffd17 	ldw	r4,-12(fp)
   282d8:	0024d240 	call	24d24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   282dc:	e0bffd17 	ldw	r2,-12(fp)
   282e0:	10800283 	ldbu	r2,10(r2)
   282e4:	10803fcc 	andi	r2,r2,255
   282e8:	103ff71e 	bne	r2,zero,282c8 <__alt_data_end+0xfffe8ec8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   282ec:	e0bffd17 	ldw	r2,-12(fp)
   282f0:	00c00fc4 	movi	r3,63
   282f4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   282f8:	e0bffd17 	ldw	r2,-12(fp)
   282fc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   28300:	e0bffd17 	ldw	r2,-12(fp)
   28304:	10800117 	ldw	r2,4(r2)
   28308:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   2830c:	d0e70117 	ldw	r3,-25596(gp)
   28310:	e0bff817 	ldw	r2,-32(fp)
   28314:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   28318:	e0bff817 	ldw	r2,-32(fp)
   2831c:	d0a70115 	stw	r2,-25596(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   28320:	e0bffd17 	ldw	r2,-12(fp)
   28324:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   28328:	d0e70317 	ldw	r3,-25588(gp)
   2832c:	e0bffd17 	ldw	r2,-12(fp)
   28330:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   28334:	e0bffd17 	ldw	r2,-12(fp)
   28338:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   2833c:	e0bffd17 	ldw	r2,-12(fp)
   28340:	d0a70315 	stw	r2,-25588(gp)
   28344:	e0bff617 	ldw	r2,-40(fp)
   28348:	e0bffa15 	stw	r2,-24(fp)
   2834c:	e0bffa17 	ldw	r2,-24(fp)
   28350:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   28354:	e0bff403 	ldbu	r2,-48(fp)
   28358:	10800058 	cmpnei	r2,r2,1
   2835c:	1000011e 	bne	r2,zero,28364 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   28360:	00257700 	call	25770 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   28364:	e0bfff17 	ldw	r2,-4(fp)
   28368:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   2836c:	e03ff515 	stw	zero,-44(fp)
             break;
   28370:	00000a06 	br	2839c <OSQDel+0x268>
   28374:	e0bff617 	ldw	r2,-40(fp)
   28378:	e0bffb15 	stw	r2,-20(fp)
   2837c:	e0bffb17 	ldw	r2,-20(fp)
   28380:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   28384:	e0bfff17 	ldw	r2,-4(fp)
   28388:	00c001c4 	movi	r3,7
   2838c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   28390:	e0bffd17 	ldw	r2,-12(fp)
   28394:	e0bff515 	stw	r2,-44(fp)
             break;
   28398:	0001883a 	nop
    }
    return (pevent_return);
   2839c:	e0bff517 	ldw	r2,-44(fp)
}
   283a0:	e037883a 	mov	sp,fp
   283a4:	dfc00117 	ldw	ra,4(sp)
   283a8:	df000017 	ldw	fp,0(sp)
   283ac:	dec00204 	addi	sp,sp,8
   283b0:	f800283a 	ret

000283b4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   283b4:	defffa04 	addi	sp,sp,-24
   283b8:	df000515 	stw	fp,20(sp)
   283bc:	df000504 	addi	fp,sp,20
   283c0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   283c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   283c8:	e0bfff17 	ldw	r2,-4(fp)
   283cc:	1000021e 	bne	r2,zero,283d8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   283d0:	00800104 	movi	r2,4
   283d4:	00002106 	br	2845c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   283d8:	e0bfff17 	ldw	r2,-4(fp)
   283dc:	10800003 	ldbu	r2,0(r2)
   283e0:	10803fcc 	andi	r2,r2,255
   283e4:	108000a0 	cmpeqi	r2,r2,2
   283e8:	1000021e 	bne	r2,zero,283f4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   283ec:	00800044 	movi	r2,1
   283f0:	00001a06 	br	2845c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   283f4:	0005303a 	rdctl	r2,status
   283f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   283fc:	e0fffd17 	ldw	r3,-12(fp)
   28400:	00bfff84 	movi	r2,-2
   28404:	1884703a 	and	r2,r3,r2
   28408:	1001703a 	wrctl	status,r2
  
  return context;
   2840c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   28410:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   28414:	e0bfff17 	ldw	r2,-4(fp)
   28418:	10800117 	ldw	r2,4(r2)
   2841c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   28420:	e0bffc17 	ldw	r2,-16(fp)
   28424:	10c00117 	ldw	r3,4(r2)
   28428:	e0bffc17 	ldw	r2,-16(fp)
   2842c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   28430:	e0bffc17 	ldw	r2,-16(fp)
   28434:	10c00117 	ldw	r3,4(r2)
   28438:	e0bffc17 	ldw	r2,-16(fp)
   2843c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   28440:	e0bffc17 	ldw	r2,-16(fp)
   28444:	1000058d 	sth	zero,22(r2)
   28448:	e0bffb17 	ldw	r2,-20(fp)
   2844c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28450:	e0bffe17 	ldw	r2,-8(fp)
   28454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   28458:	0005883a 	mov	r2,zero
}
   2845c:	e037883a 	mov	sp,fp
   28460:	df000017 	ldw	fp,0(sp)
   28464:	dec00104 	addi	sp,sp,4
   28468:	f800283a 	ret

0002846c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   2846c:	defff304 	addi	sp,sp,-52
   28470:	dfc00c15 	stw	ra,48(sp)
   28474:	df000b15 	stw	fp,44(sp)
   28478:	df000b04 	addi	fp,sp,44
   2847c:	e13ffd15 	stw	r4,-12(fp)
   28480:	2805883a 	mov	r2,r5
   28484:	e1bfff15 	stw	r6,-4(fp)
   28488:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2848c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   28490:	e0bfff17 	ldw	r2,-4(fp)
   28494:	1000021e 	bne	r2,zero,284a0 <OSQPend+0x34>
        return ((void *)0);
   28498:	0005883a 	mov	r2,zero
   2849c:	00009106 	br	286e4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   284a0:	e0bffd17 	ldw	r2,-12(fp)
   284a4:	1000051e 	bne	r2,zero,284bc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   284a8:	e0bfff17 	ldw	r2,-4(fp)
   284ac:	00c00104 	movi	r3,4
   284b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   284b4:	0005883a 	mov	r2,zero
   284b8:	00008a06 	br	286e4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   284bc:	e0bffd17 	ldw	r2,-12(fp)
   284c0:	10800003 	ldbu	r2,0(r2)
   284c4:	10803fcc 	andi	r2,r2,255
   284c8:	108000a0 	cmpeqi	r2,r2,2
   284cc:	1000051e 	bne	r2,zero,284e4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   284d0:	e0bfff17 	ldw	r2,-4(fp)
   284d4:	00c00044 	movi	r3,1
   284d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   284dc:	0005883a 	mov	r2,zero
   284e0:	00008006 	br	286e4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   284e4:	d0a70403 	ldbu	r2,-25584(gp)
   284e8:	10803fcc 	andi	r2,r2,255
   284ec:	10000526 	beq	r2,zero,28504 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   284f0:	e0bfff17 	ldw	r2,-4(fp)
   284f4:	00c00084 	movi	r3,2
   284f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   284fc:	0005883a 	mov	r2,zero
   28500:	00007806 	br	286e4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   28504:	d0a6f603 	ldbu	r2,-25640(gp)
   28508:	10803fcc 	andi	r2,r2,255
   2850c:	10000526 	beq	r2,zero,28524 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   28510:	e0bfff17 	ldw	r2,-4(fp)
   28514:	00c00344 	movi	r3,13
   28518:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   2851c:	0005883a 	mov	r2,zero
   28520:	00007006 	br	286e4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28524:	0005303a 	rdctl	r2,status
   28528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2852c:	e0fffc17 	ldw	r3,-16(fp)
   28530:	00bfff84 	movi	r2,-2
   28534:	1884703a 	and	r2,r3,r2
   28538:	1001703a 	wrctl	status,r2
  
  return context;
   2853c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   28540:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   28544:	e0bffd17 	ldw	r2,-12(fp)
   28548:	10800117 	ldw	r2,4(r2)
   2854c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   28550:	e0bff817 	ldw	r2,-32(fp)
   28554:	1080058b 	ldhu	r2,22(r2)
   28558:	10bfffcc 	andi	r2,r2,65535
   2855c:	10001e26 	beq	r2,zero,285d8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   28560:	e0bff817 	ldw	r2,-32(fp)
   28564:	10800417 	ldw	r2,16(r2)
   28568:	11000104 	addi	r4,r2,4
   2856c:	e0fff817 	ldw	r3,-32(fp)
   28570:	19000415 	stw	r4,16(r3)
   28574:	10800017 	ldw	r2,0(r2)
   28578:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   2857c:	e0bff817 	ldw	r2,-32(fp)
   28580:	1080058b 	ldhu	r2,22(r2)
   28584:	10bfffc4 	addi	r2,r2,-1
   28588:	1007883a 	mov	r3,r2
   2858c:	e0bff817 	ldw	r2,-32(fp)
   28590:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   28594:	e0bff817 	ldw	r2,-32(fp)
   28598:	10c00417 	ldw	r3,16(r2)
   2859c:	e0bff817 	ldw	r2,-32(fp)
   285a0:	10800217 	ldw	r2,8(r2)
   285a4:	1880041e 	bne	r3,r2,285b8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   285a8:	e0bff817 	ldw	r2,-32(fp)
   285ac:	10c00117 	ldw	r3,4(r2)
   285b0:	e0bff817 	ldw	r2,-32(fp)
   285b4:	10c00415 	stw	r3,16(r2)
   285b8:	e0bff617 	ldw	r2,-40(fp)
   285bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   285c0:	e0bff717 	ldw	r2,-36(fp)
   285c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   285c8:	e0bfff17 	ldw	r2,-4(fp)
   285cc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   285d0:	e0bff517 	ldw	r2,-44(fp)
   285d4:	00004306 	br	286e4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   285d8:	d0a70517 	ldw	r2,-25580(gp)
   285dc:	d0e70517 	ldw	r3,-25580(gp)
   285e0:	18c00c03 	ldbu	r3,48(r3)
   285e4:	18c00114 	ori	r3,r3,4
   285e8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   285ec:	d0a70517 	ldw	r2,-25580(gp)
   285f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   285f4:	d0a70517 	ldw	r2,-25580(gp)
   285f8:	e0fffe0b 	ldhu	r3,-8(fp)
   285fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   28600:	e13ffd17 	ldw	r4,-12(fp)
   28604:	0024ebc0 	call	24ebc <OS_EventTaskWait>
   28608:	e0bff617 	ldw	r2,-40(fp)
   2860c:	e0bffb15 	stw	r2,-20(fp)
   28610:	e0bffb17 	ldw	r2,-20(fp)
   28614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   28618:	00257700 	call	25770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2861c:	0005303a 	rdctl	r2,status
   28620:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28624:	e0fff917 	ldw	r3,-28(fp)
   28628:	00bfff84 	movi	r2,-2
   2862c:	1884703a 	and	r2,r3,r2
   28630:	1001703a 	wrctl	status,r2
  
  return context;
   28634:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   28638:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   2863c:	d0a70517 	ldw	r2,-25580(gp)
   28640:	10800c43 	ldbu	r2,49(r2)
   28644:	10803fcc 	andi	r2,r2,255
   28648:	10000326 	beq	r2,zero,28658 <OSQPend+0x1ec>
   2864c:	108000a0 	cmpeqi	r2,r2,2
   28650:	1000071e 	bne	r2,zero,28670 <OSQPend+0x204>
   28654:	00000b06 	br	28684 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   28658:	d0a70517 	ldw	r2,-25580(gp)
   2865c:	10800917 	ldw	r2,36(r2)
   28660:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   28664:	e0bfff17 	ldw	r2,-4(fp)
   28668:	10000005 	stb	zero,0(r2)
             break;
   2866c:	00000e06 	br	286a8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   28670:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   28674:	e0bfff17 	ldw	r2,-4(fp)
   28678:	00c00384 	movi	r3,14
   2867c:	10c00005 	stb	r3,0(r2)
             break;
   28680:	00000906 	br	286a8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   28684:	d0a70517 	ldw	r2,-25580(gp)
   28688:	e17ffd17 	ldw	r5,-12(fp)
   2868c:	1009883a 	mov	r4,r2
   28690:	002511c0 	call	2511c <OS_EventTaskRemove>
             pmsg = (void *)0;
   28694:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   28698:	e0bfff17 	ldw	r2,-4(fp)
   2869c:	00c00284 	movi	r3,10
   286a0:	10c00005 	stb	r3,0(r2)
             break;
   286a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   286a8:	d0a70517 	ldw	r2,-25580(gp)
   286ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   286b0:	d0a70517 	ldw	r2,-25580(gp)
   286b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   286b8:	d0a70517 	ldw	r2,-25580(gp)
   286bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   286c0:	d0a70517 	ldw	r2,-25580(gp)
   286c4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   286c8:	d0a70517 	ldw	r2,-25580(gp)
   286cc:	10000915 	stw	zero,36(r2)
   286d0:	e0bff617 	ldw	r2,-40(fp)
   286d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   286d8:	e0bffa17 	ldw	r2,-24(fp)
   286dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   286e0:	e0bff517 	ldw	r2,-44(fp)
}
   286e4:	e037883a 	mov	sp,fp
   286e8:	dfc00117 	ldw	ra,4(sp)
   286ec:	df000017 	ldw	fp,0(sp)
   286f0:	dec00204 	addi	sp,sp,8
   286f4:	f800283a 	ret

000286f8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   286f8:	defff604 	addi	sp,sp,-40
   286fc:	dfc00915 	stw	ra,36(sp)
   28700:	df000815 	stw	fp,32(sp)
   28704:	df000804 	addi	fp,sp,32
   28708:	e13ffd15 	stw	r4,-12(fp)
   2870c:	2805883a 	mov	r2,r5
   28710:	e1bfff15 	stw	r6,-4(fp)
   28714:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   28718:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   2871c:	e0bfff17 	ldw	r2,-4(fp)
   28720:	1000021e 	bne	r2,zero,2872c <OSQPendAbort+0x34>
        return (0);
   28724:	0005883a 	mov	r2,zero
   28728:	00004906 	br	28850 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   2872c:	e0bffd17 	ldw	r2,-12(fp)
   28730:	1000051e 	bne	r2,zero,28748 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   28734:	e0bfff17 	ldw	r2,-4(fp)
   28738:	00c00104 	movi	r3,4
   2873c:	10c00005 	stb	r3,0(r2)
        return (0);
   28740:	0005883a 	mov	r2,zero
   28744:	00004206 	br	28850 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   28748:	e0bffd17 	ldw	r2,-12(fp)
   2874c:	10800003 	ldbu	r2,0(r2)
   28750:	10803fcc 	andi	r2,r2,255
   28754:	108000a0 	cmpeqi	r2,r2,2
   28758:	1000051e 	bne	r2,zero,28770 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   2875c:	e0bfff17 	ldw	r2,-4(fp)
   28760:	00c00044 	movi	r3,1
   28764:	10c00005 	stb	r3,0(r2)
        return (0);
   28768:	0005883a 	mov	r2,zero
   2876c:	00003806 	br	28850 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28770:	0005303a 	rdctl	r2,status
   28774:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28778:	e0fffc17 	ldw	r3,-16(fp)
   2877c:	00bfff84 	movi	r2,-2
   28780:	1884703a 	and	r2,r3,r2
   28784:	1001703a 	wrctl	status,r2
  
  return context;
   28788:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   2878c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   28790:	e0bffd17 	ldw	r2,-12(fp)
   28794:	10800283 	ldbu	r2,10(r2)
   28798:	10803fcc 	andi	r2,r2,255
   2879c:	10002526 	beq	r2,zero,28834 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   287a0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   287a4:	e0bffe03 	ldbu	r2,-8(fp)
   287a8:	10800060 	cmpeqi	r2,r2,1
   287ac:	10000e26 	beq	r2,zero,287e8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   287b0:	00000806 	br	287d4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   287b4:	01c00084 	movi	r7,2
   287b8:	01800104 	movi	r6,4
   287bc:	000b883a 	mov	r5,zero
   287c0:	e13ffd17 	ldw	r4,-12(fp)
   287c4:	0024d240 	call	24d24 <OS_EventTaskRdy>
                     nbr_tasks++;
   287c8:	e0bff803 	ldbu	r2,-32(fp)
   287cc:	10800044 	addi	r2,r2,1
   287d0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   287d4:	e0bffd17 	ldw	r2,-12(fp)
   287d8:	10800283 	ldbu	r2,10(r2)
   287dc:	10803fcc 	andi	r2,r2,255
   287e0:	103ff41e 	bne	r2,zero,287b4 <__alt_data_end+0xfffe93b4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   287e4:	00000906 	br	2880c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   287e8:	01c00084 	movi	r7,2
   287ec:	01800104 	movi	r6,4
   287f0:	000b883a 	mov	r5,zero
   287f4:	e13ffd17 	ldw	r4,-12(fp)
   287f8:	0024d240 	call	24d24 <OS_EventTaskRdy>
                 nbr_tasks++;
   287fc:	e0bff803 	ldbu	r2,-32(fp)
   28800:	10800044 	addi	r2,r2,1
   28804:	e0bff805 	stb	r2,-32(fp)
                 break;
   28808:	0001883a 	nop
   2880c:	e0bff917 	ldw	r2,-28(fp)
   28810:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28814:	e0bffa17 	ldw	r2,-24(fp)
   28818:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   2881c:	00257700 	call	25770 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   28820:	e0bfff17 	ldw	r2,-4(fp)
   28824:	00c00384 	movi	r3,14
   28828:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   2882c:	e0bff803 	ldbu	r2,-32(fp)
   28830:	00000706 	br	28850 <OSQPendAbort+0x158>
   28834:	e0bff917 	ldw	r2,-28(fp)
   28838:	e0bffb15 	stw	r2,-20(fp)
   2883c:	e0bffb17 	ldw	r2,-20(fp)
   28840:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   28844:	e0bfff17 	ldw	r2,-4(fp)
   28848:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   2884c:	0005883a 	mov	r2,zero
}
   28850:	e037883a 	mov	sp,fp
   28854:	dfc00117 	ldw	ra,4(sp)
   28858:	df000017 	ldw	fp,0(sp)
   2885c:	dec00204 	addi	sp,sp,8
   28860:	f800283a 	ret

00028864 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   28864:	defff604 	addi	sp,sp,-40
   28868:	dfc00915 	stw	ra,36(sp)
   2886c:	df000815 	stw	fp,32(sp)
   28870:	df000804 	addi	fp,sp,32
   28874:	e13ffe15 	stw	r4,-8(fp)
   28878:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2887c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   28880:	e0bffe17 	ldw	r2,-8(fp)
   28884:	1000021e 	bne	r2,zero,28890 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   28888:	00800104 	movi	r2,4
   2888c:	00004a06 	br	289b8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   28890:	e0bffe17 	ldw	r2,-8(fp)
   28894:	10800003 	ldbu	r2,0(r2)
   28898:	10803fcc 	andi	r2,r2,255
   2889c:	108000a0 	cmpeqi	r2,r2,2
   288a0:	1000021e 	bne	r2,zero,288ac <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   288a4:	00800044 	movi	r2,1
   288a8:	00004306 	br	289b8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   288ac:	0005303a 	rdctl	r2,status
   288b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   288b4:	e0fffd17 	ldw	r3,-12(fp)
   288b8:	00bfff84 	movi	r2,-2
   288bc:	1884703a 	and	r2,r3,r2
   288c0:	1001703a 	wrctl	status,r2
  
  return context;
   288c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   288c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   288cc:	e0bffe17 	ldw	r2,-8(fp)
   288d0:	10800283 	ldbu	r2,10(r2)
   288d4:	10803fcc 	andi	r2,r2,255
   288d8:	10000c26 	beq	r2,zero,2890c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   288dc:	000f883a 	mov	r7,zero
   288e0:	01800104 	movi	r6,4
   288e4:	e17fff17 	ldw	r5,-4(fp)
   288e8:	e13ffe17 	ldw	r4,-8(fp)
   288ec:	0024d240 	call	24d24 <OS_EventTaskRdy>
   288f0:	e0bff817 	ldw	r2,-32(fp)
   288f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   288f8:	e0bff917 	ldw	r2,-28(fp)
   288fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   28900:	00257700 	call	25770 <OS_Sched>
        return (OS_ERR_NONE);
   28904:	0005883a 	mov	r2,zero
   28908:	00002b06 	br	289b8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   2890c:	e0bffe17 	ldw	r2,-8(fp)
   28910:	10800117 	ldw	r2,4(r2)
   28914:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   28918:	e0bffb17 	ldw	r2,-20(fp)
   2891c:	10c0058b 	ldhu	r3,22(r2)
   28920:	e0bffb17 	ldw	r2,-20(fp)
   28924:	1080050b 	ldhu	r2,20(r2)
   28928:	18ffffcc 	andi	r3,r3,65535
   2892c:	10bfffcc 	andi	r2,r2,65535
   28930:	18800636 	bltu	r3,r2,2894c <OSQPost+0xe8>
   28934:	e0bff817 	ldw	r2,-32(fp)
   28938:	e0bffa15 	stw	r2,-24(fp)
   2893c:	e0bffa17 	ldw	r2,-24(fp)
   28940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   28944:	00800784 	movi	r2,30
   28948:	00001b06 	br	289b8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   2894c:	e0bffb17 	ldw	r2,-20(fp)
   28950:	10800317 	ldw	r2,12(r2)
   28954:	11000104 	addi	r4,r2,4
   28958:	e0fffb17 	ldw	r3,-20(fp)
   2895c:	19000315 	stw	r4,12(r3)
   28960:	e0ffff17 	ldw	r3,-4(fp)
   28964:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   28968:	e0bffb17 	ldw	r2,-20(fp)
   2896c:	1080058b 	ldhu	r2,22(r2)
   28970:	10800044 	addi	r2,r2,1
   28974:	1007883a 	mov	r3,r2
   28978:	e0bffb17 	ldw	r2,-20(fp)
   2897c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   28980:	e0bffb17 	ldw	r2,-20(fp)
   28984:	10c00317 	ldw	r3,12(r2)
   28988:	e0bffb17 	ldw	r2,-20(fp)
   2898c:	10800217 	ldw	r2,8(r2)
   28990:	1880041e 	bne	r3,r2,289a4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   28994:	e0bffb17 	ldw	r2,-20(fp)
   28998:	10c00117 	ldw	r3,4(r2)
   2899c:	e0bffb17 	ldw	r2,-20(fp)
   289a0:	10c00315 	stw	r3,12(r2)
   289a4:	e0bff817 	ldw	r2,-32(fp)
   289a8:	e0bffc15 	stw	r2,-16(fp)
   289ac:	e0bffc17 	ldw	r2,-16(fp)
   289b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   289b4:	0005883a 	mov	r2,zero
}
   289b8:	e037883a 	mov	sp,fp
   289bc:	dfc00117 	ldw	ra,4(sp)
   289c0:	df000017 	ldw	fp,0(sp)
   289c4:	dec00204 	addi	sp,sp,8
   289c8:	f800283a 	ret

000289cc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   289cc:	defff604 	addi	sp,sp,-40
   289d0:	dfc00915 	stw	ra,36(sp)
   289d4:	df000815 	stw	fp,32(sp)
   289d8:	df000804 	addi	fp,sp,32
   289dc:	e13ffe15 	stw	r4,-8(fp)
   289e0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   289e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   289e8:	e0bffe17 	ldw	r2,-8(fp)
   289ec:	1000021e 	bne	r2,zero,289f8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   289f0:	00800104 	movi	r2,4
   289f4:	00004c06 	br	28b28 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   289f8:	e0bffe17 	ldw	r2,-8(fp)
   289fc:	10800003 	ldbu	r2,0(r2)
   28a00:	10803fcc 	andi	r2,r2,255
   28a04:	108000a0 	cmpeqi	r2,r2,2
   28a08:	1000021e 	bne	r2,zero,28a14 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   28a0c:	00800044 	movi	r2,1
   28a10:	00004506 	br	28b28 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28a14:	0005303a 	rdctl	r2,status
   28a18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28a1c:	e0fffd17 	ldw	r3,-12(fp)
   28a20:	00bfff84 	movi	r2,-2
   28a24:	1884703a 	and	r2,r3,r2
   28a28:	1001703a 	wrctl	status,r2
  
  return context;
   28a2c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   28a30:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   28a34:	e0bffe17 	ldw	r2,-8(fp)
   28a38:	10800283 	ldbu	r2,10(r2)
   28a3c:	10803fcc 	andi	r2,r2,255
   28a40:	10000c26 	beq	r2,zero,28a74 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   28a44:	000f883a 	mov	r7,zero
   28a48:	01800104 	movi	r6,4
   28a4c:	e17fff17 	ldw	r5,-4(fp)
   28a50:	e13ffe17 	ldw	r4,-8(fp)
   28a54:	0024d240 	call	24d24 <OS_EventTaskRdy>
   28a58:	e0bff817 	ldw	r2,-32(fp)
   28a5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28a60:	e0bff917 	ldw	r2,-28(fp)
   28a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   28a68:	00257700 	call	25770 <OS_Sched>
        return (OS_ERR_NONE);
   28a6c:	0005883a 	mov	r2,zero
   28a70:	00002d06 	br	28b28 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   28a74:	e0bffe17 	ldw	r2,-8(fp)
   28a78:	10800117 	ldw	r2,4(r2)
   28a7c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   28a80:	e0bffb17 	ldw	r2,-20(fp)
   28a84:	10c0058b 	ldhu	r3,22(r2)
   28a88:	e0bffb17 	ldw	r2,-20(fp)
   28a8c:	1080050b 	ldhu	r2,20(r2)
   28a90:	18ffffcc 	andi	r3,r3,65535
   28a94:	10bfffcc 	andi	r2,r2,65535
   28a98:	18800636 	bltu	r3,r2,28ab4 <OSQPostFront+0xe8>
   28a9c:	e0bff817 	ldw	r2,-32(fp)
   28aa0:	e0bffa15 	stw	r2,-24(fp)
   28aa4:	e0bffa17 	ldw	r2,-24(fp)
   28aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   28aac:	00800784 	movi	r2,30
   28ab0:	00001d06 	br	28b28 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   28ab4:	e0bffb17 	ldw	r2,-20(fp)
   28ab8:	10c00417 	ldw	r3,16(r2)
   28abc:	e0bffb17 	ldw	r2,-20(fp)
   28ac0:	10800117 	ldw	r2,4(r2)
   28ac4:	1880041e 	bne	r3,r2,28ad8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   28ac8:	e0bffb17 	ldw	r2,-20(fp)
   28acc:	10c00217 	ldw	r3,8(r2)
   28ad0:	e0bffb17 	ldw	r2,-20(fp)
   28ad4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   28ad8:	e0bffb17 	ldw	r2,-20(fp)
   28adc:	10800417 	ldw	r2,16(r2)
   28ae0:	10ffff04 	addi	r3,r2,-4
   28ae4:	e0bffb17 	ldw	r2,-20(fp)
   28ae8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   28aec:	e0bffb17 	ldw	r2,-20(fp)
   28af0:	10800417 	ldw	r2,16(r2)
   28af4:	e0ffff17 	ldw	r3,-4(fp)
   28af8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   28afc:	e0bffb17 	ldw	r2,-20(fp)
   28b00:	1080058b 	ldhu	r2,22(r2)
   28b04:	10800044 	addi	r2,r2,1
   28b08:	1007883a 	mov	r3,r2
   28b0c:	e0bffb17 	ldw	r2,-20(fp)
   28b10:	10c0058d 	sth	r3,22(r2)
   28b14:	e0bff817 	ldw	r2,-32(fp)
   28b18:	e0bffc15 	stw	r2,-16(fp)
   28b1c:	e0bffc17 	ldw	r2,-16(fp)
   28b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   28b24:	0005883a 	mov	r2,zero
}
   28b28:	e037883a 	mov	sp,fp
   28b2c:	dfc00117 	ldw	ra,4(sp)
   28b30:	df000017 	ldw	fp,0(sp)
   28b34:	dec00204 	addi	sp,sp,8
   28b38:	f800283a 	ret

00028b3c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   28b3c:	defff504 	addi	sp,sp,-44
   28b40:	dfc00a15 	stw	ra,40(sp)
   28b44:	df000915 	stw	fp,36(sp)
   28b48:	df000904 	addi	fp,sp,36
   28b4c:	e13ffd15 	stw	r4,-12(fp)
   28b50:	e17ffe15 	stw	r5,-8(fp)
   28b54:	3005883a 	mov	r2,r6
   28b58:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   28b5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   28b60:	e0bffd17 	ldw	r2,-12(fp)
   28b64:	1000021e 	bne	r2,zero,28b70 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   28b68:	00800104 	movi	r2,4
   28b6c:	00007106 	br	28d34 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   28b70:	e0bffd17 	ldw	r2,-12(fp)
   28b74:	10800003 	ldbu	r2,0(r2)
   28b78:	10803fcc 	andi	r2,r2,255
   28b7c:	108000a0 	cmpeqi	r2,r2,2
   28b80:	1000021e 	bne	r2,zero,28b8c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   28b84:	00800044 	movi	r2,1
   28b88:	00006a06 	br	28d34 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28b8c:	0005303a 	rdctl	r2,status
   28b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28b94:	e0fffc17 	ldw	r3,-16(fp)
   28b98:	00bfff84 	movi	r2,-2
   28b9c:	1884703a 	and	r2,r3,r2
   28ba0:	1001703a 	wrctl	status,r2
  
  return context;
   28ba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   28ba8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   28bac:	e0bffd17 	ldw	r2,-12(fp)
   28bb0:	10800283 	ldbu	r2,10(r2)
   28bb4:	10803fcc 	andi	r2,r2,255
   28bb8:	10001d26 	beq	r2,zero,28c30 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   28bbc:	e0bfff03 	ldbu	r2,-4(fp)
   28bc0:	1080004c 	andi	r2,r2,1
   28bc4:	10000b26 	beq	r2,zero,28bf4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   28bc8:	00000506 	br	28be0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   28bcc:	000f883a 	mov	r7,zero
   28bd0:	01800104 	movi	r6,4
   28bd4:	e17ffe17 	ldw	r5,-8(fp)
   28bd8:	e13ffd17 	ldw	r4,-12(fp)
   28bdc:	0024d240 	call	24d24 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   28be0:	e0bffd17 	ldw	r2,-12(fp)
   28be4:	10800283 	ldbu	r2,10(r2)
   28be8:	10803fcc 	andi	r2,r2,255
   28bec:	103ff71e 	bne	r2,zero,28bcc <__alt_data_end+0xfffe97cc>
   28bf0:	00000506 	br	28c08 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   28bf4:	000f883a 	mov	r7,zero
   28bf8:	01800104 	movi	r6,4
   28bfc:	e17ffe17 	ldw	r5,-8(fp)
   28c00:	e13ffd17 	ldw	r4,-12(fp)
   28c04:	0024d240 	call	24d24 <OS_EventTaskRdy>
   28c08:	e0bff717 	ldw	r2,-36(fp)
   28c0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28c10:	e0bff817 	ldw	r2,-32(fp)
   28c14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   28c18:	e0bfff03 	ldbu	r2,-4(fp)
   28c1c:	1080010c 	andi	r2,r2,4
   28c20:	1000011e 	bne	r2,zero,28c28 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   28c24:	00257700 	call	25770 <OS_Sched>
        }
        return (OS_ERR_NONE);
   28c28:	0005883a 	mov	r2,zero
   28c2c:	00004106 	br	28d34 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   28c30:	e0bffd17 	ldw	r2,-12(fp)
   28c34:	10800117 	ldw	r2,4(r2)
   28c38:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   28c3c:	e0bffa17 	ldw	r2,-24(fp)
   28c40:	10c0058b 	ldhu	r3,22(r2)
   28c44:	e0bffa17 	ldw	r2,-24(fp)
   28c48:	1080050b 	ldhu	r2,20(r2)
   28c4c:	18ffffcc 	andi	r3,r3,65535
   28c50:	10bfffcc 	andi	r2,r2,65535
   28c54:	18800636 	bltu	r3,r2,28c70 <OSQPostOpt+0x134>
   28c58:	e0bff717 	ldw	r2,-36(fp)
   28c5c:	e0bff915 	stw	r2,-28(fp)
   28c60:	e0bff917 	ldw	r2,-28(fp)
   28c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   28c68:	00800784 	movi	r2,30
   28c6c:	00003106 	br	28d34 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   28c70:	e0bfff03 	ldbu	r2,-4(fp)
   28c74:	1080008c 	andi	r2,r2,2
   28c78:	10001326 	beq	r2,zero,28cc8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   28c7c:	e0bffa17 	ldw	r2,-24(fp)
   28c80:	10c00417 	ldw	r3,16(r2)
   28c84:	e0bffa17 	ldw	r2,-24(fp)
   28c88:	10800117 	ldw	r2,4(r2)
   28c8c:	1880041e 	bne	r3,r2,28ca0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   28c90:	e0bffa17 	ldw	r2,-24(fp)
   28c94:	10c00217 	ldw	r3,8(r2)
   28c98:	e0bffa17 	ldw	r2,-24(fp)
   28c9c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   28ca0:	e0bffa17 	ldw	r2,-24(fp)
   28ca4:	10800417 	ldw	r2,16(r2)
   28ca8:	10ffff04 	addi	r3,r2,-4
   28cac:	e0bffa17 	ldw	r2,-24(fp)
   28cb0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   28cb4:	e0bffa17 	ldw	r2,-24(fp)
   28cb8:	10800417 	ldw	r2,16(r2)
   28cbc:	e0fffe17 	ldw	r3,-8(fp)
   28cc0:	10c00015 	stw	r3,0(r2)
   28cc4:	00001006 	br	28d08 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   28cc8:	e0bffa17 	ldw	r2,-24(fp)
   28ccc:	10800317 	ldw	r2,12(r2)
   28cd0:	11000104 	addi	r4,r2,4
   28cd4:	e0fffa17 	ldw	r3,-24(fp)
   28cd8:	19000315 	stw	r4,12(r3)
   28cdc:	e0fffe17 	ldw	r3,-8(fp)
   28ce0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   28ce4:	e0bffa17 	ldw	r2,-24(fp)
   28ce8:	10c00317 	ldw	r3,12(r2)
   28cec:	e0bffa17 	ldw	r2,-24(fp)
   28cf0:	10800217 	ldw	r2,8(r2)
   28cf4:	1880041e 	bne	r3,r2,28d08 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   28cf8:	e0bffa17 	ldw	r2,-24(fp)
   28cfc:	10c00117 	ldw	r3,4(r2)
   28d00:	e0bffa17 	ldw	r2,-24(fp)
   28d04:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   28d08:	e0bffa17 	ldw	r2,-24(fp)
   28d0c:	1080058b 	ldhu	r2,22(r2)
   28d10:	10800044 	addi	r2,r2,1
   28d14:	1007883a 	mov	r3,r2
   28d18:	e0bffa17 	ldw	r2,-24(fp)
   28d1c:	10c0058d 	sth	r3,22(r2)
   28d20:	e0bff717 	ldw	r2,-36(fp)
   28d24:	e0bffb15 	stw	r2,-20(fp)
   28d28:	e0bffb17 	ldw	r2,-20(fp)
   28d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   28d30:	0005883a 	mov	r2,zero
}
   28d34:	e037883a 	mov	sp,fp
   28d38:	dfc00117 	ldw	ra,4(sp)
   28d3c:	df000017 	ldw	fp,0(sp)
   28d40:	dec00204 	addi	sp,sp,8
   28d44:	f800283a 	ret

00028d48 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   28d48:	defff604 	addi	sp,sp,-40
   28d4c:	df000915 	stw	fp,36(sp)
   28d50:	df000904 	addi	fp,sp,36
   28d54:	e13ffe15 	stw	r4,-8(fp)
   28d58:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   28d5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   28d60:	e0bffe17 	ldw	r2,-8(fp)
   28d64:	1000021e 	bne	r2,zero,28d70 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   28d68:	00800104 	movi	r2,4
   28d6c:	00004906 	br	28e94 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   28d70:	e0bfff17 	ldw	r2,-4(fp)
   28d74:	1000021e 	bne	r2,zero,28d80 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   28d78:	00800244 	movi	r2,9
   28d7c:	00004506 	br	28e94 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   28d80:	e0bffe17 	ldw	r2,-8(fp)
   28d84:	10800003 	ldbu	r2,0(r2)
   28d88:	10803fcc 	andi	r2,r2,255
   28d8c:	108000a0 	cmpeqi	r2,r2,2
   28d90:	1000021e 	bne	r2,zero,28d9c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   28d94:	00800044 	movi	r2,1
   28d98:	00003e06 	br	28e94 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28d9c:	0005303a 	rdctl	r2,status
   28da0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28da4:	e0fffd17 	ldw	r3,-12(fp)
   28da8:	00bfff84 	movi	r2,-2
   28dac:	1884703a 	and	r2,r3,r2
   28db0:	1001703a 	wrctl	status,r2
  
  return context;
   28db4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   28db8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   28dbc:	e0bffe17 	ldw	r2,-8(fp)
   28dc0:	10c00283 	ldbu	r3,10(r2)
   28dc4:	e0bfff17 	ldw	r2,-4(fp)
   28dc8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   28dcc:	e0bffe17 	ldw	r2,-8(fp)
   28dd0:	108002c4 	addi	r2,r2,11
   28dd4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   28dd8:	e0bfff17 	ldw	r2,-4(fp)
   28ddc:	10800204 	addi	r2,r2,8
   28de0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   28de4:	e03ff705 	stb	zero,-36(fp)
   28de8:	00000b06 	br	28e18 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   28dec:	e0bff917 	ldw	r2,-28(fp)
   28df0:	10c00044 	addi	r3,r2,1
   28df4:	e0fff915 	stw	r3,-28(fp)
   28df8:	e0fff817 	ldw	r3,-32(fp)
   28dfc:	19000044 	addi	r4,r3,1
   28e00:	e13ff815 	stw	r4,-32(fp)
   28e04:	18c00003 	ldbu	r3,0(r3)
   28e08:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   28e0c:	e0bff703 	ldbu	r2,-36(fp)
   28e10:	10800044 	addi	r2,r2,1
   28e14:	e0bff705 	stb	r2,-36(fp)
   28e18:	e0bff703 	ldbu	r2,-36(fp)
   28e1c:	108000f0 	cmpltui	r2,r2,3
   28e20:	103ff21e 	bne	r2,zero,28dec <__alt_data_end+0xfffe99ec>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   28e24:	e0bffe17 	ldw	r2,-8(fp)
   28e28:	10800117 	ldw	r2,4(r2)
   28e2c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   28e30:	e0bffc17 	ldw	r2,-16(fp)
   28e34:	1080058b 	ldhu	r2,22(r2)
   28e38:	10bfffcc 	andi	r2,r2,65535
   28e3c:	10000626 	beq	r2,zero,28e58 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   28e40:	e0bffc17 	ldw	r2,-16(fp)
   28e44:	10800417 	ldw	r2,16(r2)
   28e48:	10c00017 	ldw	r3,0(r2)
   28e4c:	e0bfff17 	ldw	r2,-4(fp)
   28e50:	10c00015 	stw	r3,0(r2)
   28e54:	00000206 	br	28e60 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   28e58:	e0bfff17 	ldw	r2,-4(fp)
   28e5c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   28e60:	e0bffc17 	ldw	r2,-16(fp)
   28e64:	10c0058b 	ldhu	r3,22(r2)
   28e68:	e0bfff17 	ldw	r2,-4(fp)
   28e6c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   28e70:	e0bffc17 	ldw	r2,-16(fp)
   28e74:	10c0050b 	ldhu	r3,20(r2)
   28e78:	e0bfff17 	ldw	r2,-4(fp)
   28e7c:	10c0018d 	sth	r3,6(r2)
   28e80:	e0bffa17 	ldw	r2,-24(fp)
   28e84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28e88:	e0bffb17 	ldw	r2,-20(fp)
   28e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   28e90:	0005883a 	mov	r2,zero
}
   28e94:	e037883a 	mov	sp,fp
   28e98:	df000017 	ldw	fp,0(sp)
   28e9c:	dec00104 	addi	sp,sp,4
   28ea0:	f800283a 	ret

00028ea4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   28ea4:	defffb04 	addi	sp,sp,-20
   28ea8:	dfc00415 	stw	ra,16(sp)
   28eac:	df000315 	stw	fp,12(sp)
   28eb0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   28eb4:	01407804 	movi	r5,480
   28eb8:	010000f4 	movhi	r4,3
   28ebc:	211a9004 	addi	r4,r4,27200
   28ec0:	00256b40 	call	256b4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   28ec4:	008000f4 	movhi	r2,3
   28ec8:	109a9004 	addi	r2,r2,27200
   28ecc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   28ed0:	008000f4 	movhi	r2,3
   28ed4:	109a9604 	addi	r2,r2,27224
   28ed8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   28edc:	e03ffd0d 	sth	zero,-12(fp)
   28ee0:	00000c06 	br	28f14 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   28ee4:	e0bffe17 	ldw	r2,-8(fp)
   28ee8:	e0ffff17 	ldw	r3,-4(fp)
   28eec:	10c00015 	stw	r3,0(r2)
        pq1++;
   28ef0:	e0bffe17 	ldw	r2,-8(fp)
   28ef4:	10800604 	addi	r2,r2,24
   28ef8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   28efc:	e0bfff17 	ldw	r2,-4(fp)
   28f00:	10800604 	addi	r2,r2,24
   28f04:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   28f08:	e0bffd0b 	ldhu	r2,-12(fp)
   28f0c:	10800044 	addi	r2,r2,1
   28f10:	e0bffd0d 	sth	r2,-12(fp)
   28f14:	e0bffd0b 	ldhu	r2,-12(fp)
   28f18:	108004f0 	cmpltui	r2,r2,19
   28f1c:	103ff11e 	bne	r2,zero,28ee4 <__alt_data_end+0xfffe9ae4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   28f20:	e0bffe17 	ldw	r2,-8(fp)
   28f24:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   28f28:	008000f4 	movhi	r2,3
   28f2c:	109a9004 	addi	r2,r2,27200
   28f30:	d0a70115 	stw	r2,-25596(gp)
#endif
}
   28f34:	0001883a 	nop
   28f38:	e037883a 	mov	sp,fp
   28f3c:	dfc00117 	ldw	ra,4(sp)
   28f40:	df000017 	ldw	fp,0(sp)
   28f44:	dec00204 	addi	sp,sp,8
   28f48:	f800283a 	ret

00028f4c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   28f4c:	defffa04 	addi	sp,sp,-24
   28f50:	df000515 	stw	fp,20(sp)
   28f54:	df000504 	addi	fp,sp,20
   28f58:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   28f5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   28f60:	e0bfff17 	ldw	r2,-4(fp)
   28f64:	1000021e 	bne	r2,zero,28f70 <OSSemAccept+0x24>
        return (0);
   28f68:	0005883a 	mov	r2,zero
   28f6c:	00001f06 	br	28fec <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   28f70:	e0bfff17 	ldw	r2,-4(fp)
   28f74:	10800003 	ldbu	r2,0(r2)
   28f78:	10803fcc 	andi	r2,r2,255
   28f7c:	108000e0 	cmpeqi	r2,r2,3
   28f80:	1000021e 	bne	r2,zero,28f8c <OSSemAccept+0x40>
        return (0);
   28f84:	0005883a 	mov	r2,zero
   28f88:	00001806 	br	28fec <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28f8c:	0005303a 	rdctl	r2,status
   28f90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28f94:	e0fffe17 	ldw	r3,-8(fp)
   28f98:	00bfff84 	movi	r2,-2
   28f9c:	1884703a 	and	r2,r3,r2
   28fa0:	1001703a 	wrctl	status,r2
  
  return context;
   28fa4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   28fa8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   28fac:	e0bfff17 	ldw	r2,-4(fp)
   28fb0:	1080020b 	ldhu	r2,8(r2)
   28fb4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   28fb8:	e0bffd0b 	ldhu	r2,-12(fp)
   28fbc:	10000626 	beq	r2,zero,28fd8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   28fc0:	e0bfff17 	ldw	r2,-4(fp)
   28fc4:	1080020b 	ldhu	r2,8(r2)
   28fc8:	10bfffc4 	addi	r2,r2,-1
   28fcc:	1007883a 	mov	r3,r2
   28fd0:	e0bfff17 	ldw	r2,-4(fp)
   28fd4:	10c0020d 	sth	r3,8(r2)
   28fd8:	e0bffb17 	ldw	r2,-20(fp)
   28fdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28fe0:	e0bffc17 	ldw	r2,-16(fp)
   28fe4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   28fe8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   28fec:	e037883a 	mov	sp,fp
   28ff0:	df000017 	ldw	fp,0(sp)
   28ff4:	dec00104 	addi	sp,sp,4
   28ff8:	f800283a 	ret

00028ffc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   28ffc:	defff904 	addi	sp,sp,-28
   29000:	dfc00615 	stw	ra,24(sp)
   29004:	df000515 	stw	fp,20(sp)
   29008:	df000504 	addi	fp,sp,20
   2900c:	2005883a 	mov	r2,r4
   29010:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   29014:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   29018:	d0a70403 	ldbu	r2,-25584(gp)
   2901c:	10803fcc 	andi	r2,r2,255
   29020:	10000226 	beq	r2,zero,2902c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   29024:	0005883a 	mov	r2,zero
   29028:	00002506 	br	290c0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2902c:	0005303a 	rdctl	r2,status
   29030:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29034:	e0fffe17 	ldw	r3,-8(fp)
   29038:	00bfff84 	movi	r2,-2
   2903c:	1884703a 	and	r2,r3,r2
   29040:	1001703a 	wrctl	status,r2
  
  return context;
   29044:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   29048:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   2904c:	d0a70317 	ldw	r2,-25588(gp)
   29050:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   29054:	d0a70317 	ldw	r2,-25588(gp)
   29058:	10000326 	beq	r2,zero,29068 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   2905c:	d0a70317 	ldw	r2,-25588(gp)
   29060:	10800117 	ldw	r2,4(r2)
   29064:	d0a70315 	stw	r2,-25588(gp)
   29068:	e0bffb17 	ldw	r2,-20(fp)
   2906c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29070:	e0bffc17 	ldw	r2,-16(fp)
   29074:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   29078:	e0bffd17 	ldw	r2,-12(fp)
   2907c:	10000f26 	beq	r2,zero,290bc <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   29080:	e0bffd17 	ldw	r2,-12(fp)
   29084:	00c000c4 	movi	r3,3
   29088:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   2908c:	e0bffd17 	ldw	r2,-12(fp)
   29090:	e0ffff0b 	ldhu	r3,-4(fp)
   29094:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   29098:	e0bffd17 	ldw	r2,-12(fp)
   2909c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   290a0:	e0bffd17 	ldw	r2,-12(fp)
   290a4:	00c00fc4 	movi	r3,63
   290a8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   290ac:	e0bffd17 	ldw	r2,-12(fp)
   290b0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   290b4:	e13ffd17 	ldw	r4,-12(fp)
   290b8:	00252d40 	call	252d4 <OS_EventWaitListInit>
    }
    return (pevent);
   290bc:	e0bffd17 	ldw	r2,-12(fp)
}
   290c0:	e037883a 	mov	sp,fp
   290c4:	dfc00117 	ldw	ra,4(sp)
   290c8:	df000017 	ldw	fp,0(sp)
   290cc:	dec00204 	addi	sp,sp,8
   290d0:	f800283a 	ret

000290d4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   290d4:	defff304 	addi	sp,sp,-52
   290d8:	dfc00c15 	stw	ra,48(sp)
   290dc:	df000b15 	stw	fp,44(sp)
   290e0:	df000b04 	addi	fp,sp,44
   290e4:	e13ffd15 	stw	r4,-12(fp)
   290e8:	2805883a 	mov	r2,r5
   290ec:	e1bfff15 	stw	r6,-4(fp)
   290f0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   290f4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   290f8:	e0bfff17 	ldw	r2,-4(fp)
   290fc:	1000021e 	bne	r2,zero,29108 <OSSemDel+0x34>
        return (pevent);
   29100:	e0bffd17 	ldw	r2,-12(fp)
   29104:	00007e06 	br	29300 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   29108:	e0bffd17 	ldw	r2,-12(fp)
   2910c:	1000051e 	bne	r2,zero,29124 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   29110:	e0bfff17 	ldw	r2,-4(fp)
   29114:	00c00104 	movi	r3,4
   29118:	10c00005 	stb	r3,0(r2)
        return (pevent);
   2911c:	e0bffd17 	ldw	r2,-12(fp)
   29120:	00007706 	br	29300 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   29124:	e0bffd17 	ldw	r2,-12(fp)
   29128:	10800003 	ldbu	r2,0(r2)
   2912c:	10803fcc 	andi	r2,r2,255
   29130:	108000e0 	cmpeqi	r2,r2,3
   29134:	1000051e 	bne	r2,zero,2914c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   29138:	e0bfff17 	ldw	r2,-4(fp)
   2913c:	00c00044 	movi	r3,1
   29140:	10c00005 	stb	r3,0(r2)
        return (pevent);
   29144:	e0bffd17 	ldw	r2,-12(fp)
   29148:	00006d06 	br	29300 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   2914c:	d0a70403 	ldbu	r2,-25584(gp)
   29150:	10803fcc 	andi	r2,r2,255
   29154:	10000526 	beq	r2,zero,2916c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   29158:	e0bfff17 	ldw	r2,-4(fp)
   2915c:	00c003c4 	movi	r3,15
   29160:	10c00005 	stb	r3,0(r2)
        return (pevent);
   29164:	e0bffd17 	ldw	r2,-12(fp)
   29168:	00006506 	br	29300 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2916c:	0005303a 	rdctl	r2,status
   29170:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29174:	e0fffc17 	ldw	r3,-16(fp)
   29178:	00bfff84 	movi	r2,-2
   2917c:	1884703a 	and	r2,r3,r2
   29180:	1001703a 	wrctl	status,r2
  
  return context;
   29184:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   29188:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   2918c:	e0bffd17 	ldw	r2,-12(fp)
   29190:	10800283 	ldbu	r2,10(r2)
   29194:	10803fcc 	andi	r2,r2,255
   29198:	10000326 	beq	r2,zero,291a8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   2919c:	00800044 	movi	r2,1
   291a0:	e0bff505 	stb	r2,-44(fp)
   291a4:	00000106 	br	291ac <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   291a8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   291ac:	e0bffe03 	ldbu	r2,-8(fp)
   291b0:	10000326 	beq	r2,zero,291c0 <OSSemDel+0xec>
   291b4:	10800060 	cmpeqi	r2,r2,1
   291b8:	1000281e 	bne	r2,zero,2925c <OSSemDel+0x188>
   291bc:	00004506 	br	292d4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   291c0:	e0bff503 	ldbu	r2,-44(fp)
   291c4:	1000161e 	bne	r2,zero,29220 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   291c8:	e0bffd17 	ldw	r2,-12(fp)
   291cc:	00c00fc4 	movi	r3,63
   291d0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   291d4:	e0bffd17 	ldw	r2,-12(fp)
   291d8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   291dc:	e0bffd17 	ldw	r2,-12(fp)
   291e0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   291e4:	d0e70317 	ldw	r3,-25588(gp)
   291e8:	e0bffd17 	ldw	r2,-12(fp)
   291ec:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   291f0:	e0bffd17 	ldw	r2,-12(fp)
   291f4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   291f8:	e0bffd17 	ldw	r2,-12(fp)
   291fc:	d0a70315 	stw	r2,-25588(gp)
   29200:	e0bff717 	ldw	r2,-36(fp)
   29204:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29208:	e0bff817 	ldw	r2,-32(fp)
   2920c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   29210:	e0bfff17 	ldw	r2,-4(fp)
   29214:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   29218:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   2921c:	00003706 	br	292fc <OSSemDel+0x228>
   29220:	e0bff717 	ldw	r2,-36(fp)
   29224:	e0bff915 	stw	r2,-28(fp)
   29228:	e0bff917 	ldw	r2,-28(fp)
   2922c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   29230:	e0bfff17 	ldw	r2,-4(fp)
   29234:	00c01244 	movi	r3,73
   29238:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   2923c:	e0bffd17 	ldw	r2,-12(fp)
   29240:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   29244:	00002d06 	br	292fc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   29248:	000f883a 	mov	r7,zero
   2924c:	01800044 	movi	r6,1
   29250:	000b883a 	mov	r5,zero
   29254:	e13ffd17 	ldw	r4,-12(fp)
   29258:	0024d240 	call	24d24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   2925c:	e0bffd17 	ldw	r2,-12(fp)
   29260:	10800283 	ldbu	r2,10(r2)
   29264:	10803fcc 	andi	r2,r2,255
   29268:	103ff71e 	bne	r2,zero,29248 <__alt_data_end+0xfffe9e48>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   2926c:	e0bffd17 	ldw	r2,-12(fp)
   29270:	00c00fc4 	movi	r3,63
   29274:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   29278:	e0bffd17 	ldw	r2,-12(fp)
   2927c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   29280:	e0bffd17 	ldw	r2,-12(fp)
   29284:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   29288:	d0e70317 	ldw	r3,-25588(gp)
   2928c:	e0bffd17 	ldw	r2,-12(fp)
   29290:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   29294:	e0bffd17 	ldw	r2,-12(fp)
   29298:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   2929c:	e0bffd17 	ldw	r2,-12(fp)
   292a0:	d0a70315 	stw	r2,-25588(gp)
   292a4:	e0bff717 	ldw	r2,-36(fp)
   292a8:	e0bffa15 	stw	r2,-24(fp)
   292ac:	e0bffa17 	ldw	r2,-24(fp)
   292b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   292b4:	e0bff503 	ldbu	r2,-44(fp)
   292b8:	10800058 	cmpnei	r2,r2,1
   292bc:	1000011e 	bne	r2,zero,292c4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   292c0:	00257700 	call	25770 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   292c4:	e0bfff17 	ldw	r2,-4(fp)
   292c8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   292cc:	e03ff615 	stw	zero,-40(fp)
             break;
   292d0:	00000a06 	br	292fc <OSSemDel+0x228>
   292d4:	e0bff717 	ldw	r2,-36(fp)
   292d8:	e0bffb15 	stw	r2,-20(fp)
   292dc:	e0bffb17 	ldw	r2,-20(fp)
   292e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   292e4:	e0bfff17 	ldw	r2,-4(fp)
   292e8:	00c001c4 	movi	r3,7
   292ec:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   292f0:	e0bffd17 	ldw	r2,-12(fp)
   292f4:	e0bff615 	stw	r2,-40(fp)
             break;
   292f8:	0001883a 	nop
    }
    return (pevent_return);
   292fc:	e0bff617 	ldw	r2,-40(fp)
}
   29300:	e037883a 	mov	sp,fp
   29304:	dfc00117 	ldw	ra,4(sp)
   29308:	df000017 	ldw	fp,0(sp)
   2930c:	dec00204 	addi	sp,sp,8
   29310:	f800283a 	ret

00029314 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   29314:	defff504 	addi	sp,sp,-44
   29318:	dfc00a15 	stw	ra,40(sp)
   2931c:	df000915 	stw	fp,36(sp)
   29320:	df000904 	addi	fp,sp,36
   29324:	e13ffd15 	stw	r4,-12(fp)
   29328:	2805883a 	mov	r2,r5
   2932c:	e1bfff15 	stw	r6,-4(fp)
   29330:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   29334:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   29338:	e0bfff17 	ldw	r2,-4(fp)
   2933c:	10007226 	beq	r2,zero,29508 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   29340:	e0bffd17 	ldw	r2,-12(fp)
   29344:	1000041e 	bne	r2,zero,29358 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   29348:	e0bfff17 	ldw	r2,-4(fp)
   2934c:	00c00104 	movi	r3,4
   29350:	10c00005 	stb	r3,0(r2)
        return;
   29354:	00006d06 	br	2950c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   29358:	e0bffd17 	ldw	r2,-12(fp)
   2935c:	10800003 	ldbu	r2,0(r2)
   29360:	10803fcc 	andi	r2,r2,255
   29364:	108000e0 	cmpeqi	r2,r2,3
   29368:	1000041e 	bne	r2,zero,2937c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   2936c:	e0bfff17 	ldw	r2,-4(fp)
   29370:	00c00044 	movi	r3,1
   29374:	10c00005 	stb	r3,0(r2)
        return;
   29378:	00006406 	br	2950c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   2937c:	d0a70403 	ldbu	r2,-25584(gp)
   29380:	10803fcc 	andi	r2,r2,255
   29384:	10000426 	beq	r2,zero,29398 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   29388:	e0bfff17 	ldw	r2,-4(fp)
   2938c:	00c00084 	movi	r3,2
   29390:	10c00005 	stb	r3,0(r2)
        return;
   29394:	00005d06 	br	2950c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   29398:	d0a6f603 	ldbu	r2,-25640(gp)
   2939c:	10803fcc 	andi	r2,r2,255
   293a0:	10000426 	beq	r2,zero,293b4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   293a4:	e0bfff17 	ldw	r2,-4(fp)
   293a8:	00c00344 	movi	r3,13
   293ac:	10c00005 	stb	r3,0(r2)
        return;
   293b0:	00005606 	br	2950c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   293b4:	0005303a 	rdctl	r2,status
   293b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   293bc:	e0fffc17 	ldw	r3,-16(fp)
   293c0:	00bfff84 	movi	r2,-2
   293c4:	1884703a 	and	r2,r3,r2
   293c8:	1001703a 	wrctl	status,r2
  
  return context;
   293cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   293d0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   293d4:	e0bffd17 	ldw	r2,-12(fp)
   293d8:	1080020b 	ldhu	r2,8(r2)
   293dc:	10bfffcc 	andi	r2,r2,65535
   293e0:	10000d26 	beq	r2,zero,29418 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   293e4:	e0bffd17 	ldw	r2,-12(fp)
   293e8:	1080020b 	ldhu	r2,8(r2)
   293ec:	10bfffc4 	addi	r2,r2,-1
   293f0:	1007883a 	mov	r3,r2
   293f4:	e0bffd17 	ldw	r2,-12(fp)
   293f8:	10c0020d 	sth	r3,8(r2)
   293fc:	e0bff717 	ldw	r2,-36(fp)
   29400:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29404:	e0bff817 	ldw	r2,-32(fp)
   29408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   2940c:	e0bfff17 	ldw	r2,-4(fp)
   29410:	10000005 	stb	zero,0(r2)
        return;
   29414:	00003d06 	br	2950c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   29418:	d0a70517 	ldw	r2,-25580(gp)
   2941c:	d0e70517 	ldw	r3,-25580(gp)
   29420:	18c00c03 	ldbu	r3,48(r3)
   29424:	18c00054 	ori	r3,r3,1
   29428:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   2942c:	d0a70517 	ldw	r2,-25580(gp)
   29430:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   29434:	d0a70517 	ldw	r2,-25580(gp)
   29438:	e0fffe0b 	ldhu	r3,-8(fp)
   2943c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   29440:	e13ffd17 	ldw	r4,-12(fp)
   29444:	0024ebc0 	call	24ebc <OS_EventTaskWait>
   29448:	e0bff717 	ldw	r2,-36(fp)
   2944c:	e0bffb15 	stw	r2,-20(fp)
   29450:	e0bffb17 	ldw	r2,-20(fp)
   29454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   29458:	00257700 	call	25770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2945c:	0005303a 	rdctl	r2,status
   29460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29464:	e0fff917 	ldw	r3,-28(fp)
   29468:	00bfff84 	movi	r2,-2
   2946c:	1884703a 	and	r2,r3,r2
   29470:	1001703a 	wrctl	status,r2
  
  return context;
   29474:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   29478:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   2947c:	d0a70517 	ldw	r2,-25580(gp)
   29480:	10800c43 	ldbu	r2,49(r2)
   29484:	10803fcc 	andi	r2,r2,255
   29488:	10000326 	beq	r2,zero,29498 <OSSemPend+0x184>
   2948c:	108000a0 	cmpeqi	r2,r2,2
   29490:	1000041e 	bne	r2,zero,294a4 <OSSemPend+0x190>
   29494:	00000706 	br	294b4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   29498:	e0bfff17 	ldw	r2,-4(fp)
   2949c:	10000005 	stb	zero,0(r2)
             break;
   294a0:	00000c06 	br	294d4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   294a4:	e0bfff17 	ldw	r2,-4(fp)
   294a8:	00c00384 	movi	r3,14
   294ac:	10c00005 	stb	r3,0(r2)
             break;
   294b0:	00000806 	br	294d4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   294b4:	d0a70517 	ldw	r2,-25580(gp)
   294b8:	e17ffd17 	ldw	r5,-12(fp)
   294bc:	1009883a 	mov	r4,r2
   294c0:	002511c0 	call	2511c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   294c4:	e0bfff17 	ldw	r2,-4(fp)
   294c8:	00c00284 	movi	r3,10
   294cc:	10c00005 	stb	r3,0(r2)
             break;
   294d0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   294d4:	d0a70517 	ldw	r2,-25580(gp)
   294d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   294dc:	d0a70517 	ldw	r2,-25580(gp)
   294e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   294e4:	d0a70517 	ldw	r2,-25580(gp)
   294e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   294ec:	d0a70517 	ldw	r2,-25580(gp)
   294f0:	10000815 	stw	zero,32(r2)
   294f4:	e0bff717 	ldw	r2,-36(fp)
   294f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   294fc:	e0bffa17 	ldw	r2,-24(fp)
   29500:	1001703a 	wrctl	status,r2
   29504:	00000106 	br	2950c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   29508:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   2950c:	e037883a 	mov	sp,fp
   29510:	dfc00117 	ldw	ra,4(sp)
   29514:	df000017 	ldw	fp,0(sp)
   29518:	dec00204 	addi	sp,sp,8
   2951c:	f800283a 	ret

00029520 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   29520:	defff604 	addi	sp,sp,-40
   29524:	dfc00915 	stw	ra,36(sp)
   29528:	df000815 	stw	fp,32(sp)
   2952c:	df000804 	addi	fp,sp,32
   29530:	e13ffd15 	stw	r4,-12(fp)
   29534:	2805883a 	mov	r2,r5
   29538:	e1bfff15 	stw	r6,-4(fp)
   2953c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   29540:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   29544:	e0bfff17 	ldw	r2,-4(fp)
   29548:	1000021e 	bne	r2,zero,29554 <OSSemPendAbort+0x34>
        return (0);
   2954c:	0005883a 	mov	r2,zero
   29550:	00004906 	br	29678 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   29554:	e0bffd17 	ldw	r2,-12(fp)
   29558:	1000051e 	bne	r2,zero,29570 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   2955c:	e0bfff17 	ldw	r2,-4(fp)
   29560:	00c00104 	movi	r3,4
   29564:	10c00005 	stb	r3,0(r2)
        return (0);
   29568:	0005883a 	mov	r2,zero
   2956c:	00004206 	br	29678 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   29570:	e0bffd17 	ldw	r2,-12(fp)
   29574:	10800003 	ldbu	r2,0(r2)
   29578:	10803fcc 	andi	r2,r2,255
   2957c:	108000e0 	cmpeqi	r2,r2,3
   29580:	1000051e 	bne	r2,zero,29598 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   29584:	e0bfff17 	ldw	r2,-4(fp)
   29588:	00c00044 	movi	r3,1
   2958c:	10c00005 	stb	r3,0(r2)
        return (0);
   29590:	0005883a 	mov	r2,zero
   29594:	00003806 	br	29678 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29598:	0005303a 	rdctl	r2,status
   2959c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   295a0:	e0fffc17 	ldw	r3,-16(fp)
   295a4:	00bfff84 	movi	r2,-2
   295a8:	1884703a 	and	r2,r3,r2
   295ac:	1001703a 	wrctl	status,r2
  
  return context;
   295b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   295b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   295b8:	e0bffd17 	ldw	r2,-12(fp)
   295bc:	10800283 	ldbu	r2,10(r2)
   295c0:	10803fcc 	andi	r2,r2,255
   295c4:	10002526 	beq	r2,zero,2965c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   295c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   295cc:	e0bffe03 	ldbu	r2,-8(fp)
   295d0:	10800060 	cmpeqi	r2,r2,1
   295d4:	10000e26 	beq	r2,zero,29610 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   295d8:	00000806 	br	295fc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   295dc:	01c00084 	movi	r7,2
   295e0:	01800044 	movi	r6,1
   295e4:	000b883a 	mov	r5,zero
   295e8:	e13ffd17 	ldw	r4,-12(fp)
   295ec:	0024d240 	call	24d24 <OS_EventTaskRdy>
                     nbr_tasks++;
   295f0:	e0bff803 	ldbu	r2,-32(fp)
   295f4:	10800044 	addi	r2,r2,1
   295f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   295fc:	e0bffd17 	ldw	r2,-12(fp)
   29600:	10800283 	ldbu	r2,10(r2)
   29604:	10803fcc 	andi	r2,r2,255
   29608:	103ff41e 	bne	r2,zero,295dc <__alt_data_end+0xfffea1dc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   2960c:	00000906 	br	29634 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   29610:	01c00084 	movi	r7,2
   29614:	01800044 	movi	r6,1
   29618:	000b883a 	mov	r5,zero
   2961c:	e13ffd17 	ldw	r4,-12(fp)
   29620:	0024d240 	call	24d24 <OS_EventTaskRdy>
                 nbr_tasks++;
   29624:	e0bff803 	ldbu	r2,-32(fp)
   29628:	10800044 	addi	r2,r2,1
   2962c:	e0bff805 	stb	r2,-32(fp)
                 break;
   29630:	0001883a 	nop
   29634:	e0bff917 	ldw	r2,-28(fp)
   29638:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2963c:	e0bffa17 	ldw	r2,-24(fp)
   29640:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   29644:	00257700 	call	25770 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   29648:	e0bfff17 	ldw	r2,-4(fp)
   2964c:	00c00384 	movi	r3,14
   29650:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   29654:	e0bff803 	ldbu	r2,-32(fp)
   29658:	00000706 	br	29678 <OSSemPendAbort+0x158>
   2965c:	e0bff917 	ldw	r2,-28(fp)
   29660:	e0bffb15 	stw	r2,-20(fp)
   29664:	e0bffb17 	ldw	r2,-20(fp)
   29668:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2966c:	e0bfff17 	ldw	r2,-4(fp)
   29670:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   29674:	0005883a 	mov	r2,zero
}
   29678:	e037883a 	mov	sp,fp
   2967c:	dfc00117 	ldw	ra,4(sp)
   29680:	df000017 	ldw	fp,0(sp)
   29684:	dec00204 	addi	sp,sp,8
   29688:	f800283a 	ret

0002968c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   2968c:	defff804 	addi	sp,sp,-32
   29690:	dfc00715 	stw	ra,28(sp)
   29694:	df000615 	stw	fp,24(sp)
   29698:	df000604 	addi	fp,sp,24
   2969c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   296a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   296a4:	e0bfff17 	ldw	r2,-4(fp)
   296a8:	1000021e 	bne	r2,zero,296b4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   296ac:	00800104 	movi	r2,4
   296b0:	00003506 	br	29788 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   296b4:	e0bfff17 	ldw	r2,-4(fp)
   296b8:	10800003 	ldbu	r2,0(r2)
   296bc:	10803fcc 	andi	r2,r2,255
   296c0:	108000e0 	cmpeqi	r2,r2,3
   296c4:	1000021e 	bne	r2,zero,296d0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   296c8:	00800044 	movi	r2,1
   296cc:	00002e06 	br	29788 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   296d0:	0005303a 	rdctl	r2,status
   296d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   296d8:	e0fffe17 	ldw	r3,-8(fp)
   296dc:	00bfff84 	movi	r2,-2
   296e0:	1884703a 	and	r2,r3,r2
   296e4:	1001703a 	wrctl	status,r2
  
  return context;
   296e8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   296ec:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   296f0:	e0bfff17 	ldw	r2,-4(fp)
   296f4:	10800283 	ldbu	r2,10(r2)
   296f8:	10803fcc 	andi	r2,r2,255
   296fc:	10000c26 	beq	r2,zero,29730 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   29700:	000f883a 	mov	r7,zero
   29704:	01800044 	movi	r6,1
   29708:	000b883a 	mov	r5,zero
   2970c:	e13fff17 	ldw	r4,-4(fp)
   29710:	0024d240 	call	24d24 <OS_EventTaskRdy>
   29714:	e0bffa17 	ldw	r2,-24(fp)
   29718:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2971c:	e0bffb17 	ldw	r2,-20(fp)
   29720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   29724:	00257700 	call	25770 <OS_Sched>
        return (OS_ERR_NONE);
   29728:	0005883a 	mov	r2,zero
   2972c:	00001606 	br	29788 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   29730:	e0bfff17 	ldw	r2,-4(fp)
   29734:	1080020b 	ldhu	r2,8(r2)
   29738:	10ffffcc 	andi	r3,r2,65535
   2973c:	00bfffd4 	movui	r2,65535
   29740:	18800c26 	beq	r3,r2,29774 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   29744:	e0bfff17 	ldw	r2,-4(fp)
   29748:	1080020b 	ldhu	r2,8(r2)
   2974c:	10800044 	addi	r2,r2,1
   29750:	1007883a 	mov	r3,r2
   29754:	e0bfff17 	ldw	r2,-4(fp)
   29758:	10c0020d 	sth	r3,8(r2)
   2975c:	e0bffa17 	ldw	r2,-24(fp)
   29760:	e0bffc15 	stw	r2,-16(fp)
   29764:	e0bffc17 	ldw	r2,-16(fp)
   29768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   2976c:	0005883a 	mov	r2,zero
   29770:	00000506 	br	29788 <OSSemPost+0xfc>
   29774:	e0bffa17 	ldw	r2,-24(fp)
   29778:	e0bffd15 	stw	r2,-12(fp)
   2977c:	e0bffd17 	ldw	r2,-12(fp)
   29780:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   29784:	00800c84 	movi	r2,50
}
   29788:	e037883a 	mov	sp,fp
   2978c:	dfc00117 	ldw	ra,4(sp)
   29790:	df000017 	ldw	fp,0(sp)
   29794:	dec00204 	addi	sp,sp,8
   29798:	f800283a 	ret

0002979c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   2979c:	defff704 	addi	sp,sp,-36
   297a0:	df000815 	stw	fp,32(sp)
   297a4:	df000804 	addi	fp,sp,32
   297a8:	e13ffe15 	stw	r4,-8(fp)
   297ac:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   297b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   297b4:	e0bffe17 	ldw	r2,-8(fp)
   297b8:	1000021e 	bne	r2,zero,297c4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   297bc:	00800104 	movi	r2,4
   297c0:	00003606 	br	2989c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   297c4:	e0bfff17 	ldw	r2,-4(fp)
   297c8:	1000021e 	bne	r2,zero,297d4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   297cc:	00800244 	movi	r2,9
   297d0:	00003206 	br	2989c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   297d4:	e0bffe17 	ldw	r2,-8(fp)
   297d8:	10800003 	ldbu	r2,0(r2)
   297dc:	10803fcc 	andi	r2,r2,255
   297e0:	108000e0 	cmpeqi	r2,r2,3
   297e4:	1000021e 	bne	r2,zero,297f0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   297e8:	00800044 	movi	r2,1
   297ec:	00002b06 	br	2989c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   297f0:	0005303a 	rdctl	r2,status
   297f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   297f8:	e0fffd17 	ldw	r3,-12(fp)
   297fc:	00bfff84 	movi	r2,-2
   29800:	1884703a 	and	r2,r3,r2
   29804:	1001703a 	wrctl	status,r2
  
  return context;
   29808:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   2980c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   29810:	e0bffe17 	ldw	r2,-8(fp)
   29814:	10c00283 	ldbu	r3,10(r2)
   29818:	e0bfff17 	ldw	r2,-4(fp)
   2981c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   29820:	e0bffe17 	ldw	r2,-8(fp)
   29824:	108002c4 	addi	r2,r2,11
   29828:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   2982c:	e0bfff17 	ldw	r2,-4(fp)
   29830:	10800084 	addi	r2,r2,2
   29834:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   29838:	e03ffa05 	stb	zero,-24(fp)
   2983c:	00000b06 	br	2986c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   29840:	e0bff917 	ldw	r2,-28(fp)
   29844:	10c00044 	addi	r3,r2,1
   29848:	e0fff915 	stw	r3,-28(fp)
   2984c:	e0fff817 	ldw	r3,-32(fp)
   29850:	19000044 	addi	r4,r3,1
   29854:	e13ff815 	stw	r4,-32(fp)
   29858:	18c00003 	ldbu	r3,0(r3)
   2985c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   29860:	e0bffa03 	ldbu	r2,-24(fp)
   29864:	10800044 	addi	r2,r2,1
   29868:	e0bffa05 	stb	r2,-24(fp)
   2986c:	e0bffa03 	ldbu	r2,-24(fp)
   29870:	108000f0 	cmpltui	r2,r2,3
   29874:	103ff21e 	bne	r2,zero,29840 <__alt_data_end+0xfffea440>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   29878:	e0bffe17 	ldw	r2,-8(fp)
   2987c:	10c0020b 	ldhu	r3,8(r2)
   29880:	e0bfff17 	ldw	r2,-4(fp)
   29884:	10c0000d 	sth	r3,0(r2)
   29888:	e0bffb17 	ldw	r2,-20(fp)
   2988c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29890:	e0bffc17 	ldw	r2,-16(fp)
   29894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   29898:	0005883a 	mov	r2,zero
}
   2989c:	e037883a 	mov	sp,fp
   298a0:	df000017 	ldw	fp,0(sp)
   298a4:	dec00104 	addi	sp,sp,4
   298a8:	f800283a 	ret

000298ac <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   298ac:	defff904 	addi	sp,sp,-28
   298b0:	df000615 	stw	fp,24(sp)
   298b4:	df000604 	addi	fp,sp,24
   298b8:	e13ffd15 	stw	r4,-12(fp)
   298bc:	2805883a 	mov	r2,r5
   298c0:	e1bfff15 	stw	r6,-4(fp)
   298c4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   298c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   298cc:	e0bfff17 	ldw	r2,-4(fp)
   298d0:	10003126 	beq	r2,zero,29998 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   298d4:	e0bffd17 	ldw	r2,-12(fp)
   298d8:	1000041e 	bne	r2,zero,298ec <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   298dc:	e0bfff17 	ldw	r2,-4(fp)
   298e0:	00c00104 	movi	r3,4
   298e4:	10c00005 	stb	r3,0(r2)
        return;
   298e8:	00002c06 	br	2999c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   298ec:	e0bffd17 	ldw	r2,-12(fp)
   298f0:	10800003 	ldbu	r2,0(r2)
   298f4:	10803fcc 	andi	r2,r2,255
   298f8:	108000e0 	cmpeqi	r2,r2,3
   298fc:	1000041e 	bne	r2,zero,29910 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   29900:	e0bfff17 	ldw	r2,-4(fp)
   29904:	00c00044 	movi	r3,1
   29908:	10c00005 	stb	r3,0(r2)
        return;
   2990c:	00002306 	br	2999c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29910:	0005303a 	rdctl	r2,status
   29914:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29918:	e0fffc17 	ldw	r3,-16(fp)
   2991c:	00bfff84 	movi	r2,-2
   29920:	1884703a 	and	r2,r3,r2
   29924:	1001703a 	wrctl	status,r2
  
  return context;
   29928:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   2992c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   29930:	e0bfff17 	ldw	r2,-4(fp)
   29934:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   29938:	e0bffd17 	ldw	r2,-12(fp)
   2993c:	1080020b 	ldhu	r2,8(r2)
   29940:	10bfffcc 	andi	r2,r2,65535
   29944:	10000426 	beq	r2,zero,29958 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   29948:	e0bffd17 	ldw	r2,-12(fp)
   2994c:	e0fffe0b 	ldhu	r3,-8(fp)
   29950:	10c0020d 	sth	r3,8(r2)
   29954:	00000b06 	br	29984 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   29958:	e0bffd17 	ldw	r2,-12(fp)
   2995c:	10800283 	ldbu	r2,10(r2)
   29960:	10803fcc 	andi	r2,r2,255
   29964:	1000041e 	bne	r2,zero,29978 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   29968:	e0bffd17 	ldw	r2,-12(fp)
   2996c:	e0fffe0b 	ldhu	r3,-8(fp)
   29970:	10c0020d 	sth	r3,8(r2)
   29974:	00000306 	br	29984 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   29978:	e0bfff17 	ldw	r2,-4(fp)
   2997c:	00c01244 	movi	r3,73
   29980:	10c00005 	stb	r3,0(r2)
   29984:	e0bffa17 	ldw	r2,-24(fp)
   29988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2998c:	e0bffb17 	ldw	r2,-20(fp)
   29990:	1001703a 	wrctl	status,r2
   29994:	00000106 	br	2999c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   29998:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   2999c:	e037883a 	mov	sp,fp
   299a0:	df000017 	ldw	fp,0(sp)
   299a4:	dec00104 	addi	sp,sp,4
   299a8:	f800283a 	ret

000299ac <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   299ac:	defff104 	addi	sp,sp,-60
   299b0:	dfc00e15 	stw	ra,56(sp)
   299b4:	df000d15 	stw	fp,52(sp)
   299b8:	df000d04 	addi	fp,sp,52
   299bc:	2007883a 	mov	r3,r4
   299c0:	2805883a 	mov	r2,r5
   299c4:	e0fffe05 	stb	r3,-8(fp)
   299c8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   299cc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   299d0:	e0bffe03 	ldbu	r2,-8(fp)
   299d4:	10800530 	cmpltui	r2,r2,20
   299d8:	1000051e 	bne	r2,zero,299f0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   299dc:	e0bffe03 	ldbu	r2,-8(fp)
   299e0:	10803fe0 	cmpeqi	r2,r2,255
   299e4:	1000021e 	bne	r2,zero,299f0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   299e8:	00800a84 	movi	r2,42
   299ec:	00012606 	br	29e88 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   299f0:	e0bfff03 	ldbu	r2,-4(fp)
   299f4:	10800530 	cmpltui	r2,r2,20
   299f8:	1000021e 	bne	r2,zero,29a04 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   299fc:	00800a84 	movi	r2,42
   29a00:	00012106 	br	29e88 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29a04:	0005303a 	rdctl	r2,status
   29a08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29a0c:	e0fffd17 	ldw	r3,-12(fp)
   29a10:	00bfff84 	movi	r2,-2
   29a14:	1884703a 	and	r2,r3,r2
   29a18:	1001703a 	wrctl	status,r2
  
  return context;
   29a1c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   29a20:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   29a24:	e0ffff03 	ldbu	r3,-4(fp)
   29a28:	00800134 	movhi	r2,4
   29a2c:	10a11c04 	addi	r2,r2,-31632
   29a30:	18c7883a 	add	r3,r3,r3
   29a34:	18c7883a 	add	r3,r3,r3
   29a38:	10c5883a 	add	r2,r2,r3
   29a3c:	10800017 	ldw	r2,0(r2)
   29a40:	10000626 	beq	r2,zero,29a5c <OSTaskChangePrio+0xb0>
   29a44:	e0bff517 	ldw	r2,-44(fp)
   29a48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29a4c:	e0bff617 	ldw	r2,-40(fp)
   29a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   29a54:	00800a04 	movi	r2,40
   29a58:	00010b06 	br	29e88 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   29a5c:	e0bffe03 	ldbu	r2,-8(fp)
   29a60:	10803fd8 	cmpnei	r2,r2,255
   29a64:	1000031e 	bne	r2,zero,29a74 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   29a68:	d0a70517 	ldw	r2,-25580(gp)
   29a6c:	10800c83 	ldbu	r2,50(r2)
   29a70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   29a74:	e0fffe03 	ldbu	r3,-8(fp)
   29a78:	00800134 	movhi	r2,4
   29a7c:	10a11c04 	addi	r2,r2,-31632
   29a80:	18c7883a 	add	r3,r3,r3
   29a84:	18c7883a 	add	r3,r3,r3
   29a88:	10c5883a 	add	r2,r2,r3
   29a8c:	10800017 	ldw	r2,0(r2)
   29a90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   29a94:	e0bff817 	ldw	r2,-32(fp)
   29a98:	1000061e 	bne	r2,zero,29ab4 <OSTaskChangePrio+0x108>
   29a9c:	e0bff517 	ldw	r2,-44(fp)
   29aa0:	e0bff715 	stw	r2,-36(fp)
   29aa4:	e0bff717 	ldw	r2,-36(fp)
   29aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   29aac:	00800a44 	movi	r2,41
   29ab0:	0000f506 	br	29e88 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   29ab4:	e0bff817 	ldw	r2,-32(fp)
   29ab8:	10800058 	cmpnei	r2,r2,1
   29abc:	1000061e 	bne	r2,zero,29ad8 <OSTaskChangePrio+0x12c>
   29ac0:	e0bff517 	ldw	r2,-44(fp)
   29ac4:	e0bff915 	stw	r2,-28(fp)
   29ac8:	e0bff917 	ldw	r2,-28(fp)
   29acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   29ad0:	008010c4 	movi	r2,67
   29ad4:	0000ec06 	br	29e88 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   29ad8:	e0bfff03 	ldbu	r2,-4(fp)
   29adc:	1004d0fa 	srli	r2,r2,3
   29ae0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   29ae4:	e0bfff03 	ldbu	r2,-4(fp)
   29ae8:	108001cc 	andi	r2,r2,7
   29aec:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   29af0:	e0bffb03 	ldbu	r2,-20(fp)
   29af4:	00c00044 	movi	r3,1
   29af8:	1884983a 	sll	r2,r3,r2
   29afc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   29b00:	e0bffb43 	ldbu	r2,-19(fp)
   29b04:	00c00044 	movi	r3,1
   29b08:	1884983a 	sll	r2,r3,r2
   29b0c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   29b10:	e0fffe03 	ldbu	r3,-8(fp)
   29b14:	00800134 	movhi	r2,4
   29b18:	10a11c04 	addi	r2,r2,-31632
   29b1c:	18c7883a 	add	r3,r3,r3
   29b20:	18c7883a 	add	r3,r3,r3
   29b24:	10c5883a 	add	r2,r2,r3
   29b28:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   29b2c:	e0ffff03 	ldbu	r3,-4(fp)
   29b30:	00800134 	movhi	r2,4
   29b34:	10a11c04 	addi	r2,r2,-31632
   29b38:	18c7883a 	add	r3,r3,r3
   29b3c:	18c7883a 	add	r3,r3,r3
   29b40:	10c5883a 	add	r2,r2,r3
   29b44:	e0fff817 	ldw	r3,-32(fp)
   29b48:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   29b4c:	e0bff817 	ldw	r2,-32(fp)
   29b50:	10800d03 	ldbu	r2,52(r2)
   29b54:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   29b58:	e0bff817 	ldw	r2,-32(fp)
   29b5c:	10800d83 	ldbu	r2,54(r2)
   29b60:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   29b64:	e0bff817 	ldw	r2,-32(fp)
   29b68:	10800d43 	ldbu	r2,53(r2)
   29b6c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   29b70:	e0fffc03 	ldbu	r3,-16(fp)
   29b74:	d0a70244 	addi	r2,gp,-25591
   29b78:	1885883a 	add	r2,r3,r2
   29b7c:	10c00003 	ldbu	r3,0(r2)
   29b80:	e0bffc83 	ldbu	r2,-14(fp)
   29b84:	1884703a 	and	r2,r3,r2
   29b88:	10803fcc 	andi	r2,r2,255
   29b8c:	10002826 	beq	r2,zero,29c30 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   29b90:	e0fffc03 	ldbu	r3,-16(fp)
   29b94:	e13ffc03 	ldbu	r4,-16(fp)
   29b98:	d0a70244 	addi	r2,gp,-25591
   29b9c:	2085883a 	add	r2,r4,r2
   29ba0:	10800003 	ldbu	r2,0(r2)
   29ba4:	1009883a 	mov	r4,r2
   29ba8:	e0bffc83 	ldbu	r2,-14(fp)
   29bac:	0084303a 	nor	r2,zero,r2
   29bb0:	2084703a 	and	r2,r4,r2
   29bb4:	1009883a 	mov	r4,r2
   29bb8:	d0a70244 	addi	r2,gp,-25591
   29bbc:	1885883a 	add	r2,r3,r2
   29bc0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   29bc4:	e0fffc03 	ldbu	r3,-16(fp)
   29bc8:	d0a70244 	addi	r2,gp,-25591
   29bcc:	1885883a 	add	r2,r3,r2
   29bd0:	10800003 	ldbu	r2,0(r2)
   29bd4:	10803fcc 	andi	r2,r2,255
   29bd8:	1000061e 	bne	r2,zero,29bf4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   29bdc:	e0bffc43 	ldbu	r2,-15(fp)
   29be0:	0084303a 	nor	r2,zero,r2
   29be4:	1007883a 	mov	r3,r2
   29be8:	d0a70203 	ldbu	r2,-25592(gp)
   29bec:	1884703a 	and	r2,r3,r2
   29bf0:	d0a70205 	stb	r2,-25592(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   29bf4:	d0e70203 	ldbu	r3,-25592(gp)
   29bf8:	e0bffb83 	ldbu	r2,-18(fp)
   29bfc:	1884b03a 	or	r2,r3,r2
   29c00:	d0a70205 	stb	r2,-25592(gp)
         OSRdyTbl[y_new] |= bitx_new;
   29c04:	e0fffb03 	ldbu	r3,-20(fp)
   29c08:	e13ffb03 	ldbu	r4,-20(fp)
   29c0c:	d0a70244 	addi	r2,gp,-25591
   29c10:	2085883a 	add	r2,r4,r2
   29c14:	11000003 	ldbu	r4,0(r2)
   29c18:	e0bffbc3 	ldbu	r2,-17(fp)
   29c1c:	2084b03a 	or	r2,r4,r2
   29c20:	1009883a 	mov	r4,r2
   29c24:	d0a70244 	addi	r2,gp,-25591
   29c28:	1885883a 	add	r2,r3,r2
   29c2c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   29c30:	e0bff817 	ldw	r2,-32(fp)
   29c34:	10800717 	ldw	r2,28(r2)
   29c38:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   29c3c:	e0bff317 	ldw	r2,-52(fp)
   29c40:	10003326 	beq	r2,zero,29d10 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   29c44:	e0bffc03 	ldbu	r2,-16(fp)
   29c48:	e0fffc03 	ldbu	r3,-16(fp)
   29c4c:	e13ff317 	ldw	r4,-52(fp)
   29c50:	20c7883a 	add	r3,r4,r3
   29c54:	18c002c4 	addi	r3,r3,11
   29c58:	18c00003 	ldbu	r3,0(r3)
   29c5c:	1809883a 	mov	r4,r3
   29c60:	e0fffc83 	ldbu	r3,-14(fp)
   29c64:	00c6303a 	nor	r3,zero,r3
   29c68:	20c6703a 	and	r3,r4,r3
   29c6c:	1809883a 	mov	r4,r3
   29c70:	e0fff317 	ldw	r3,-52(fp)
   29c74:	1885883a 	add	r2,r3,r2
   29c78:	108002c4 	addi	r2,r2,11
   29c7c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   29c80:	e0bffc03 	ldbu	r2,-16(fp)
   29c84:	e0fff317 	ldw	r3,-52(fp)
   29c88:	1885883a 	add	r2,r3,r2
   29c8c:	108002c4 	addi	r2,r2,11
   29c90:	10800003 	ldbu	r2,0(r2)
   29c94:	10803fcc 	andi	r2,r2,255
   29c98:	1000091e 	bne	r2,zero,29cc0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   29c9c:	e0bff317 	ldw	r2,-52(fp)
   29ca0:	10800283 	ldbu	r2,10(r2)
   29ca4:	1007883a 	mov	r3,r2
   29ca8:	e0bffc43 	ldbu	r2,-15(fp)
   29cac:	0084303a 	nor	r2,zero,r2
   29cb0:	1884703a 	and	r2,r3,r2
   29cb4:	1007883a 	mov	r3,r2
   29cb8:	e0bff317 	ldw	r2,-52(fp)
   29cbc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   29cc0:	e0bff317 	ldw	r2,-52(fp)
   29cc4:	10c00283 	ldbu	r3,10(r2)
   29cc8:	e0bffb83 	ldbu	r2,-18(fp)
   29ccc:	1884b03a 	or	r2,r3,r2
   29cd0:	1007883a 	mov	r3,r2
   29cd4:	e0bff317 	ldw	r2,-52(fp)
   29cd8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   29cdc:	e0bffb03 	ldbu	r2,-20(fp)
   29ce0:	e0fffb03 	ldbu	r3,-20(fp)
   29ce4:	e13ff317 	ldw	r4,-52(fp)
   29ce8:	20c7883a 	add	r3,r4,r3
   29cec:	18c002c4 	addi	r3,r3,11
   29cf0:	19000003 	ldbu	r4,0(r3)
   29cf4:	e0fffbc3 	ldbu	r3,-17(fp)
   29cf8:	20c6b03a 	or	r3,r4,r3
   29cfc:	1809883a 	mov	r4,r3
   29d00:	e0fff317 	ldw	r3,-52(fp)
   29d04:	1885883a 	add	r2,r3,r2
   29d08:	108002c4 	addi	r2,r2,11
   29d0c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   29d10:	e0bff817 	ldw	r2,-32(fp)
   29d14:	10800817 	ldw	r2,32(r2)
   29d18:	10004226 	beq	r2,zero,29e24 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   29d1c:	e0bff817 	ldw	r2,-32(fp)
   29d20:	10800817 	ldw	r2,32(r2)
   29d24:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   29d28:	e0bff417 	ldw	r2,-48(fp)
   29d2c:	10800017 	ldw	r2,0(r2)
   29d30:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   29d34:	00003906 	br	29e1c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   29d38:	e0bffc03 	ldbu	r2,-16(fp)
   29d3c:	e0fffc03 	ldbu	r3,-16(fp)
   29d40:	e13ff317 	ldw	r4,-52(fp)
   29d44:	20c7883a 	add	r3,r4,r3
   29d48:	18c002c4 	addi	r3,r3,11
   29d4c:	18c00003 	ldbu	r3,0(r3)
   29d50:	1809883a 	mov	r4,r3
   29d54:	e0fffc83 	ldbu	r3,-14(fp)
   29d58:	00c6303a 	nor	r3,zero,r3
   29d5c:	20c6703a 	and	r3,r4,r3
   29d60:	1809883a 	mov	r4,r3
   29d64:	e0fff317 	ldw	r3,-52(fp)
   29d68:	1885883a 	add	r2,r3,r2
   29d6c:	108002c4 	addi	r2,r2,11
   29d70:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   29d74:	e0bffc03 	ldbu	r2,-16(fp)
   29d78:	e0fff317 	ldw	r3,-52(fp)
   29d7c:	1885883a 	add	r2,r3,r2
   29d80:	108002c4 	addi	r2,r2,11
   29d84:	10800003 	ldbu	r2,0(r2)
   29d88:	10803fcc 	andi	r2,r2,255
   29d8c:	1000091e 	bne	r2,zero,29db4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   29d90:	e0bff317 	ldw	r2,-52(fp)
   29d94:	10800283 	ldbu	r2,10(r2)
   29d98:	1007883a 	mov	r3,r2
   29d9c:	e0bffc43 	ldbu	r2,-15(fp)
   29da0:	0084303a 	nor	r2,zero,r2
   29da4:	1884703a 	and	r2,r3,r2
   29da8:	1007883a 	mov	r3,r2
   29dac:	e0bff317 	ldw	r2,-52(fp)
   29db0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   29db4:	e0bff317 	ldw	r2,-52(fp)
   29db8:	10c00283 	ldbu	r3,10(r2)
   29dbc:	e0bffb83 	ldbu	r2,-18(fp)
   29dc0:	1884b03a 	or	r2,r3,r2
   29dc4:	1007883a 	mov	r3,r2
   29dc8:	e0bff317 	ldw	r2,-52(fp)
   29dcc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   29dd0:	e0bffb03 	ldbu	r2,-20(fp)
   29dd4:	e0fffb03 	ldbu	r3,-20(fp)
   29dd8:	e13ff317 	ldw	r4,-52(fp)
   29ddc:	20c7883a 	add	r3,r4,r3
   29de0:	18c002c4 	addi	r3,r3,11
   29de4:	19000003 	ldbu	r4,0(r3)
   29de8:	e0fffbc3 	ldbu	r3,-17(fp)
   29dec:	20c6b03a 	or	r3,r4,r3
   29df0:	1809883a 	mov	r4,r3
   29df4:	e0fff317 	ldw	r3,-52(fp)
   29df8:	1885883a 	add	r2,r3,r2
   29dfc:	108002c4 	addi	r2,r2,11
   29e00:	11000005 	stb	r4,0(r2)
            pevents++;
   29e04:	e0bff417 	ldw	r2,-48(fp)
   29e08:	10800104 	addi	r2,r2,4
   29e0c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   29e10:	e0bff417 	ldw	r2,-48(fp)
   29e14:	10800017 	ldw	r2,0(r2)
   29e18:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   29e1c:	e0bff317 	ldw	r2,-52(fp)
   29e20:	103fc51e 	bne	r2,zero,29d38 <__alt_data_end+0xfffea938>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   29e24:	e0bff817 	ldw	r2,-32(fp)
   29e28:	e0ffff03 	ldbu	r3,-4(fp)
   29e2c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   29e30:	e0bff817 	ldw	r2,-32(fp)
   29e34:	e0fffb03 	ldbu	r3,-20(fp)
   29e38:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   29e3c:	e0bff817 	ldw	r2,-32(fp)
   29e40:	e0fffb43 	ldbu	r3,-19(fp)
   29e44:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   29e48:	e0bff817 	ldw	r2,-32(fp)
   29e4c:	e0fffb83 	ldbu	r3,-18(fp)
   29e50:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   29e54:	e0bff817 	ldw	r2,-32(fp)
   29e58:	e0fffbc3 	ldbu	r3,-17(fp)
   29e5c:	10c00d45 	stb	r3,53(r2)
   29e60:	e0bff517 	ldw	r2,-44(fp)
   29e64:	e0bffa15 	stw	r2,-24(fp)
   29e68:	e0bffa17 	ldw	r2,-24(fp)
   29e6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   29e70:	d0a6f643 	ldbu	r2,-25639(gp)
   29e74:	10803fcc 	andi	r2,r2,255
   29e78:	10800058 	cmpnei	r2,r2,1
   29e7c:	1000011e 	bne	r2,zero,29e84 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   29e80:	00257700 	call	25770 <OS_Sched>
    }
    return (OS_ERR_NONE);
   29e84:	0005883a 	mov	r2,zero
}
   29e88:	e037883a 	mov	sp,fp
   29e8c:	dfc00117 	ldw	ra,4(sp)
   29e90:	df000017 	ldw	fp,0(sp)
   29e94:	dec00204 	addi	sp,sp,8
   29e98:	f800283a 	ret

00029e9c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   29e9c:	deffee04 	addi	sp,sp,-72
   29ea0:	dfc01115 	stw	ra,68(sp)
   29ea4:	df001015 	stw	fp,64(sp)
   29ea8:	df001004 	addi	fp,sp,64
   29eac:	e13ffc15 	stw	r4,-16(fp)
   29eb0:	e17ffd15 	stw	r5,-12(fp)
   29eb4:	e1bffe15 	stw	r6,-8(fp)
   29eb8:	3805883a 	mov	r2,r7
   29ebc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   29ec0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   29ec4:	e0bfff03 	ldbu	r2,-4(fp)
   29ec8:	10800570 	cmpltui	r2,r2,21
   29ecc:	1000021e 	bne	r2,zero,29ed8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   29ed0:	00800a84 	movi	r2,42
   29ed4:	00005706 	br	2a034 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29ed8:	0005303a 	rdctl	r2,status
   29edc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29ee0:	e0fffb17 	ldw	r3,-20(fp)
   29ee4:	00bfff84 	movi	r2,-2
   29ee8:	1884703a 	and	r2,r3,r2
   29eec:	1001703a 	wrctl	status,r2
  
  return context;
   29ef0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   29ef4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   29ef8:	d0a70403 	ldbu	r2,-25584(gp)
   29efc:	10803fcc 	andi	r2,r2,255
   29f00:	10000626 	beq	r2,zero,29f1c <OSTaskCreate+0x80>
   29f04:	e0bff317 	ldw	r2,-52(fp)
   29f08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29f0c:	e0bff417 	ldw	r2,-48(fp)
   29f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   29f14:	00800f04 	movi	r2,60
   29f18:	00004606 	br	2a034 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   29f1c:	e0ffff03 	ldbu	r3,-4(fp)
   29f20:	00800134 	movhi	r2,4
   29f24:	10a11c04 	addi	r2,r2,-31632
   29f28:	18c7883a 	add	r3,r3,r3
   29f2c:	18c7883a 	add	r3,r3,r3
   29f30:	10c5883a 	add	r2,r2,r3
   29f34:	10800017 	ldw	r2,0(r2)
   29f38:	1000391e 	bne	r2,zero,2a020 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   29f3c:	e0ffff03 	ldbu	r3,-4(fp)
   29f40:	00800134 	movhi	r2,4
   29f44:	10a11c04 	addi	r2,r2,-31632
   29f48:	18c7883a 	add	r3,r3,r3
   29f4c:	18c7883a 	add	r3,r3,r3
   29f50:	10c5883a 	add	r2,r2,r3
   29f54:	00c00044 	movi	r3,1
   29f58:	10c00015 	stw	r3,0(r2)
   29f5c:	e0bff317 	ldw	r2,-52(fp)
   29f60:	e0bff515 	stw	r2,-44(fp)
   29f64:	e0bff517 	ldw	r2,-44(fp)
   29f68:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   29f6c:	000f883a 	mov	r7,zero
   29f70:	e1bffe17 	ldw	r6,-8(fp)
   29f74:	e17ffd17 	ldw	r5,-12(fp)
   29f78:	e13ffc17 	ldw	r4,-16(fp)
   29f7c:	002d13c0 	call	2d13c <OSTaskStkInit>
   29f80:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   29f84:	e0bfff03 	ldbu	r2,-4(fp)
   29f88:	d8000215 	stw	zero,8(sp)
   29f8c:	d8000115 	stw	zero,4(sp)
   29f90:	d8000015 	stw	zero,0(sp)
   29f94:	000f883a 	mov	r7,zero
   29f98:	000d883a 	mov	r6,zero
   29f9c:	e17ff717 	ldw	r5,-36(fp)
   29fa0:	1009883a 	mov	r4,r2
   29fa4:	0025b700 	call	25b70 <OS_TCBInit>
   29fa8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   29fac:	e0bff803 	ldbu	r2,-32(fp)
   29fb0:	1000061e 	bne	r2,zero,29fcc <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   29fb4:	d0a6f643 	ldbu	r2,-25639(gp)
   29fb8:	10803fcc 	andi	r2,r2,255
   29fbc:	10800058 	cmpnei	r2,r2,1
   29fc0:	1000151e 	bne	r2,zero,2a018 <OSTaskCreate+0x17c>
                OS_Sched();
   29fc4:	00257700 	call	25770 <OS_Sched>
   29fc8:	00001306 	br	2a018 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29fcc:	0005303a 	rdctl	r2,status
   29fd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29fd4:	e0fffa17 	ldw	r3,-24(fp)
   29fd8:	00bfff84 	movi	r2,-2
   29fdc:	1884703a 	and	r2,r3,r2
   29fe0:	1001703a 	wrctl	status,r2
  
  return context;
   29fe4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   29fe8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   29fec:	e0ffff03 	ldbu	r3,-4(fp)
   29ff0:	00800134 	movhi	r2,4
   29ff4:	10a11c04 	addi	r2,r2,-31632
   29ff8:	18c7883a 	add	r3,r3,r3
   29ffc:	18c7883a 	add	r3,r3,r3
   2a000:	10c5883a 	add	r2,r2,r3
   2a004:	10000015 	stw	zero,0(r2)
   2a008:	e0bff317 	ldw	r2,-52(fp)
   2a00c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a010:	e0bff617 	ldw	r2,-40(fp)
   2a014:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   2a018:	e0bff803 	ldbu	r2,-32(fp)
   2a01c:	00000506 	br	2a034 <OSTaskCreate+0x198>
   2a020:	e0bff317 	ldw	r2,-52(fp)
   2a024:	e0bff915 	stw	r2,-28(fp)
   2a028:	e0bff917 	ldw	r2,-28(fp)
   2a02c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   2a030:	00800a04 	movi	r2,40
}
   2a034:	e037883a 	mov	sp,fp
   2a038:	dfc00117 	ldw	ra,4(sp)
   2a03c:	df000017 	ldw	fp,0(sp)
   2a040:	dec00204 	addi	sp,sp,8
   2a044:	f800283a 	ret

0002a048 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   2a048:	deffec04 	addi	sp,sp,-80
   2a04c:	dfc01315 	stw	ra,76(sp)
   2a050:	df001215 	stw	fp,72(sp)
   2a054:	df001204 	addi	fp,sp,72
   2a058:	e13ffa15 	stw	r4,-24(fp)
   2a05c:	e17ffb15 	stw	r5,-20(fp)
   2a060:	e1bffc15 	stw	r6,-16(fp)
   2a064:	3809883a 	mov	r4,r7
   2a068:	e0c00217 	ldw	r3,8(fp)
   2a06c:	e0800617 	ldw	r2,24(fp)
   2a070:	e13ffd05 	stb	r4,-12(fp)
   2a074:	e0fffe0d 	sth	r3,-8(fp)
   2a078:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   2a07c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   2a080:	e0bffd03 	ldbu	r2,-12(fp)
   2a084:	10800570 	cmpltui	r2,r2,21
   2a088:	1000021e 	bne	r2,zero,2a094 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   2a08c:	00800a84 	movi	r2,42
   2a090:	00006106 	br	2a218 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a094:	0005303a 	rdctl	r2,status
   2a098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a09c:	e0fff917 	ldw	r3,-28(fp)
   2a0a0:	00bfff84 	movi	r2,-2
   2a0a4:	1884703a 	and	r2,r3,r2
   2a0a8:	1001703a 	wrctl	status,r2
  
  return context;
   2a0ac:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2a0b0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   2a0b4:	d0a70403 	ldbu	r2,-25584(gp)
   2a0b8:	10803fcc 	andi	r2,r2,255
   2a0bc:	10000626 	beq	r2,zero,2a0d8 <OSTaskCreateExt+0x90>
   2a0c0:	e0bff117 	ldw	r2,-60(fp)
   2a0c4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a0c8:	e0bff217 	ldw	r2,-56(fp)
   2a0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   2a0d0:	00800f04 	movi	r2,60
   2a0d4:	00005006 	br	2a218 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   2a0d8:	e0fffd03 	ldbu	r3,-12(fp)
   2a0dc:	00800134 	movhi	r2,4
   2a0e0:	10a11c04 	addi	r2,r2,-31632
   2a0e4:	18c7883a 	add	r3,r3,r3
   2a0e8:	18c7883a 	add	r3,r3,r3
   2a0ec:	10c5883a 	add	r2,r2,r3
   2a0f0:	10800017 	ldw	r2,0(r2)
   2a0f4:	1000431e 	bne	r2,zero,2a204 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   2a0f8:	e0fffd03 	ldbu	r3,-12(fp)
   2a0fc:	00800134 	movhi	r2,4
   2a100:	10a11c04 	addi	r2,r2,-31632
   2a104:	18c7883a 	add	r3,r3,r3
   2a108:	18c7883a 	add	r3,r3,r3
   2a10c:	10c5883a 	add	r2,r2,r3
   2a110:	00c00044 	movi	r3,1
   2a114:	10c00015 	stw	r3,0(r2)
   2a118:	e0bff117 	ldw	r2,-60(fp)
   2a11c:	e0bff315 	stw	r2,-52(fp)
   2a120:	e0bff317 	ldw	r2,-52(fp)
   2a124:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   2a128:	e0bfff0b 	ldhu	r2,-4(fp)
   2a12c:	100d883a 	mov	r6,r2
   2a130:	e1400417 	ldw	r5,16(fp)
   2a134:	e1000317 	ldw	r4,12(fp)
   2a138:	002b0a80 	call	2b0a8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   2a13c:	e0bfff0b 	ldhu	r2,-4(fp)
   2a140:	100f883a 	mov	r7,r2
   2a144:	e1bffc17 	ldw	r6,-16(fp)
   2a148:	e17ffb17 	ldw	r5,-20(fp)
   2a14c:	e13ffa17 	ldw	r4,-24(fp)
   2a150:	002d13c0 	call	2d13c <OSTaskStkInit>
   2a154:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   2a158:	e0fffd03 	ldbu	r3,-12(fp)
   2a15c:	e13ffe0b 	ldhu	r4,-8(fp)
   2a160:	e0bfff0b 	ldhu	r2,-4(fp)
   2a164:	d8800215 	stw	r2,8(sp)
   2a168:	e0800517 	ldw	r2,20(fp)
   2a16c:	d8800115 	stw	r2,4(sp)
   2a170:	e0800417 	ldw	r2,16(fp)
   2a174:	d8800015 	stw	r2,0(sp)
   2a178:	200f883a 	mov	r7,r4
   2a17c:	e1800317 	ldw	r6,12(fp)
   2a180:	e17ff517 	ldw	r5,-44(fp)
   2a184:	1809883a 	mov	r4,r3
   2a188:	0025b700 	call	25b70 <OS_TCBInit>
   2a18c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   2a190:	e0bff603 	ldbu	r2,-40(fp)
   2a194:	1000061e 	bne	r2,zero,2a1b0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   2a198:	d0a6f643 	ldbu	r2,-25639(gp)
   2a19c:	10803fcc 	andi	r2,r2,255
   2a1a0:	10800058 	cmpnei	r2,r2,1
   2a1a4:	1000151e 	bne	r2,zero,2a1fc <OSTaskCreateExt+0x1b4>
                OS_Sched();
   2a1a8:	00257700 	call	25770 <OS_Sched>
   2a1ac:	00001306 	br	2a1fc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a1b0:	0005303a 	rdctl	r2,status
   2a1b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a1b8:	e0fff817 	ldw	r3,-32(fp)
   2a1bc:	00bfff84 	movi	r2,-2
   2a1c0:	1884703a 	and	r2,r3,r2
   2a1c4:	1001703a 	wrctl	status,r2
  
  return context;
   2a1c8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   2a1cc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   2a1d0:	e0fffd03 	ldbu	r3,-12(fp)
   2a1d4:	00800134 	movhi	r2,4
   2a1d8:	10a11c04 	addi	r2,r2,-31632
   2a1dc:	18c7883a 	add	r3,r3,r3
   2a1e0:	18c7883a 	add	r3,r3,r3
   2a1e4:	10c5883a 	add	r2,r2,r3
   2a1e8:	10000015 	stw	zero,0(r2)
   2a1ec:	e0bff117 	ldw	r2,-60(fp)
   2a1f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a1f4:	e0bff417 	ldw	r2,-48(fp)
   2a1f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   2a1fc:	e0bff603 	ldbu	r2,-40(fp)
   2a200:	00000506 	br	2a218 <OSTaskCreateExt+0x1d0>
   2a204:	e0bff117 	ldw	r2,-60(fp)
   2a208:	e0bff715 	stw	r2,-36(fp)
   2a20c:	e0bff717 	ldw	r2,-36(fp)
   2a210:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   2a214:	00800a04 	movi	r2,40
}
   2a218:	e037883a 	mov	sp,fp
   2a21c:	dfc00117 	ldw	ra,4(sp)
   2a220:	df000017 	ldw	fp,0(sp)
   2a224:	dec00204 	addi	sp,sp,8
   2a228:	f800283a 	ret

0002a22c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   2a22c:	defff404 	addi	sp,sp,-48
   2a230:	dfc00b15 	stw	ra,44(sp)
   2a234:	df000a15 	stw	fp,40(sp)
   2a238:	df000a04 	addi	fp,sp,40
   2a23c:	2005883a 	mov	r2,r4
   2a240:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   2a244:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   2a248:	d0a70403 	ldbu	r2,-25584(gp)
   2a24c:	10803fcc 	andi	r2,r2,255
   2a250:	10000226 	beq	r2,zero,2a25c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   2a254:	00801004 	movi	r2,64
   2a258:	0000c006 	br	2a55c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   2a25c:	e0bfff03 	ldbu	r2,-4(fp)
   2a260:	10800518 	cmpnei	r2,r2,20
   2a264:	1000021e 	bne	r2,zero,2a270 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   2a268:	00800f84 	movi	r2,62
   2a26c:	0000bb06 	br	2a55c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   2a270:	e0bfff03 	ldbu	r2,-4(fp)
   2a274:	10800530 	cmpltui	r2,r2,20
   2a278:	1000051e 	bne	r2,zero,2a290 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   2a27c:	e0bfff03 	ldbu	r2,-4(fp)
   2a280:	10803fe0 	cmpeqi	r2,r2,255
   2a284:	1000021e 	bne	r2,zero,2a290 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   2a288:	00800a84 	movi	r2,42
   2a28c:	0000b306 	br	2a55c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a290:	0005303a 	rdctl	r2,status
   2a294:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a298:	e0fffe17 	ldw	r3,-8(fp)
   2a29c:	00bfff84 	movi	r2,-2
   2a2a0:	1884703a 	and	r2,r3,r2
   2a2a4:	1001703a 	wrctl	status,r2
  
  return context;
   2a2a8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   2a2ac:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   2a2b0:	e0bfff03 	ldbu	r2,-4(fp)
   2a2b4:	10803fd8 	cmpnei	r2,r2,255
   2a2b8:	1000031e 	bne	r2,zero,2a2c8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   2a2bc:	d0a70517 	ldw	r2,-25580(gp)
   2a2c0:	10800c83 	ldbu	r2,50(r2)
   2a2c4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2a2c8:	e0ffff03 	ldbu	r3,-4(fp)
   2a2cc:	00800134 	movhi	r2,4
   2a2d0:	10a11c04 	addi	r2,r2,-31632
   2a2d4:	18c7883a 	add	r3,r3,r3
   2a2d8:	18c7883a 	add	r3,r3,r3
   2a2dc:	10c5883a 	add	r2,r2,r3
   2a2e0:	10800017 	ldw	r2,0(r2)
   2a2e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   2a2e8:	e0bff817 	ldw	r2,-32(fp)
   2a2ec:	1000061e 	bne	r2,zero,2a308 <OSTaskDel+0xdc>
   2a2f0:	e0bff617 	ldw	r2,-40(fp)
   2a2f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a2f8:	e0bff717 	ldw	r2,-36(fp)
   2a2fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2a300:	008010c4 	movi	r2,67
   2a304:	00009506 	br	2a55c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   2a308:	e0bff817 	ldw	r2,-32(fp)
   2a30c:	10800058 	cmpnei	r2,r2,1
   2a310:	1000061e 	bne	r2,zero,2a32c <OSTaskDel+0x100>
   2a314:	e0bff617 	ldw	r2,-40(fp)
   2a318:	e0bff915 	stw	r2,-28(fp)
   2a31c:	e0bff917 	ldw	r2,-28(fp)
   2a320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   2a324:	00800f44 	movi	r2,61
   2a328:	00008c06 	br	2a55c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   2a32c:	e0bff817 	ldw	r2,-32(fp)
   2a330:	10800d03 	ldbu	r2,52(r2)
   2a334:	10c03fcc 	andi	r3,r2,255
   2a338:	e0bff817 	ldw	r2,-32(fp)
   2a33c:	10800d03 	ldbu	r2,52(r2)
   2a340:	11003fcc 	andi	r4,r2,255
   2a344:	d0a70244 	addi	r2,gp,-25591
   2a348:	2085883a 	add	r2,r4,r2
   2a34c:	10800003 	ldbu	r2,0(r2)
   2a350:	1009883a 	mov	r4,r2
   2a354:	e0bff817 	ldw	r2,-32(fp)
   2a358:	10800d43 	ldbu	r2,53(r2)
   2a35c:	0084303a 	nor	r2,zero,r2
   2a360:	2084703a 	and	r2,r4,r2
   2a364:	1009883a 	mov	r4,r2
   2a368:	d0a70244 	addi	r2,gp,-25591
   2a36c:	1885883a 	add	r2,r3,r2
   2a370:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   2a374:	e0bff817 	ldw	r2,-32(fp)
   2a378:	10800d03 	ldbu	r2,52(r2)
   2a37c:	10c03fcc 	andi	r3,r2,255
   2a380:	d0a70244 	addi	r2,gp,-25591
   2a384:	1885883a 	add	r2,r3,r2
   2a388:	10800003 	ldbu	r2,0(r2)
   2a38c:	10803fcc 	andi	r2,r2,255
   2a390:	1000071e 	bne	r2,zero,2a3b0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   2a394:	e0bff817 	ldw	r2,-32(fp)
   2a398:	10800d83 	ldbu	r2,54(r2)
   2a39c:	0084303a 	nor	r2,zero,r2
   2a3a0:	1007883a 	mov	r3,r2
   2a3a4:	d0a70203 	ldbu	r2,-25592(gp)
   2a3a8:	1884703a 	and	r2,r3,r2
   2a3ac:	d0a70205 	stb	r2,-25592(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   2a3b0:	e0bff817 	ldw	r2,-32(fp)
   2a3b4:	10800717 	ldw	r2,28(r2)
   2a3b8:	10000526 	beq	r2,zero,2a3d0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   2a3bc:	e0bff817 	ldw	r2,-32(fp)
   2a3c0:	10800717 	ldw	r2,28(r2)
   2a3c4:	100b883a 	mov	r5,r2
   2a3c8:	e13ff817 	ldw	r4,-32(fp)
   2a3cc:	002511c0 	call	2511c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   2a3d0:	e0bff817 	ldw	r2,-32(fp)
   2a3d4:	10800817 	ldw	r2,32(r2)
   2a3d8:	10000526 	beq	r2,zero,2a3f0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   2a3dc:	e0bff817 	ldw	r2,-32(fp)
   2a3e0:	10800817 	ldw	r2,32(r2)
   2a3e4:	100b883a 	mov	r5,r2
   2a3e8:	e13ff817 	ldw	r4,-32(fp)
   2a3ec:	00251d40 	call	251d4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   2a3f0:	e0bff817 	ldw	r2,-32(fp)
   2a3f4:	10800a17 	ldw	r2,40(r2)
   2a3f8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   2a3fc:	e0bffb17 	ldw	r2,-20(fp)
   2a400:	10000226 	beq	r2,zero,2a40c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   2a404:	e13ffb17 	ldw	r4,-20(fp)
   2a408:	00276440 	call	27644 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   2a40c:	e0bff817 	ldw	r2,-32(fp)
   2a410:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   2a414:	e0bff817 	ldw	r2,-32(fp)
   2a418:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   2a41c:	e0bff817 	ldw	r2,-32(fp)
   2a420:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   2a424:	d0a6f603 	ldbu	r2,-25640(gp)
   2a428:	10803fcc 	andi	r2,r2,255
   2a42c:	10803fe0 	cmpeqi	r2,r2,255
   2a430:	1000031e 	bne	r2,zero,2a440 <OSTaskDel+0x214>
        OSLockNesting++;
   2a434:	d0a6f603 	ldbu	r2,-25640(gp)
   2a438:	10800044 	addi	r2,r2,1
   2a43c:	d0a6f605 	stb	r2,-25640(gp)
   2a440:	e0bff617 	ldw	r2,-40(fp)
   2a444:	e0bffd15 	stw	r2,-12(fp)
   2a448:	e0bffd17 	ldw	r2,-12(fp)
   2a44c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   2a450:	0024d040 	call	24d04 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a454:	0005303a 	rdctl	r2,status
   2a458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a45c:	e0fffa17 	ldw	r3,-24(fp)
   2a460:	00bfff84 	movi	r2,-2
   2a464:	1884703a 	and	r2,r3,r2
   2a468:	1001703a 	wrctl	status,r2
  
  return context;
   2a46c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   2a470:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   2a474:	d0a6f603 	ldbu	r2,-25640(gp)
   2a478:	10803fcc 	andi	r2,r2,255
   2a47c:	10000326 	beq	r2,zero,2a48c <OSTaskDel+0x260>
        OSLockNesting--;
   2a480:	d0a6f603 	ldbu	r2,-25640(gp)
   2a484:	10bfffc4 	addi	r2,r2,-1
   2a488:	d0a6f605 	stb	r2,-25640(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   2a48c:	e13ff817 	ldw	r4,-32(fp)
   2a490:	002d2bc0 	call	2d2bc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   2a494:	d0a6fe43 	ldbu	r2,-25607(gp)
   2a498:	10bfffc4 	addi	r2,r2,-1
   2a49c:	d0a6fe45 	stb	r2,-25607(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   2a4a0:	e0ffff03 	ldbu	r3,-4(fp)
   2a4a4:	00800134 	movhi	r2,4
   2a4a8:	10a11c04 	addi	r2,r2,-31632
   2a4ac:	18c7883a 	add	r3,r3,r3
   2a4b0:	18c7883a 	add	r3,r3,r3
   2a4b4:	10c5883a 	add	r2,r2,r3
   2a4b8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   2a4bc:	e0bff817 	ldw	r2,-32(fp)
   2a4c0:	10800617 	ldw	r2,24(r2)
   2a4c4:	1000071e 	bne	r2,zero,2a4e4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   2a4c8:	e0bff817 	ldw	r2,-32(fp)
   2a4cc:	10800517 	ldw	r2,20(r2)
   2a4d0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   2a4d4:	e0bff817 	ldw	r2,-32(fp)
   2a4d8:	10800517 	ldw	r2,20(r2)
   2a4dc:	d0a6f915 	stw	r2,-25628(gp)
   2a4e0:	00000a06 	br	2a50c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   2a4e4:	e0bff817 	ldw	r2,-32(fp)
   2a4e8:	10800617 	ldw	r2,24(r2)
   2a4ec:	e0fff817 	ldw	r3,-32(fp)
   2a4f0:	18c00517 	ldw	r3,20(r3)
   2a4f4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   2a4f8:	e0bff817 	ldw	r2,-32(fp)
   2a4fc:	10800517 	ldw	r2,20(r2)
   2a500:	e0fff817 	ldw	r3,-32(fp)
   2a504:	18c00617 	ldw	r3,24(r3)
   2a508:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   2a50c:	d0e6fd17 	ldw	r3,-25612(gp)
   2a510:	e0bff817 	ldw	r2,-32(fp)
   2a514:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   2a518:	e0bff817 	ldw	r2,-32(fp)
   2a51c:	d0a6fd15 	stw	r2,-25612(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   2a520:	e0bff817 	ldw	r2,-32(fp)
   2a524:	00c00fc4 	movi	r3,63
   2a528:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   2a52c:	e0bff817 	ldw	r2,-32(fp)
   2a530:	10001345 	stb	zero,77(r2)
   2a534:	e0bff617 	ldw	r2,-40(fp)
   2a538:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a53c:	e0bffc17 	ldw	r2,-16(fp)
   2a540:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   2a544:	d0a6f643 	ldbu	r2,-25639(gp)
   2a548:	10803fcc 	andi	r2,r2,255
   2a54c:	10800058 	cmpnei	r2,r2,1
   2a550:	1000011e 	bne	r2,zero,2a558 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   2a554:	00257700 	call	25770 <OS_Sched>
    }
    return (OS_ERR_NONE);
   2a558:	0005883a 	mov	r2,zero
}
   2a55c:	e037883a 	mov	sp,fp
   2a560:	dfc00117 	ldw	ra,4(sp)
   2a564:	df000017 	ldw	fp,0(sp)
   2a568:	dec00204 	addi	sp,sp,8
   2a56c:	f800283a 	ret

0002a570 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   2a570:	defff504 	addi	sp,sp,-44
   2a574:	df000a15 	stw	fp,40(sp)
   2a578:	df000a04 	addi	fp,sp,40
   2a57c:	2005883a 	mov	r2,r4
   2a580:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2a584:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   2a588:	e0bfff03 	ldbu	r2,-4(fp)
   2a58c:	10800518 	cmpnei	r2,r2,20
   2a590:	1000021e 	bne	r2,zero,2a59c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   2a594:	00800f84 	movi	r2,62
   2a598:	00004506 	br	2a6b0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   2a59c:	e0bfff03 	ldbu	r2,-4(fp)
   2a5a0:	10800530 	cmpltui	r2,r2,20
   2a5a4:	1000051e 	bne	r2,zero,2a5bc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   2a5a8:	e0bfff03 	ldbu	r2,-4(fp)
   2a5ac:	10803fe0 	cmpeqi	r2,r2,255
   2a5b0:	1000021e 	bne	r2,zero,2a5bc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   2a5b4:	00800a84 	movi	r2,42
   2a5b8:	00003d06 	br	2a6b0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   2a5bc:	e0bfff03 	ldbu	r2,-4(fp)
   2a5c0:	10803fd8 	cmpnei	r2,r2,255
   2a5c4:	1000111e 	bne	r2,zero,2a60c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a5c8:	0005303a 	rdctl	r2,status
   2a5cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a5d0:	e0fff917 	ldw	r3,-28(fp)
   2a5d4:	00bfff84 	movi	r2,-2
   2a5d8:	1884703a 	and	r2,r3,r2
   2a5dc:	1001703a 	wrctl	status,r2
  
  return context;
   2a5e0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   2a5e4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   2a5e8:	d0a70517 	ldw	r2,-25580(gp)
   2a5ec:	10800dc3 	ldbu	r2,55(r2)
   2a5f0:	e0bff805 	stb	r2,-32(fp)
   2a5f4:	e0bff617 	ldw	r2,-40(fp)
   2a5f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a5fc:	e0bffe17 	ldw	r2,-8(fp)
   2a600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   2a604:	e0bff803 	ldbu	r2,-32(fp)
   2a608:	00002906 	br	2a6b0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a60c:	0005303a 	rdctl	r2,status
   2a610:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a614:	e0fff717 	ldw	r3,-36(fp)
   2a618:	00bfff84 	movi	r2,-2
   2a61c:	1884703a 	and	r2,r3,r2
   2a620:	1001703a 	wrctl	status,r2
  
  return context;
   2a624:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   2a628:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   2a62c:	e0ffff03 	ldbu	r3,-4(fp)
   2a630:	00800134 	movhi	r2,4
   2a634:	10a11c04 	addi	r2,r2,-31632
   2a638:	18c7883a 	add	r3,r3,r3
   2a63c:	18c7883a 	add	r3,r3,r3
   2a640:	10c5883a 	add	r2,r2,r3
   2a644:	10800017 	ldw	r2,0(r2)
   2a648:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   2a64c:	e0bffb17 	ldw	r2,-20(fp)
   2a650:	1000061e 	bne	r2,zero,2a66c <OSTaskDelReq+0xfc>
   2a654:	e0bff617 	ldw	r2,-40(fp)
   2a658:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a65c:	e0bffa17 	ldw	r2,-24(fp)
   2a660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   2a664:	008010c4 	movi	r2,67
   2a668:	00001106 	br	2a6b0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   2a66c:	e0bffb17 	ldw	r2,-20(fp)
   2a670:	10800058 	cmpnei	r2,r2,1
   2a674:	1000061e 	bne	r2,zero,2a690 <OSTaskDelReq+0x120>
   2a678:	e0bff617 	ldw	r2,-40(fp)
   2a67c:	e0bffc15 	stw	r2,-16(fp)
   2a680:	e0bffc17 	ldw	r2,-16(fp)
   2a684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   2a688:	00800f44 	movi	r2,61
   2a68c:	00000806 	br	2a6b0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   2a690:	e0bffb17 	ldw	r2,-20(fp)
   2a694:	00c00fc4 	movi	r3,63
   2a698:	10c00dc5 	stb	r3,55(r2)
   2a69c:	e0bff617 	ldw	r2,-40(fp)
   2a6a0:	e0bffd15 	stw	r2,-12(fp)
   2a6a4:	e0bffd17 	ldw	r2,-12(fp)
   2a6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   2a6ac:	0005883a 	mov	r2,zero
}
   2a6b0:	e037883a 	mov	sp,fp
   2a6b4:	df000017 	ldw	fp,0(sp)
   2a6b8:	dec00104 	addi	sp,sp,4
   2a6bc:	f800283a 	ret

0002a6c0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   2a6c0:	defff404 	addi	sp,sp,-48
   2a6c4:	dfc00b15 	stw	ra,44(sp)
   2a6c8:	df000a15 	stw	fp,40(sp)
   2a6cc:	df000a04 	addi	fp,sp,40
   2a6d0:	2005883a 	mov	r2,r4
   2a6d4:	e17ffe15 	stw	r5,-8(fp)
   2a6d8:	e1bfff15 	stw	r6,-4(fp)
   2a6dc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   2a6e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   2a6e4:	e0bfff17 	ldw	r2,-4(fp)
   2a6e8:	1000021e 	bne	r2,zero,2a6f4 <OSTaskNameGet+0x34>
        return (0);
   2a6ec:	0005883a 	mov	r2,zero
   2a6f0:	00005406 	br	2a844 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   2a6f4:	e0bffd03 	ldbu	r2,-12(fp)
   2a6f8:	10800570 	cmpltui	r2,r2,21
   2a6fc:	1000081e 	bne	r2,zero,2a720 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   2a700:	e0bffd03 	ldbu	r2,-12(fp)
   2a704:	10803fe0 	cmpeqi	r2,r2,255
   2a708:	1000051e 	bne	r2,zero,2a720 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   2a70c:	e0bfff17 	ldw	r2,-4(fp)
   2a710:	00c00a84 	movi	r3,42
   2a714:	10c00005 	stb	r3,0(r2)
            return (0);
   2a718:	0005883a 	mov	r2,zero
   2a71c:	00004906 	br	2a844 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   2a720:	e0bffe17 	ldw	r2,-8(fp)
   2a724:	1000051e 	bne	r2,zero,2a73c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   2a728:	e0bfff17 	ldw	r2,-4(fp)
   2a72c:	00c00304 	movi	r3,12
   2a730:	10c00005 	stb	r3,0(r2)
        return (0);
   2a734:	0005883a 	mov	r2,zero
   2a738:	00004206 	br	2a844 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   2a73c:	d0a70403 	ldbu	r2,-25584(gp)
   2a740:	10803fcc 	andi	r2,r2,255
   2a744:	10000526 	beq	r2,zero,2a75c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   2a748:	e0bfff17 	ldw	r2,-4(fp)
   2a74c:	00c00444 	movi	r3,17
   2a750:	10c00005 	stb	r3,0(r2)
        return (0);
   2a754:	0005883a 	mov	r2,zero
   2a758:	00003a06 	br	2a844 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a75c:	0005303a 	rdctl	r2,status
   2a760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a764:	e0fffc17 	ldw	r3,-16(fp)
   2a768:	00bfff84 	movi	r2,-2
   2a76c:	1884703a 	and	r2,r3,r2
   2a770:	1001703a 	wrctl	status,r2
  
  return context;
   2a774:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   2a778:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   2a77c:	e0bffd03 	ldbu	r2,-12(fp)
   2a780:	10803fd8 	cmpnei	r2,r2,255
   2a784:	1000031e 	bne	r2,zero,2a794 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   2a788:	d0a70517 	ldw	r2,-25580(gp)
   2a78c:	10800c83 	ldbu	r2,50(r2)
   2a790:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2a794:	e0fffd03 	ldbu	r3,-12(fp)
   2a798:	00800134 	movhi	r2,4
   2a79c:	10a11c04 	addi	r2,r2,-31632
   2a7a0:	18c7883a 	add	r3,r3,r3
   2a7a4:	18c7883a 	add	r3,r3,r3
   2a7a8:	10c5883a 	add	r2,r2,r3
   2a7ac:	10800017 	ldw	r2,0(r2)
   2a7b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   2a7b4:	e0bff817 	ldw	r2,-32(fp)
   2a7b8:	1000091e 	bne	r2,zero,2a7e0 <OSTaskNameGet+0x120>
   2a7bc:	e0bff617 	ldw	r2,-40(fp)
   2a7c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a7c4:	e0bff717 	ldw	r2,-36(fp)
   2a7c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   2a7cc:	e0bfff17 	ldw	r2,-4(fp)
   2a7d0:	00c010c4 	movi	r3,67
   2a7d4:	10c00005 	stb	r3,0(r2)
        return (0);
   2a7d8:	0005883a 	mov	r2,zero
   2a7dc:	00001906 	br	2a844 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   2a7e0:	e0bff817 	ldw	r2,-32(fp)
   2a7e4:	10800058 	cmpnei	r2,r2,1
   2a7e8:	1000091e 	bne	r2,zero,2a810 <OSTaskNameGet+0x150>
   2a7ec:	e0bff617 	ldw	r2,-40(fp)
   2a7f0:	e0bff915 	stw	r2,-28(fp)
   2a7f4:	e0bff917 	ldw	r2,-28(fp)
   2a7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   2a7fc:	e0bfff17 	ldw	r2,-4(fp)
   2a800:	00c010c4 	movi	r3,67
   2a804:	10c00005 	stb	r3,0(r2)
        return (0);
   2a808:	0005883a 	mov	r2,zero
   2a80c:	00000d06 	br	2a844 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   2a810:	e0bff817 	ldw	r2,-32(fp)
   2a814:	10801304 	addi	r2,r2,76
   2a818:	100b883a 	mov	r5,r2
   2a81c:	e13ffe17 	ldw	r4,-8(fp)
   2a820:	00258b40 	call	258b4 <OS_StrCopy>
   2a824:	e0bffb05 	stb	r2,-20(fp)
   2a828:	e0bff617 	ldw	r2,-40(fp)
   2a82c:	e0bffa15 	stw	r2,-24(fp)
   2a830:	e0bffa17 	ldw	r2,-24(fp)
   2a834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2a838:	e0bfff17 	ldw	r2,-4(fp)
   2a83c:	10000005 	stb	zero,0(r2)
    return (len);
   2a840:	e0bffb03 	ldbu	r2,-20(fp)
}
   2a844:	e037883a 	mov	sp,fp
   2a848:	dfc00117 	ldw	ra,4(sp)
   2a84c:	df000017 	ldw	fp,0(sp)
   2a850:	dec00204 	addi	sp,sp,8
   2a854:	f800283a 	ret

0002a858 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   2a858:	defff304 	addi	sp,sp,-52
   2a85c:	dfc00c15 	stw	ra,48(sp)
   2a860:	df000b15 	stw	fp,44(sp)
   2a864:	df000b04 	addi	fp,sp,44
   2a868:	2005883a 	mov	r2,r4
   2a86c:	e17ffe15 	stw	r5,-8(fp)
   2a870:	e1bfff15 	stw	r6,-4(fp)
   2a874:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   2a878:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   2a87c:	e0bfff17 	ldw	r2,-4(fp)
   2a880:	10005c26 	beq	r2,zero,2a9f4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   2a884:	e0bffd03 	ldbu	r2,-12(fp)
   2a888:	10800570 	cmpltui	r2,r2,21
   2a88c:	1000071e 	bne	r2,zero,2a8ac <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   2a890:	e0bffd03 	ldbu	r2,-12(fp)
   2a894:	10803fe0 	cmpeqi	r2,r2,255
   2a898:	1000041e 	bne	r2,zero,2a8ac <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   2a89c:	e0bfff17 	ldw	r2,-4(fp)
   2a8a0:	00c00a84 	movi	r3,42
   2a8a4:	10c00005 	stb	r3,0(r2)
            return;
   2a8a8:	00005306 	br	2a9f8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   2a8ac:	e0bffe17 	ldw	r2,-8(fp)
   2a8b0:	1000041e 	bne	r2,zero,2a8c4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   2a8b4:	e0bfff17 	ldw	r2,-4(fp)
   2a8b8:	00c00304 	movi	r3,12
   2a8bc:	10c00005 	stb	r3,0(r2)
        return;
   2a8c0:	00004d06 	br	2a9f8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   2a8c4:	d0a70403 	ldbu	r2,-25584(gp)
   2a8c8:	10803fcc 	andi	r2,r2,255
   2a8cc:	10000426 	beq	r2,zero,2a8e0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   2a8d0:	e0bfff17 	ldw	r2,-4(fp)
   2a8d4:	00c00484 	movi	r3,18
   2a8d8:	10c00005 	stb	r3,0(r2)
        return;
   2a8dc:	00004606 	br	2a9f8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a8e0:	0005303a 	rdctl	r2,status
   2a8e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a8e8:	e0fffc17 	ldw	r3,-16(fp)
   2a8ec:	00bfff84 	movi	r2,-2
   2a8f0:	1884703a 	and	r2,r3,r2
   2a8f4:	1001703a 	wrctl	status,r2
  
  return context;
   2a8f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   2a8fc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   2a900:	e0bffd03 	ldbu	r2,-12(fp)
   2a904:	10803fd8 	cmpnei	r2,r2,255
   2a908:	1000031e 	bne	r2,zero,2a918 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   2a90c:	d0a70517 	ldw	r2,-25580(gp)
   2a910:	10800c83 	ldbu	r2,50(r2)
   2a914:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2a918:	e0fffd03 	ldbu	r3,-12(fp)
   2a91c:	00800134 	movhi	r2,4
   2a920:	10a11c04 	addi	r2,r2,-31632
   2a924:	18c7883a 	add	r3,r3,r3
   2a928:	18c7883a 	add	r3,r3,r3
   2a92c:	10c5883a 	add	r2,r2,r3
   2a930:	10800017 	ldw	r2,0(r2)
   2a934:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   2a938:	e0bff717 	ldw	r2,-36(fp)
   2a93c:	1000081e 	bne	r2,zero,2a960 <OSTaskNameSet+0x108>
   2a940:	e0bff517 	ldw	r2,-44(fp)
   2a944:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a948:	e0bff617 	ldw	r2,-40(fp)
   2a94c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   2a950:	e0bfff17 	ldw	r2,-4(fp)
   2a954:	00c010c4 	movi	r3,67
   2a958:	10c00005 	stb	r3,0(r2)
        return;
   2a95c:	00002606 	br	2a9f8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   2a960:	e0bff717 	ldw	r2,-36(fp)
   2a964:	10800058 	cmpnei	r2,r2,1
   2a968:	1000081e 	bne	r2,zero,2a98c <OSTaskNameSet+0x134>
   2a96c:	e0bff517 	ldw	r2,-44(fp)
   2a970:	e0bff815 	stw	r2,-32(fp)
   2a974:	e0bff817 	ldw	r2,-32(fp)
   2a978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   2a97c:	e0bfff17 	ldw	r2,-4(fp)
   2a980:	00c010c4 	movi	r3,67
   2a984:	10c00005 	stb	r3,0(r2)
        return;
   2a988:	00001b06 	br	2a9f8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   2a98c:	e13ffe17 	ldw	r4,-8(fp)
   2a990:	00259280 	call	25928 <OS_StrLen>
   2a994:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   2a998:	e0bffa03 	ldbu	r2,-24(fp)
   2a99c:	10800830 	cmpltui	r2,r2,32
   2a9a0:	1000081e 	bne	r2,zero,2a9c4 <OSTaskNameSet+0x16c>
   2a9a4:	e0bff517 	ldw	r2,-44(fp)
   2a9a8:	e0bff915 	stw	r2,-28(fp)
   2a9ac:	e0bff917 	ldw	r2,-28(fp)
   2a9b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   2a9b4:	e0bfff17 	ldw	r2,-4(fp)
   2a9b8:	00c01044 	movi	r3,65
   2a9bc:	10c00005 	stb	r3,0(r2)
        return;
   2a9c0:	00000d06 	br	2a9f8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   2a9c4:	e0bff717 	ldw	r2,-36(fp)
   2a9c8:	10801304 	addi	r2,r2,76
   2a9cc:	e17ffe17 	ldw	r5,-8(fp)
   2a9d0:	1009883a 	mov	r4,r2
   2a9d4:	00258b40 	call	258b4 <OS_StrCopy>
   2a9d8:	e0bff517 	ldw	r2,-44(fp)
   2a9dc:	e0bffb15 	stw	r2,-20(fp)
   2a9e0:	e0bffb17 	ldw	r2,-20(fp)
   2a9e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2a9e8:	e0bfff17 	ldw	r2,-4(fp)
   2a9ec:	10000005 	stb	zero,0(r2)
   2a9f0:	00000106 	br	2a9f8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   2a9f4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   2a9f8:	e037883a 	mov	sp,fp
   2a9fc:	dfc00117 	ldw	ra,4(sp)
   2aa00:	df000017 	ldw	fp,0(sp)
   2aa04:	dec00204 	addi	sp,sp,8
   2aa08:	f800283a 	ret

0002aa0c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   2aa0c:	defff404 	addi	sp,sp,-48
   2aa10:	dfc00b15 	stw	ra,44(sp)
   2aa14:	df000a15 	stw	fp,40(sp)
   2aa18:	df000a04 	addi	fp,sp,40
   2aa1c:	2005883a 	mov	r2,r4
   2aa20:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   2aa24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   2aa28:	e0bfff03 	ldbu	r2,-4(fp)
   2aa2c:	10800530 	cmpltui	r2,r2,20
   2aa30:	1000021e 	bne	r2,zero,2aa3c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   2aa34:	00800a84 	movi	r2,42
   2aa38:	00006406 	br	2abcc <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2aa3c:	0005303a 	rdctl	r2,status
   2aa40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2aa44:	e0fffe17 	ldw	r3,-8(fp)
   2aa48:	00bfff84 	movi	r2,-2
   2aa4c:	1884703a 	and	r2,r3,r2
   2aa50:	1001703a 	wrctl	status,r2
  
  return context;
   2aa54:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2aa58:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   2aa5c:	e0ffff03 	ldbu	r3,-4(fp)
   2aa60:	00800134 	movhi	r2,4
   2aa64:	10a11c04 	addi	r2,r2,-31632
   2aa68:	18c7883a 	add	r3,r3,r3
   2aa6c:	18c7883a 	add	r3,r3,r3
   2aa70:	10c5883a 	add	r2,r2,r3
   2aa74:	10800017 	ldw	r2,0(r2)
   2aa78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   2aa7c:	e0bff817 	ldw	r2,-32(fp)
   2aa80:	1000061e 	bne	r2,zero,2aa9c <OSTaskResume+0x90>
   2aa84:	e0bff617 	ldw	r2,-40(fp)
   2aa88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2aa8c:	e0bff717 	ldw	r2,-36(fp)
   2aa90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   2aa94:	00801184 	movi	r2,70
   2aa98:	00004c06 	br	2abcc <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   2aa9c:	e0bff817 	ldw	r2,-32(fp)
   2aaa0:	10800058 	cmpnei	r2,r2,1
   2aaa4:	1000061e 	bne	r2,zero,2aac0 <OSTaskResume+0xb4>
   2aaa8:	e0bff617 	ldw	r2,-40(fp)
   2aaac:	e0bff915 	stw	r2,-28(fp)
   2aab0:	e0bff917 	ldw	r2,-28(fp)
   2aab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2aab8:	008010c4 	movi	r2,67
   2aabc:	00004306 	br	2abcc <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   2aac0:	e0bff817 	ldw	r2,-32(fp)
   2aac4:	10800c03 	ldbu	r2,48(r2)
   2aac8:	10803fcc 	andi	r2,r2,255
   2aacc:	1080020c 	andi	r2,r2,8
   2aad0:	10003926 	beq	r2,zero,2abb8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   2aad4:	e0bff817 	ldw	r2,-32(fp)
   2aad8:	10c00c03 	ldbu	r3,48(r2)
   2aadc:	00bffdc4 	movi	r2,-9
   2aae0:	1884703a 	and	r2,r3,r2
   2aae4:	1007883a 	mov	r3,r2
   2aae8:	e0bff817 	ldw	r2,-32(fp)
   2aaec:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   2aaf0:	e0bff817 	ldw	r2,-32(fp)
   2aaf4:	10800c03 	ldbu	r2,48(r2)
   2aaf8:	10803fcc 	andi	r2,r2,255
   2aafc:	1000281e 	bne	r2,zero,2aba0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   2ab00:	e0bff817 	ldw	r2,-32(fp)
   2ab04:	10800b8b 	ldhu	r2,46(r2)
   2ab08:	10bfffcc 	andi	r2,r2,65535
   2ab0c:	10001f1e 	bne	r2,zero,2ab8c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   2ab10:	e0bff817 	ldw	r2,-32(fp)
   2ab14:	10c00d83 	ldbu	r3,54(r2)
   2ab18:	d0a70203 	ldbu	r2,-25592(gp)
   2ab1c:	1884b03a 	or	r2,r3,r2
   2ab20:	d0a70205 	stb	r2,-25592(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   2ab24:	e0bff817 	ldw	r2,-32(fp)
   2ab28:	10800d03 	ldbu	r2,52(r2)
   2ab2c:	10c03fcc 	andi	r3,r2,255
   2ab30:	e0bff817 	ldw	r2,-32(fp)
   2ab34:	10800d03 	ldbu	r2,52(r2)
   2ab38:	11003fcc 	andi	r4,r2,255
   2ab3c:	d0a70244 	addi	r2,gp,-25591
   2ab40:	2085883a 	add	r2,r4,r2
   2ab44:	11000003 	ldbu	r4,0(r2)
   2ab48:	e0bff817 	ldw	r2,-32(fp)
   2ab4c:	10800d43 	ldbu	r2,53(r2)
   2ab50:	2084b03a 	or	r2,r4,r2
   2ab54:	1009883a 	mov	r4,r2
   2ab58:	d0a70244 	addi	r2,gp,-25591
   2ab5c:	1885883a 	add	r2,r3,r2
   2ab60:	11000005 	stb	r4,0(r2)
   2ab64:	e0bff617 	ldw	r2,-40(fp)
   2ab68:	e0bffa15 	stw	r2,-24(fp)
   2ab6c:	e0bffa17 	ldw	r2,-24(fp)
   2ab70:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   2ab74:	d0a6f643 	ldbu	r2,-25639(gp)
   2ab78:	10803fcc 	andi	r2,r2,255
   2ab7c:	10800058 	cmpnei	r2,r2,1
   2ab80:	10000b1e 	bne	r2,zero,2abb0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   2ab84:	00257700 	call	25770 <OS_Sched>
   2ab88:	00000906 	br	2abb0 <OSTaskResume+0x1a4>
   2ab8c:	e0bff617 	ldw	r2,-40(fp)
   2ab90:	e0bffb15 	stw	r2,-20(fp)
   2ab94:	e0bffb17 	ldw	r2,-20(fp)
   2ab98:	1001703a 	wrctl	status,r2
   2ab9c:	00000406 	br	2abb0 <OSTaskResume+0x1a4>
   2aba0:	e0bff617 	ldw	r2,-40(fp)
   2aba4:	e0bffc15 	stw	r2,-16(fp)
   2aba8:	e0bffc17 	ldw	r2,-16(fp)
   2abac:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   2abb0:	0005883a 	mov	r2,zero
   2abb4:	00000506 	br	2abcc <OSTaskResume+0x1c0>
   2abb8:	e0bff617 	ldw	r2,-40(fp)
   2abbc:	e0bffd15 	stw	r2,-12(fp)
   2abc0:	e0bffd17 	ldw	r2,-12(fp)
   2abc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   2abc8:	00801104 	movi	r2,68
}
   2abcc:	e037883a 	mov	sp,fp
   2abd0:	dfc00117 	ldw	ra,4(sp)
   2abd4:	df000017 	ldw	fp,0(sp)
   2abd8:	dec00204 	addi	sp,sp,8
   2abdc:	f800283a 	ret

0002abe0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   2abe0:	defff304 	addi	sp,sp,-52
   2abe4:	df000c15 	stw	fp,48(sp)
   2abe8:	df000c04 	addi	fp,sp,48
   2abec:	2005883a 	mov	r2,r4
   2abf0:	e17fff15 	stw	r5,-4(fp)
   2abf4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2abf8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   2abfc:	e0bffe03 	ldbu	r2,-8(fp)
   2ac00:	10800570 	cmpltui	r2,r2,21
   2ac04:	1000051e 	bne	r2,zero,2ac1c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   2ac08:	e0bffe03 	ldbu	r2,-8(fp)
   2ac0c:	10803fe0 	cmpeqi	r2,r2,255
   2ac10:	1000021e 	bne	r2,zero,2ac1c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   2ac14:	00800a84 	movi	r2,42
   2ac18:	00005d06 	br	2ad90 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   2ac1c:	e0bfff17 	ldw	r2,-4(fp)
   2ac20:	1000021e 	bne	r2,zero,2ac2c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   2ac24:	00800244 	movi	r2,9
   2ac28:	00005906 	br	2ad90 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   2ac2c:	e0bfff17 	ldw	r2,-4(fp)
   2ac30:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   2ac34:	e0bfff17 	ldw	r2,-4(fp)
   2ac38:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ac3c:	0005303a 	rdctl	r2,status
   2ac40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ac44:	e0fffd17 	ldw	r3,-12(fp)
   2ac48:	00bfff84 	movi	r2,-2
   2ac4c:	1884703a 	and	r2,r3,r2
   2ac50:	1001703a 	wrctl	status,r2
  
  return context;
   2ac54:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   2ac58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   2ac5c:	e0bffe03 	ldbu	r2,-8(fp)
   2ac60:	10803fd8 	cmpnei	r2,r2,255
   2ac64:	1000031e 	bne	r2,zero,2ac74 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   2ac68:	d0a70517 	ldw	r2,-25580(gp)
   2ac6c:	10800c83 	ldbu	r2,50(r2)
   2ac70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2ac74:	e0fffe03 	ldbu	r3,-8(fp)
   2ac78:	00800134 	movhi	r2,4
   2ac7c:	10a11c04 	addi	r2,r2,-31632
   2ac80:	18c7883a 	add	r3,r3,r3
   2ac84:	18c7883a 	add	r3,r3,r3
   2ac88:	10c5883a 	add	r2,r2,r3
   2ac8c:	10800017 	ldw	r2,0(r2)
   2ac90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   2ac94:	e0bff817 	ldw	r2,-32(fp)
   2ac98:	1000061e 	bne	r2,zero,2acb4 <OSTaskStkChk+0xd4>
   2ac9c:	e0bff617 	ldw	r2,-40(fp)
   2aca0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2aca4:	e0bff717 	ldw	r2,-36(fp)
   2aca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2acac:	008010c4 	movi	r2,67
   2acb0:	00003706 	br	2ad90 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   2acb4:	e0bff817 	ldw	r2,-32(fp)
   2acb8:	10800058 	cmpnei	r2,r2,1
   2acbc:	1000061e 	bne	r2,zero,2acd8 <OSTaskStkChk+0xf8>
   2acc0:	e0bff617 	ldw	r2,-40(fp)
   2acc4:	e0bff915 	stw	r2,-28(fp)
   2acc8:	e0bff917 	ldw	r2,-28(fp)
   2accc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2acd0:	008010c4 	movi	r2,67
   2acd4:	00002e06 	br	2ad90 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   2acd8:	e0bff817 	ldw	r2,-32(fp)
   2acdc:	1080040b 	ldhu	r2,16(r2)
   2ace0:	10bfffcc 	andi	r2,r2,65535
   2ace4:	1080004c 	andi	r2,r2,1
   2ace8:	1000061e 	bne	r2,zero,2ad04 <OSTaskStkChk+0x124>
   2acec:	e0bff617 	ldw	r2,-40(fp)
   2acf0:	e0bffa15 	stw	r2,-24(fp)
   2acf4:	e0bffa17 	ldw	r2,-24(fp)
   2acf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   2acfc:	00801144 	movi	r2,69
   2ad00:	00002306 	br	2ad90 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   2ad04:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   2ad08:	e0bff817 	ldw	r2,-32(fp)
   2ad0c:	10800317 	ldw	r2,12(r2)
   2ad10:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   2ad14:	e0bff817 	ldw	r2,-32(fp)
   2ad18:	10800217 	ldw	r2,8(r2)
   2ad1c:	e0bff415 	stw	r2,-48(fp)
   2ad20:	e0bff617 	ldw	r2,-40(fp)
   2ad24:	e0bffb15 	stw	r2,-20(fp)
   2ad28:	e0bffb17 	ldw	r2,-20(fp)
   2ad2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   2ad30:	00000306 	br	2ad40 <OSTaskStkChk+0x160>
        nfree++;
   2ad34:	e0bff517 	ldw	r2,-44(fp)
   2ad38:	10800044 	addi	r2,r2,1
   2ad3c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   2ad40:	e0bff417 	ldw	r2,-48(fp)
   2ad44:	10c00104 	addi	r3,r2,4
   2ad48:	e0fff415 	stw	r3,-48(fp)
   2ad4c:	10800017 	ldw	r2,0(r2)
   2ad50:	103ff826 	beq	r2,zero,2ad34 <__alt_data_end+0xfffeb934>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   2ad54:	e0bff517 	ldw	r2,-44(fp)
   2ad58:	1085883a 	add	r2,r2,r2
   2ad5c:	1085883a 	add	r2,r2,r2
   2ad60:	1007883a 	mov	r3,r2
   2ad64:	e0bfff17 	ldw	r2,-4(fp)
   2ad68:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   2ad6c:	e0fffc17 	ldw	r3,-16(fp)
   2ad70:	e0bff517 	ldw	r2,-44(fp)
   2ad74:	1885c83a 	sub	r2,r3,r2
   2ad78:	1085883a 	add	r2,r2,r2
   2ad7c:	1085883a 	add	r2,r2,r2
   2ad80:	1007883a 	mov	r3,r2
   2ad84:	e0bfff17 	ldw	r2,-4(fp)
   2ad88:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   2ad8c:	0005883a 	mov	r2,zero
}
   2ad90:	e037883a 	mov	sp,fp
   2ad94:	df000017 	ldw	fp,0(sp)
   2ad98:	dec00104 	addi	sp,sp,4
   2ad9c:	f800283a 	ret

0002ada0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   2ada0:	defff504 	addi	sp,sp,-44
   2ada4:	dfc00a15 	stw	ra,40(sp)
   2ada8:	df000915 	stw	fp,36(sp)
   2adac:	df000904 	addi	fp,sp,36
   2adb0:	2005883a 	mov	r2,r4
   2adb4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2adb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   2adbc:	e0bfff03 	ldbu	r2,-4(fp)
   2adc0:	10800518 	cmpnei	r2,r2,20
   2adc4:	1000021e 	bne	r2,zero,2add0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   2adc8:	008011c4 	movi	r2,71
   2adcc:	00006806 	br	2af70 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   2add0:	e0bfff03 	ldbu	r2,-4(fp)
   2add4:	10800530 	cmpltui	r2,r2,20
   2add8:	1000051e 	bne	r2,zero,2adf0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   2addc:	e0bfff03 	ldbu	r2,-4(fp)
   2ade0:	10803fe0 	cmpeqi	r2,r2,255
   2ade4:	1000021e 	bne	r2,zero,2adf0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   2ade8:	00800a84 	movi	r2,42
   2adec:	00006006 	br	2af70 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2adf0:	0005303a 	rdctl	r2,status
   2adf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2adf8:	e0fffe17 	ldw	r3,-8(fp)
   2adfc:	00bfff84 	movi	r2,-2
   2ae00:	1884703a 	and	r2,r3,r2
   2ae04:	1001703a 	wrctl	status,r2
  
  return context;
   2ae08:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   2ae0c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   2ae10:	e0bfff03 	ldbu	r2,-4(fp)
   2ae14:	10803fd8 	cmpnei	r2,r2,255
   2ae18:	1000061e 	bne	r2,zero,2ae34 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   2ae1c:	d0a70517 	ldw	r2,-25580(gp)
   2ae20:	10800c83 	ldbu	r2,50(r2)
   2ae24:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   2ae28:	00800044 	movi	r2,1
   2ae2c:	e0bff705 	stb	r2,-36(fp)
   2ae30:	00000906 	br	2ae58 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   2ae34:	d0a70517 	ldw	r2,-25580(gp)
   2ae38:	10800c83 	ldbu	r2,50(r2)
   2ae3c:	10c03fcc 	andi	r3,r2,255
   2ae40:	e0bfff03 	ldbu	r2,-4(fp)
   2ae44:	1880031e 	bne	r3,r2,2ae54 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   2ae48:	00800044 	movi	r2,1
   2ae4c:	e0bff705 	stb	r2,-36(fp)
   2ae50:	00000106 	br	2ae58 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   2ae54:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2ae58:	e0ffff03 	ldbu	r3,-4(fp)
   2ae5c:	00800134 	movhi	r2,4
   2ae60:	10a11c04 	addi	r2,r2,-31632
   2ae64:	18c7883a 	add	r3,r3,r3
   2ae68:	18c7883a 	add	r3,r3,r3
   2ae6c:	10c5883a 	add	r2,r2,r3
   2ae70:	10800017 	ldw	r2,0(r2)
   2ae74:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   2ae78:	e0bffa17 	ldw	r2,-24(fp)
   2ae7c:	1000061e 	bne	r2,zero,2ae98 <OSTaskSuspend+0xf8>
   2ae80:	e0bff817 	ldw	r2,-32(fp)
   2ae84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ae88:	e0bff917 	ldw	r2,-28(fp)
   2ae8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   2ae90:	00801204 	movi	r2,72
   2ae94:	00003606 	br	2af70 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   2ae98:	e0bffa17 	ldw	r2,-24(fp)
   2ae9c:	10800058 	cmpnei	r2,r2,1
   2aea0:	1000061e 	bne	r2,zero,2aebc <OSTaskSuspend+0x11c>
   2aea4:	e0bff817 	ldw	r2,-32(fp)
   2aea8:	e0bffb15 	stw	r2,-20(fp)
   2aeac:	e0bffb17 	ldw	r2,-20(fp)
   2aeb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2aeb4:	008010c4 	movi	r2,67
   2aeb8:	00002d06 	br	2af70 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   2aebc:	e0bffa17 	ldw	r2,-24(fp)
   2aec0:	10800d03 	ldbu	r2,52(r2)
   2aec4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   2aec8:	e0fffd03 	ldbu	r3,-12(fp)
   2aecc:	e13ffd03 	ldbu	r4,-12(fp)
   2aed0:	d0a70244 	addi	r2,gp,-25591
   2aed4:	2085883a 	add	r2,r4,r2
   2aed8:	10800003 	ldbu	r2,0(r2)
   2aedc:	1009883a 	mov	r4,r2
   2aee0:	e0bffa17 	ldw	r2,-24(fp)
   2aee4:	10800d43 	ldbu	r2,53(r2)
   2aee8:	0084303a 	nor	r2,zero,r2
   2aeec:	2084703a 	and	r2,r4,r2
   2aef0:	1009883a 	mov	r4,r2
   2aef4:	d0a70244 	addi	r2,gp,-25591
   2aef8:	1885883a 	add	r2,r3,r2
   2aefc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   2af00:	e0fffd03 	ldbu	r3,-12(fp)
   2af04:	d0a70244 	addi	r2,gp,-25591
   2af08:	1885883a 	add	r2,r3,r2
   2af0c:	10800003 	ldbu	r2,0(r2)
   2af10:	10803fcc 	andi	r2,r2,255
   2af14:	1000071e 	bne	r2,zero,2af34 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   2af18:	e0bffa17 	ldw	r2,-24(fp)
   2af1c:	10800d83 	ldbu	r2,54(r2)
   2af20:	0084303a 	nor	r2,zero,r2
   2af24:	1007883a 	mov	r3,r2
   2af28:	d0a70203 	ldbu	r2,-25592(gp)
   2af2c:	1884703a 	and	r2,r3,r2
   2af30:	d0a70205 	stb	r2,-25592(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   2af34:	e0bffa17 	ldw	r2,-24(fp)
   2af38:	10800c03 	ldbu	r2,48(r2)
   2af3c:	10800214 	ori	r2,r2,8
   2af40:	1007883a 	mov	r3,r2
   2af44:	e0bffa17 	ldw	r2,-24(fp)
   2af48:	10c00c05 	stb	r3,48(r2)
   2af4c:	e0bff817 	ldw	r2,-32(fp)
   2af50:	e0bffc15 	stw	r2,-16(fp)
   2af54:	e0bffc17 	ldw	r2,-16(fp)
   2af58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   2af5c:	e0bff703 	ldbu	r2,-36(fp)
   2af60:	10800058 	cmpnei	r2,r2,1
   2af64:	1000011e 	bne	r2,zero,2af6c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   2af68:	00257700 	call	25770 <OS_Sched>
    }
    return (OS_ERR_NONE);
   2af6c:	0005883a 	mov	r2,zero
}
   2af70:	e037883a 	mov	sp,fp
   2af74:	dfc00117 	ldw	ra,4(sp)
   2af78:	df000017 	ldw	fp,0(sp)
   2af7c:	dec00204 	addi	sp,sp,8
   2af80:	f800283a 	ret

0002af84 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   2af84:	defff604 	addi	sp,sp,-40
   2af88:	dfc00915 	stw	ra,36(sp)
   2af8c:	df000815 	stw	fp,32(sp)
   2af90:	df000804 	addi	fp,sp,32
   2af94:	2005883a 	mov	r2,r4
   2af98:	e17fff15 	stw	r5,-4(fp)
   2af9c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2afa0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   2afa4:	e0bffe03 	ldbu	r2,-8(fp)
   2afa8:	10800570 	cmpltui	r2,r2,21
   2afac:	1000051e 	bne	r2,zero,2afc4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   2afb0:	e0bffe03 	ldbu	r2,-8(fp)
   2afb4:	10803fe0 	cmpeqi	r2,r2,255
   2afb8:	1000021e 	bne	r2,zero,2afc4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   2afbc:	00800a84 	movi	r2,42
   2afc0:	00003406 	br	2b094 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   2afc4:	e0bfff17 	ldw	r2,-4(fp)
   2afc8:	1000021e 	bne	r2,zero,2afd4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   2afcc:	00800244 	movi	r2,9
   2afd0:	00003006 	br	2b094 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2afd4:	0005303a 	rdctl	r2,status
   2afd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2afdc:	e0fffd17 	ldw	r3,-12(fp)
   2afe0:	00bfff84 	movi	r2,-2
   2afe4:	1884703a 	and	r2,r3,r2
   2afe8:	1001703a 	wrctl	status,r2
  
  return context;
   2afec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2aff0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   2aff4:	e0bffe03 	ldbu	r2,-8(fp)
   2aff8:	10803fd8 	cmpnei	r2,r2,255
   2affc:	1000031e 	bne	r2,zero,2b00c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   2b000:	d0a70517 	ldw	r2,-25580(gp)
   2b004:	10800c83 	ldbu	r2,50(r2)
   2b008:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2b00c:	e0fffe03 	ldbu	r3,-8(fp)
   2b010:	00800134 	movhi	r2,4
   2b014:	10a11c04 	addi	r2,r2,-31632
   2b018:	18c7883a 	add	r3,r3,r3
   2b01c:	18c7883a 	add	r3,r3,r3
   2b020:	10c5883a 	add	r2,r2,r3
   2b024:	10800017 	ldw	r2,0(r2)
   2b028:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   2b02c:	e0bffa17 	ldw	r2,-24(fp)
   2b030:	1000061e 	bne	r2,zero,2b04c <OSTaskQuery+0xc8>
   2b034:	e0bff817 	ldw	r2,-32(fp)
   2b038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b03c:	e0bff917 	ldw	r2,-28(fp)
   2b040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   2b044:	00800a44 	movi	r2,41
   2b048:	00001206 	br	2b094 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   2b04c:	e0bffa17 	ldw	r2,-24(fp)
   2b050:	10800058 	cmpnei	r2,r2,1
   2b054:	1000061e 	bne	r2,zero,2b070 <OSTaskQuery+0xec>
   2b058:	e0bff817 	ldw	r2,-32(fp)
   2b05c:	e0bffb15 	stw	r2,-20(fp)
   2b060:	e0bffb17 	ldw	r2,-20(fp)
   2b064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2b068:	008010c4 	movi	r2,67
   2b06c:	00000906 	br	2b094 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   2b070:	01801b04 	movi	r6,108
   2b074:	e17ffa17 	ldw	r5,-24(fp)
   2b078:	e13fff17 	ldw	r4,-4(fp)
   2b07c:	00257080 	call	25708 <OS_MemCopy>
   2b080:	e0bff817 	ldw	r2,-32(fp)
   2b084:	e0bffc15 	stw	r2,-16(fp)
   2b088:	e0bffc17 	ldw	r2,-16(fp)
   2b08c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   2b090:	0005883a 	mov	r2,zero
}
   2b094:	e037883a 	mov	sp,fp
   2b098:	dfc00117 	ldw	ra,4(sp)
   2b09c:	df000017 	ldw	fp,0(sp)
   2b0a0:	dec00204 	addi	sp,sp,8
   2b0a4:	f800283a 	ret

0002b0a8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   2b0a8:	defffc04 	addi	sp,sp,-16
   2b0ac:	df000315 	stw	fp,12(sp)
   2b0b0:	df000304 	addi	fp,sp,12
   2b0b4:	e13ffd15 	stw	r4,-12(fp)
   2b0b8:	e17ffe15 	stw	r5,-8(fp)
   2b0bc:	3005883a 	mov	r2,r6
   2b0c0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   2b0c4:	e0bfff0b 	ldhu	r2,-4(fp)
   2b0c8:	1080004c 	andi	r2,r2,1
   2b0cc:	10000d26 	beq	r2,zero,2b104 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   2b0d0:	e0bfff0b 	ldhu	r2,-4(fp)
   2b0d4:	1080008c 	andi	r2,r2,2
   2b0d8:	10000a26 	beq	r2,zero,2b104 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   2b0dc:	00000706 	br	2b0fc <OS_TaskStkClr+0x54>
                size--;
   2b0e0:	e0bffe17 	ldw	r2,-8(fp)
   2b0e4:	10bfffc4 	addi	r2,r2,-1
   2b0e8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   2b0ec:	e0bffd17 	ldw	r2,-12(fp)
   2b0f0:	10c00104 	addi	r3,r2,4
   2b0f4:	e0fffd15 	stw	r3,-12(fp)
   2b0f8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   2b0fc:	e0bffe17 	ldw	r2,-8(fp)
   2b100:	103ff71e 	bne	r2,zero,2b0e0 <__alt_data_end+0xfffebce0>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   2b104:	0001883a 	nop
   2b108:	e037883a 	mov	sp,fp
   2b10c:	df000017 	ldw	fp,0(sp)
   2b110:	dec00104 	addi	sp,sp,4
   2b114:	f800283a 	ret

0002b118 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   2b118:	defff904 	addi	sp,sp,-28
   2b11c:	dfc00615 	stw	ra,24(sp)
   2b120:	df000515 	stw	fp,20(sp)
   2b124:	df000504 	addi	fp,sp,20
   2b128:	2005883a 	mov	r2,r4
   2b12c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2b130:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   2b134:	d0a70403 	ldbu	r2,-25584(gp)
   2b138:	10803fcc 	andi	r2,r2,255
   2b13c:	1000311e 	bne	r2,zero,2b204 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   2b140:	e0bfff0b 	ldhu	r2,-4(fp)
   2b144:	10003026 	beq	r2,zero,2b208 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b148:	0005303a 	rdctl	r2,status
   2b14c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b150:	e0fffe17 	ldw	r3,-8(fp)
   2b154:	00bfff84 	movi	r2,-2
   2b158:	1884703a 	and	r2,r3,r2
   2b15c:	1001703a 	wrctl	status,r2
  
  return context;
   2b160:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   2b164:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   2b168:	d0a70517 	ldw	r2,-25580(gp)
   2b16c:	10800d03 	ldbu	r2,52(r2)
   2b170:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   2b174:	e0fffd03 	ldbu	r3,-12(fp)
   2b178:	e13ffd03 	ldbu	r4,-12(fp)
   2b17c:	d0a70244 	addi	r2,gp,-25591
   2b180:	2085883a 	add	r2,r4,r2
   2b184:	10800003 	ldbu	r2,0(r2)
   2b188:	1009883a 	mov	r4,r2
   2b18c:	d0a70517 	ldw	r2,-25580(gp)
   2b190:	10800d43 	ldbu	r2,53(r2)
   2b194:	0084303a 	nor	r2,zero,r2
   2b198:	2084703a 	and	r2,r4,r2
   2b19c:	1009883a 	mov	r4,r2
   2b1a0:	d0a70244 	addi	r2,gp,-25591
   2b1a4:	1885883a 	add	r2,r3,r2
   2b1a8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   2b1ac:	e0fffd03 	ldbu	r3,-12(fp)
   2b1b0:	d0a70244 	addi	r2,gp,-25591
   2b1b4:	1885883a 	add	r2,r3,r2
   2b1b8:	10800003 	ldbu	r2,0(r2)
   2b1bc:	10803fcc 	andi	r2,r2,255
   2b1c0:	1000071e 	bne	r2,zero,2b1e0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   2b1c4:	d0a70517 	ldw	r2,-25580(gp)
   2b1c8:	10800d83 	ldbu	r2,54(r2)
   2b1cc:	0084303a 	nor	r2,zero,r2
   2b1d0:	1007883a 	mov	r3,r2
   2b1d4:	d0a70203 	ldbu	r2,-25592(gp)
   2b1d8:	1884703a 	and	r2,r3,r2
   2b1dc:	d0a70205 	stb	r2,-25592(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   2b1e0:	d0a70517 	ldw	r2,-25580(gp)
   2b1e4:	e0ffff0b 	ldhu	r3,-4(fp)
   2b1e8:	10c00b8d 	sth	r3,46(r2)
   2b1ec:	e0bffb17 	ldw	r2,-20(fp)
   2b1f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b1f4:	e0bffc17 	ldw	r2,-16(fp)
   2b1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   2b1fc:	00257700 	call	25770 <OS_Sched>
   2b200:	00000106 	br	2b208 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   2b204:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   2b208:	e037883a 	mov	sp,fp
   2b20c:	dfc00117 	ldw	ra,4(sp)
   2b210:	df000017 	ldw	fp,0(sp)
   2b214:	dec00204 	addi	sp,sp,8
   2b218:	f800283a 	ret

0002b21c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   2b21c:	defff704 	addi	sp,sp,-36
   2b220:	dfc00815 	stw	ra,32(sp)
   2b224:	df000715 	stw	fp,28(sp)
   2b228:	dc000615 	stw	r16,24(sp)
   2b22c:	df000704 	addi	fp,sp,28
   2b230:	2011883a 	mov	r8,r4
   2b234:	2809883a 	mov	r4,r5
   2b238:	3007883a 	mov	r3,r6
   2b23c:	3805883a 	mov	r2,r7
   2b240:	e23ffb05 	stb	r8,-20(fp)
   2b244:	e13ffc05 	stb	r4,-16(fp)
   2b248:	e0fffd05 	stb	r3,-12(fp)
   2b24c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   2b250:	d0a70403 	ldbu	r2,-25584(gp)
   2b254:	10803fcc 	andi	r2,r2,255
   2b258:	10000226 	beq	r2,zero,2b264 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   2b25c:	00801544 	movi	r2,85
   2b260:	00004706 	br	2b380 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   2b264:	e0bffb03 	ldbu	r2,-20(fp)
   2b268:	1000081e 	bne	r2,zero,2b28c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   2b26c:	e0bffc03 	ldbu	r2,-16(fp)
   2b270:	1000061e 	bne	r2,zero,2b28c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   2b274:	e0bffd03 	ldbu	r2,-12(fp)
   2b278:	1000041e 	bne	r2,zero,2b28c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   2b27c:	e0bffe0b 	ldhu	r2,-8(fp)
   2b280:	1000021e 	bne	r2,zero,2b28c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   2b284:	00801504 	movi	r2,84
   2b288:	00003d06 	br	2b380 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   2b28c:	e0bffc03 	ldbu	r2,-16(fp)
   2b290:	10800f30 	cmpltui	r2,r2,60
   2b294:	1000021e 	bne	r2,zero,2b2a0 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   2b298:	00801444 	movi	r2,81
   2b29c:	00003806 	br	2b380 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   2b2a0:	e0bffd03 	ldbu	r2,-12(fp)
   2b2a4:	10800f30 	cmpltui	r2,r2,60
   2b2a8:	1000021e 	bne	r2,zero,2b2b4 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   2b2ac:	00801484 	movi	r2,82
   2b2b0:	00003306 	br	2b380 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   2b2b4:	e0bffe0b 	ldhu	r2,-8(fp)
   2b2b8:	1080fa30 	cmpltui	r2,r2,1000
   2b2bc:	1000021e 	bne	r2,zero,2b2c8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   2b2c0:	008014c4 	movi	r2,83
   2b2c4:	00002e06 	br	2b380 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   2b2c8:	e0bffb03 	ldbu	r2,-20(fp)
   2b2cc:	01438404 	movi	r5,3600
   2b2d0:	1009883a 	mov	r4,r2
   2b2d4:	002316c0 	call	2316c <__mulsi3>
   2b2d8:	1021883a 	mov	r16,r2
   2b2dc:	e0bffc03 	ldbu	r2,-16(fp)
   2b2e0:	01400f04 	movi	r5,60
   2b2e4:	1009883a 	mov	r4,r2
   2b2e8:	002316c0 	call	2316c <__mulsi3>
   2b2ec:	8087883a 	add	r3,r16,r2
   2b2f0:	e0bffd03 	ldbu	r2,-12(fp)
   2b2f4:	1885883a 	add	r2,r3,r2
   2b2f8:	0140fa04 	movi	r5,1000
   2b2fc:	1009883a 	mov	r4,r2
   2b300:	002316c0 	call	2316c <__mulsi3>
   2b304:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   2b308:	e0bffe0b 	ldhu	r2,-8(fp)
   2b30c:	0140fa04 	movi	r5,1000
   2b310:	1009883a 	mov	r4,r2
   2b314:	002316c0 	call	2316c <__mulsi3>
   2b318:	0140fa04 	movi	r5,1000
   2b31c:	1009883a 	mov	r4,r2
   2b320:	00230b00 	call	230b0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   2b324:	8085883a 	add	r2,r16,r2
   2b328:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   2b32c:	e0bffa17 	ldw	r2,-24(fp)
   2b330:	1004d43a 	srli	r2,r2,16
   2b334:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   2b338:	e0bffa17 	ldw	r2,-24(fp)
   2b33c:	10bfffcc 	andi	r2,r2,65535
   2b340:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   2b344:	e0bffa17 	ldw	r2,-24(fp)
   2b348:	10bfffcc 	andi	r2,r2,65535
   2b34c:	1009883a 	mov	r4,r2
   2b350:	002b1180 	call	2b118 <OSTimeDly>
    while (loops > 0) {
   2b354:	00000706 	br	2b374 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   2b358:	01200014 	movui	r4,32768
   2b35c:	002b1180 	call	2b118 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   2b360:	01200014 	movui	r4,32768
   2b364:	002b1180 	call	2b118 <OSTimeDly>
        loops--;
   2b368:	e0bff90b 	ldhu	r2,-28(fp)
   2b36c:	10bfffc4 	addi	r2,r2,-1
   2b370:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   2b374:	e0bff90b 	ldhu	r2,-28(fp)
   2b378:	103ff71e 	bne	r2,zero,2b358 <__alt_data_end+0xfffebf58>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   2b37c:	0005883a 	mov	r2,zero
}
   2b380:	e6ffff04 	addi	sp,fp,-4
   2b384:	dfc00217 	ldw	ra,8(sp)
   2b388:	df000117 	ldw	fp,4(sp)
   2b38c:	dc000017 	ldw	r16,0(sp)
   2b390:	dec00304 	addi	sp,sp,12
   2b394:	f800283a 	ret

0002b398 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   2b398:	defff504 	addi	sp,sp,-44
   2b39c:	dfc00a15 	stw	ra,40(sp)
   2b3a0:	df000915 	stw	fp,36(sp)
   2b3a4:	df000904 	addi	fp,sp,36
   2b3a8:	2005883a 	mov	r2,r4
   2b3ac:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2b3b0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   2b3b4:	e0bfff03 	ldbu	r2,-4(fp)
   2b3b8:	10800530 	cmpltui	r2,r2,20
   2b3bc:	1000021e 	bne	r2,zero,2b3c8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   2b3c0:	00800a84 	movi	r2,42
   2b3c4:	00006406 	br	2b558 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b3c8:	0005303a 	rdctl	r2,status
   2b3cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b3d0:	e0fffe17 	ldw	r3,-8(fp)
   2b3d4:	00bfff84 	movi	r2,-2
   2b3d8:	1884703a 	and	r2,r3,r2
   2b3dc:	1001703a 	wrctl	status,r2
  
  return context;
   2b3e0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   2b3e4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   2b3e8:	e0ffff03 	ldbu	r3,-4(fp)
   2b3ec:	00800134 	movhi	r2,4
   2b3f0:	10a11c04 	addi	r2,r2,-31632
   2b3f4:	18c7883a 	add	r3,r3,r3
   2b3f8:	18c7883a 	add	r3,r3,r3
   2b3fc:	10c5883a 	add	r2,r2,r3
   2b400:	10800017 	ldw	r2,0(r2)
   2b404:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   2b408:	e0bff917 	ldw	r2,-28(fp)
   2b40c:	1000061e 	bne	r2,zero,2b428 <OSTimeDlyResume+0x90>
   2b410:	e0bff717 	ldw	r2,-36(fp)
   2b414:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b418:	e0bff817 	ldw	r2,-32(fp)
   2b41c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   2b420:	008010c4 	movi	r2,67
   2b424:	00004c06 	br	2b558 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   2b428:	e0bff917 	ldw	r2,-28(fp)
   2b42c:	10800058 	cmpnei	r2,r2,1
   2b430:	1000061e 	bne	r2,zero,2b44c <OSTimeDlyResume+0xb4>
   2b434:	e0bff717 	ldw	r2,-36(fp)
   2b438:	e0bffa15 	stw	r2,-24(fp)
   2b43c:	e0bffa17 	ldw	r2,-24(fp)
   2b440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   2b444:	008010c4 	movi	r2,67
   2b448:	00004306 	br	2b558 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   2b44c:	e0bff917 	ldw	r2,-28(fp)
   2b450:	10800b8b 	ldhu	r2,46(r2)
   2b454:	10bfffcc 	andi	r2,r2,65535
   2b458:	1000061e 	bne	r2,zero,2b474 <OSTimeDlyResume+0xdc>
   2b45c:	e0bff717 	ldw	r2,-36(fp)
   2b460:	e0bffb15 	stw	r2,-20(fp)
   2b464:	e0bffb17 	ldw	r2,-20(fp)
   2b468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   2b46c:	00801404 	movi	r2,80
   2b470:	00003906 	br	2b558 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   2b474:	e0bff917 	ldw	r2,-28(fp)
   2b478:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   2b47c:	e0bff917 	ldw	r2,-28(fp)
   2b480:	10800c03 	ldbu	r2,48(r2)
   2b484:	10803fcc 	andi	r2,r2,255
   2b488:	10800dcc 	andi	r2,r2,55
   2b48c:	10000b26 	beq	r2,zero,2b4bc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   2b490:	e0bff917 	ldw	r2,-28(fp)
   2b494:	10c00c03 	ldbu	r3,48(r2)
   2b498:	00bff204 	movi	r2,-56
   2b49c:	1884703a 	and	r2,r3,r2
   2b4a0:	1007883a 	mov	r3,r2
   2b4a4:	e0bff917 	ldw	r2,-28(fp)
   2b4a8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   2b4ac:	e0bff917 	ldw	r2,-28(fp)
   2b4b0:	00c00044 	movi	r3,1
   2b4b4:	10c00c45 	stb	r3,49(r2)
   2b4b8:	00000206 	br	2b4c4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   2b4bc:	e0bff917 	ldw	r2,-28(fp)
   2b4c0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   2b4c4:	e0bff917 	ldw	r2,-28(fp)
   2b4c8:	10800c03 	ldbu	r2,48(r2)
   2b4cc:	10803fcc 	andi	r2,r2,255
   2b4d0:	1080020c 	andi	r2,r2,8
   2b4d4:	10001b1e 	bne	r2,zero,2b544 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   2b4d8:	e0bff917 	ldw	r2,-28(fp)
   2b4dc:	10c00d83 	ldbu	r3,54(r2)
   2b4e0:	d0a70203 	ldbu	r2,-25592(gp)
   2b4e4:	1884b03a 	or	r2,r3,r2
   2b4e8:	d0a70205 	stb	r2,-25592(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   2b4ec:	e0bff917 	ldw	r2,-28(fp)
   2b4f0:	10800d03 	ldbu	r2,52(r2)
   2b4f4:	10c03fcc 	andi	r3,r2,255
   2b4f8:	e0bff917 	ldw	r2,-28(fp)
   2b4fc:	10800d03 	ldbu	r2,52(r2)
   2b500:	11003fcc 	andi	r4,r2,255
   2b504:	d0a70244 	addi	r2,gp,-25591
   2b508:	2085883a 	add	r2,r4,r2
   2b50c:	11000003 	ldbu	r4,0(r2)
   2b510:	e0bff917 	ldw	r2,-28(fp)
   2b514:	10800d43 	ldbu	r2,53(r2)
   2b518:	2084b03a 	or	r2,r4,r2
   2b51c:	1009883a 	mov	r4,r2
   2b520:	d0a70244 	addi	r2,gp,-25591
   2b524:	1885883a 	add	r2,r3,r2
   2b528:	11000005 	stb	r4,0(r2)
   2b52c:	e0bff717 	ldw	r2,-36(fp)
   2b530:	e0bffc15 	stw	r2,-16(fp)
   2b534:	e0bffc17 	ldw	r2,-16(fp)
   2b538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   2b53c:	00257700 	call	25770 <OS_Sched>
   2b540:	00000406 	br	2b554 <OSTimeDlyResume+0x1bc>
   2b544:	e0bff717 	ldw	r2,-36(fp)
   2b548:	e0bffd15 	stw	r2,-12(fp)
   2b54c:	e0bffd17 	ldw	r2,-12(fp)
   2b550:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   2b554:	0005883a 	mov	r2,zero
}
   2b558:	e037883a 	mov	sp,fp
   2b55c:	dfc00117 	ldw	ra,4(sp)
   2b560:	df000017 	ldw	fp,0(sp)
   2b564:	dec00204 	addi	sp,sp,8
   2b568:	f800283a 	ret

0002b56c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   2b56c:	defffb04 	addi	sp,sp,-20
   2b570:	df000415 	stw	fp,16(sp)
   2b574:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2b578:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b57c:	0005303a 	rdctl	r2,status
   2b580:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b584:	e0fffe17 	ldw	r3,-8(fp)
   2b588:	00bfff84 	movi	r2,-2
   2b58c:	1884703a 	and	r2,r3,r2
   2b590:	1001703a 	wrctl	status,r2
  
  return context;
   2b594:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   2b598:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   2b59c:	d0a70617 	ldw	r2,-25576(gp)
   2b5a0:	e0bffd15 	stw	r2,-12(fp)
   2b5a4:	e0bffc17 	ldw	r2,-16(fp)
   2b5a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b5ac:	e0bfff17 	ldw	r2,-4(fp)
   2b5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   2b5b4:	e0bffd17 	ldw	r2,-12(fp)
}
   2b5b8:	e037883a 	mov	sp,fp
   2b5bc:	df000017 	ldw	fp,0(sp)
   2b5c0:	dec00104 	addi	sp,sp,4
   2b5c4:	f800283a 	ret

0002b5c8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   2b5c8:	defffb04 	addi	sp,sp,-20
   2b5cc:	df000415 	stw	fp,16(sp)
   2b5d0:	df000404 	addi	fp,sp,16
   2b5d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2b5d8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b5dc:	0005303a 	rdctl	r2,status
   2b5e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b5e4:	e0fffd17 	ldw	r3,-12(fp)
   2b5e8:	00bfff84 	movi	r2,-2
   2b5ec:	1884703a 	and	r2,r3,r2
   2b5f0:	1001703a 	wrctl	status,r2
  
  return context;
   2b5f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   2b5f8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   2b5fc:	e0bfff17 	ldw	r2,-4(fp)
   2b600:	d0a70615 	stw	r2,-25576(gp)
   2b604:	e0bffc17 	ldw	r2,-16(fp)
   2b608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b60c:	e0bffe17 	ldw	r2,-8(fp)
   2b610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   2b614:	0001883a 	nop
   2b618:	e037883a 	mov	sp,fp
   2b61c:	df000017 	ldw	fp,0(sp)
   2b620:	dec00104 	addi	sp,sp,4
   2b624:	f800283a 	ret

0002b628 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2b628:	defffd04 	addi	sp,sp,-12
   2b62c:	dfc00215 	stw	ra,8(sp)
   2b630:	df000115 	stw	fp,4(sp)
   2b634:	df000104 	addi	fp,sp,4
   2b638:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2b63c:	d1600604 	addi	r5,gp,-32744
   2b640:	e13fff17 	ldw	r4,-4(fp)
   2b644:	002c69c0 	call	2c69c <alt_dev_llist_insert>
}
   2b648:	e037883a 	mov	sp,fp
   2b64c:	dfc00117 	ldw	ra,4(sp)
   2b650:	df000017 	ldw	fp,0(sp)
   2b654:	dec00204 	addi	sp,sp,8
   2b658:	f800283a 	ret

0002b65c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2b65c:	defffd04 	addi	sp,sp,-12
   2b660:	dfc00215 	stw	ra,8(sp)
   2b664:	df000115 	stw	fp,4(sp)
   2b668:	df000104 	addi	fp,sp,4
   2b66c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_II_PROCESSOR, NIOS_II_Processor);
   2b670:	002d0480 	call	2d048 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2b674:	00800044 	movi	r2,1
   2b678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2b67c:	0001883a 	nop
   2b680:	e037883a 	mov	sp,fp
   2b684:	dfc00117 	ldw	ra,4(sp)
   2b688:	df000017 	ldw	fp,0(sp)
   2b68c:	dec00204 	addi	sp,sp,8
   2b690:	f800283a 	ret

0002b694 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2b694:	defffe04 	addi	sp,sp,-8
   2b698:	dfc00115 	stw	ra,4(sp)
   2b69c:	df000015 	stw	fp,0(sp)
   2b6a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2b6a4:	01c0fa04 	movi	r7,1000
   2b6a8:	018000c4 	movi	r6,3
   2b6ac:	000b883a 	mov	r5,zero
   2b6b0:	01000134 	movhi	r4,4
   2b6b4:	21040004 	addi	r4,r4,4096
   2b6b8:	002c4980 	call	2c498 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   2b6bc:	000d883a 	mov	r6,zero
   2b6c0:	000b883a 	mov	r5,zero
   2b6c4:	010000f4 	movhi	r4,3
   2b6c8:	21397f04 	addi	r4,r4,-6660
   2b6cc:	002b8580 	call	2b858 <altera_avalon_jtag_uart_init>
   2b6d0:	010000f4 	movhi	r4,3
   2b6d4:	21397504 	addi	r4,r4,-6700
   2b6d8:	002b6280 	call	2b628 <alt_dev_reg>
}
   2b6dc:	0001883a 	nop
   2b6e0:	e037883a 	mov	sp,fp
   2b6e4:	dfc00117 	ldw	ra,4(sp)
   2b6e8:	df000017 	ldw	fp,0(sp)
   2b6ec:	dec00204 	addi	sp,sp,8
   2b6f0:	f800283a 	ret

0002b6f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2b6f4:	defffa04 	addi	sp,sp,-24
   2b6f8:	dfc00515 	stw	ra,20(sp)
   2b6fc:	df000415 	stw	fp,16(sp)
   2b700:	df000404 	addi	fp,sp,16
   2b704:	e13ffd15 	stw	r4,-12(fp)
   2b708:	e17ffe15 	stw	r5,-8(fp)
   2b70c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b710:	e0bffd17 	ldw	r2,-12(fp)
   2b714:	10800017 	ldw	r2,0(r2)
   2b718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2b71c:	e0bffc17 	ldw	r2,-16(fp)
   2b720:	10c00a04 	addi	r3,r2,40
   2b724:	e0bffd17 	ldw	r2,-12(fp)
   2b728:	10800217 	ldw	r2,8(r2)
   2b72c:	100f883a 	mov	r7,r2
   2b730:	e1bfff17 	ldw	r6,-4(fp)
   2b734:	e17ffe17 	ldw	r5,-8(fp)
   2b738:	1809883a 	mov	r4,r3
   2b73c:	002bea00 	call	2bea0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2b740:	e037883a 	mov	sp,fp
   2b744:	dfc00117 	ldw	ra,4(sp)
   2b748:	df000017 	ldw	fp,0(sp)
   2b74c:	dec00204 	addi	sp,sp,8
   2b750:	f800283a 	ret

0002b754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2b754:	defffa04 	addi	sp,sp,-24
   2b758:	dfc00515 	stw	ra,20(sp)
   2b75c:	df000415 	stw	fp,16(sp)
   2b760:	df000404 	addi	fp,sp,16
   2b764:	e13ffd15 	stw	r4,-12(fp)
   2b768:	e17ffe15 	stw	r5,-8(fp)
   2b76c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b770:	e0bffd17 	ldw	r2,-12(fp)
   2b774:	10800017 	ldw	r2,0(r2)
   2b778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2b77c:	e0bffc17 	ldw	r2,-16(fp)
   2b780:	10c00a04 	addi	r3,r2,40
   2b784:	e0bffd17 	ldw	r2,-12(fp)
   2b788:	10800217 	ldw	r2,8(r2)
   2b78c:	100f883a 	mov	r7,r2
   2b790:	e1bfff17 	ldw	r6,-4(fp)
   2b794:	e17ffe17 	ldw	r5,-8(fp)
   2b798:	1809883a 	mov	r4,r3
   2b79c:	002c15c0 	call	2c15c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2b7a0:	e037883a 	mov	sp,fp
   2b7a4:	dfc00117 	ldw	ra,4(sp)
   2b7a8:	df000017 	ldw	fp,0(sp)
   2b7ac:	dec00204 	addi	sp,sp,8
   2b7b0:	f800283a 	ret

0002b7b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2b7b4:	defffc04 	addi	sp,sp,-16
   2b7b8:	dfc00315 	stw	ra,12(sp)
   2b7bc:	df000215 	stw	fp,8(sp)
   2b7c0:	df000204 	addi	fp,sp,8
   2b7c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b7c8:	e0bfff17 	ldw	r2,-4(fp)
   2b7cc:	10800017 	ldw	r2,0(r2)
   2b7d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2b7d4:	e0bffe17 	ldw	r2,-8(fp)
   2b7d8:	10c00a04 	addi	r3,r2,40
   2b7dc:	e0bfff17 	ldw	r2,-4(fp)
   2b7e0:	10800217 	ldw	r2,8(r2)
   2b7e4:	100b883a 	mov	r5,r2
   2b7e8:	1809883a 	mov	r4,r3
   2b7ec:	002bd480 	call	2bd48 <altera_avalon_jtag_uart_close>
}
   2b7f0:	e037883a 	mov	sp,fp
   2b7f4:	dfc00117 	ldw	ra,4(sp)
   2b7f8:	df000017 	ldw	fp,0(sp)
   2b7fc:	dec00204 	addi	sp,sp,8
   2b800:	f800283a 	ret

0002b804 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2b804:	defffa04 	addi	sp,sp,-24
   2b808:	dfc00515 	stw	ra,20(sp)
   2b80c:	df000415 	stw	fp,16(sp)
   2b810:	df000404 	addi	fp,sp,16
   2b814:	e13ffd15 	stw	r4,-12(fp)
   2b818:	e17ffe15 	stw	r5,-8(fp)
   2b81c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2b820:	e0bffd17 	ldw	r2,-12(fp)
   2b824:	10800017 	ldw	r2,0(r2)
   2b828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2b82c:	e0bffc17 	ldw	r2,-16(fp)
   2b830:	10800a04 	addi	r2,r2,40
   2b834:	e1bfff17 	ldw	r6,-4(fp)
   2b838:	e17ffe17 	ldw	r5,-8(fp)
   2b83c:	1009883a 	mov	r4,r2
   2b840:	002bdb00 	call	2bdb0 <altera_avalon_jtag_uart_ioctl>
}
   2b844:	e037883a 	mov	sp,fp
   2b848:	dfc00117 	ldw	ra,4(sp)
   2b84c:	df000017 	ldw	fp,0(sp)
   2b850:	dec00204 	addi	sp,sp,8
   2b854:	f800283a 	ret

0002b858 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2b858:	defff104 	addi	sp,sp,-60
   2b85c:	dfc00e15 	stw	ra,56(sp)
   2b860:	df000d15 	stw	fp,52(sp)
   2b864:	df000d04 	addi	fp,sp,52
   2b868:	e13ff915 	stw	r4,-28(fp)
   2b86c:	e17ffa15 	stw	r5,-24(fp)
   2b870:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   2b874:	e0bff917 	ldw	r2,-28(fp)
   2b878:	10800c04 	addi	r2,r2,48
   2b87c:	e0bff415 	stw	r2,-48(fp)
   2b880:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   2b884:	e0bff80b 	ldhu	r2,-32(fp)
   2b888:	e0fff884 	addi	r3,fp,-30
   2b88c:	180b883a 	mov	r5,r3
   2b890:	1009883a 	mov	r4,r2
   2b894:	00262dc0 	call	262dc <OSFlagCreate>
   2b898:	1007883a 	mov	r3,r2
   2b89c:	e0bff417 	ldw	r2,-48(fp)
   2b8a0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   2b8a4:	e0bff917 	ldw	r2,-28(fp)
   2b8a8:	10800a04 	addi	r2,r2,40
   2b8ac:	e0bff515 	stw	r2,-44(fp)
   2b8b0:	00800044 	movi	r2,1
   2b8b4:	e0bff78d 	sth	r2,-34(fp)
   2b8b8:	e0bff78b 	ldhu	r2,-34(fp)
   2b8bc:	1009883a 	mov	r4,r2
   2b8c0:	0028ffc0 	call	28ffc <OSSemCreate>
   2b8c4:	1007883a 	mov	r3,r2
   2b8c8:	e0bff517 	ldw	r2,-44(fp)
   2b8cc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   2b8d0:	e0bff917 	ldw	r2,-28(fp)
   2b8d4:	10800b04 	addi	r2,r2,44
   2b8d8:	e0bff615 	stw	r2,-40(fp)
   2b8dc:	00800044 	movi	r2,1
   2b8e0:	e0bff70d 	sth	r2,-36(fp)
   2b8e4:	e0bff70b 	ldhu	r2,-36(fp)
   2b8e8:	1009883a 	mov	r4,r2
   2b8ec:	0028ffc0 	call	28ffc <OSSemCreate>
   2b8f0:	1007883a 	mov	r3,r2
   2b8f4:	e0bff617 	ldw	r2,-40(fp)
   2b8f8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b8fc:	e0bff917 	ldw	r2,-28(fp)
   2b900:	00c00044 	movi	r3,1
   2b904:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2b908:	e0bff917 	ldw	r2,-28(fp)
   2b90c:	10800017 	ldw	r2,0(r2)
   2b910:	10800104 	addi	r2,r2,4
   2b914:	1007883a 	mov	r3,r2
   2b918:	e0bff917 	ldw	r2,-28(fp)
   2b91c:	10800817 	ldw	r2,32(r2)
   2b920:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2b924:	e0bffa17 	ldw	r2,-24(fp)
   2b928:	e0fffb17 	ldw	r3,-20(fp)
   2b92c:	d8000015 	stw	zero,0(sp)
   2b930:	e1fff917 	ldw	r7,-28(fp)
   2b934:	018000f4 	movhi	r6,3
   2b938:	31ae6804 	addi	r6,r6,-18016
   2b93c:	180b883a 	mov	r5,r3
   2b940:	1009883a 	mov	r4,r2
   2b944:	002c8200 	call	2c820 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2b948:	e0bff917 	ldw	r2,-28(fp)
   2b94c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2b950:	e0bff917 	ldw	r2,-28(fp)
   2b954:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b958:	d0e70b17 	ldw	r3,-25556(gp)
   2b95c:	e1fff917 	ldw	r7,-28(fp)
   2b960:	018000f4 	movhi	r6,3
   2b964:	31af1104 	addi	r6,r6,-17340
   2b968:	180b883a 	mov	r5,r3
   2b96c:	1009883a 	mov	r4,r2
   2b970:	002c5140 	call	2c514 <alt_alarm_start>
   2b974:	1000040e 	bge	r2,zero,2b988 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2b978:	e0fff917 	ldw	r3,-28(fp)
   2b97c:	00a00034 	movhi	r2,32768
   2b980:	10bfffc4 	addi	r2,r2,-1
   2b984:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2b988:	0001883a 	nop
   2b98c:	e037883a 	mov	sp,fp
   2b990:	dfc00117 	ldw	ra,4(sp)
   2b994:	df000017 	ldw	fp,0(sp)
   2b998:	dec00204 	addi	sp,sp,8
   2b99c:	f800283a 	ret

0002b9a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2b9a0:	defff204 	addi	sp,sp,-56
   2b9a4:	dfc00d15 	stw	ra,52(sp)
   2b9a8:	df000c15 	stw	fp,48(sp)
   2b9ac:	df000c04 	addi	fp,sp,48
   2b9b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2b9b4:	e0bfff17 	ldw	r2,-4(fp)
   2b9b8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   2b9bc:	e0bff617 	ldw	r2,-40(fp)
   2b9c0:	10800017 	ldw	r2,0(r2)
   2b9c4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b9c8:	e0bff717 	ldw	r2,-36(fp)
   2b9cc:	10800104 	addi	r2,r2,4
   2b9d0:	10800037 	ldwio	r2,0(r2)
   2b9d4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2b9d8:	e0bff817 	ldw	r2,-32(fp)
   2b9dc:	1080c00c 	andi	r2,r2,768
   2b9e0:	10009126 	beq	r2,zero,2bc28 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2b9e4:	e0bff817 	ldw	r2,-32(fp)
   2b9e8:	1080400c 	andi	r2,r2,256
   2b9ec:	10004726 	beq	r2,zero,2bb0c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2b9f0:	00800074 	movhi	r2,1
   2b9f4:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b9f8:	e0bff617 	ldw	r2,-40(fp)
   2b9fc:	10800d17 	ldw	r2,52(r2)
   2ba00:	10800044 	addi	r2,r2,1
   2ba04:	1081ffcc 	andi	r2,r2,2047
   2ba08:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   2ba0c:	e0bff617 	ldw	r2,-40(fp)
   2ba10:	10c00e17 	ldw	r3,56(r2)
   2ba14:	e0bff917 	ldw	r2,-28(fp)
   2ba18:	18802726 	beq	r3,r2,2bab8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2ba1c:	e0bff717 	ldw	r2,-36(fp)
   2ba20:	10800037 	ldwio	r2,0(r2)
   2ba24:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2ba28:	e0bff417 	ldw	r2,-48(fp)
   2ba2c:	10a0000c 	andi	r2,r2,32768
   2ba30:	10002326 	beq	r2,zero,2bac0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2ba34:	e0bff617 	ldw	r2,-40(fp)
   2ba38:	10800d17 	ldw	r2,52(r2)
   2ba3c:	e0fff417 	ldw	r3,-48(fp)
   2ba40:	1809883a 	mov	r4,r3
   2ba44:	e0fff617 	ldw	r3,-40(fp)
   2ba48:	1885883a 	add	r2,r3,r2
   2ba4c:	10801104 	addi	r2,r2,68
   2ba50:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ba54:	e0bff617 	ldw	r2,-40(fp)
   2ba58:	10800d17 	ldw	r2,52(r2)
   2ba5c:	10800044 	addi	r2,r2,1
   2ba60:	10c1ffcc 	andi	r3,r2,2047
   2ba64:	e0bff617 	ldw	r2,-40(fp)
   2ba68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   2ba6c:	e0bff617 	ldw	r2,-40(fp)
   2ba70:	10800c17 	ldw	r2,48(r2)
   2ba74:	e0bffb15 	stw	r2,-20(fp)
   2ba78:	00800044 	movi	r2,1
   2ba7c:	e0bffc0d 	sth	r2,-16(fp)
   2ba80:	00800044 	movi	r2,1
   2ba84:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   2ba88:	d0a6f643 	ldbu	r2,-25639(gp)
   2ba8c:	10803fcc 	andi	r2,r2,255
   2ba90:	103fd926 	beq	r2,zero,2b9f8 <__alt_data_end+0xfffec5f8>
  {
    OSFlagPost (group, flags, opt, &err);
   2ba94:	e0bffc0b 	ldhu	r2,-16(fp)
   2ba98:	e0fffc83 	ldbu	r3,-14(fp)
   2ba9c:	e13ffdc4 	addi	r4,fp,-9
   2baa0:	200f883a 	mov	r7,r4
   2baa4:	180d883a 	mov	r6,r3
   2baa8:	100b883a 	mov	r5,r2
   2baac:	e13ffb17 	ldw	r4,-20(fp)
   2bab0:	0026eb80 	call	26eb8 <OSFlagPost>
      }
   2bab4:	003fd006 	br	2b9f8 <__alt_data_end+0xfffec5f8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2bab8:	0001883a 	nop
   2babc:	00000106 	br	2bac4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2bac0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2bac4:	e0bff417 	ldw	r2,-48(fp)
   2bac8:	10bfffec 	andhi	r2,r2,65535
   2bacc:	10000f26 	beq	r2,zero,2bb0c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2bad0:	e0bff617 	ldw	r2,-40(fp)
   2bad4:	10c00817 	ldw	r3,32(r2)
   2bad8:	00bfff84 	movi	r2,-2
   2badc:	1886703a 	and	r3,r3,r2
   2bae0:	e0bff617 	ldw	r2,-40(fp)
   2bae4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2bae8:	e0bff717 	ldw	r2,-36(fp)
   2baec:	10800104 	addi	r2,r2,4
   2baf0:	1007883a 	mov	r3,r2
   2baf4:	e0bff617 	ldw	r2,-40(fp)
   2baf8:	10800817 	ldw	r2,32(r2)
   2bafc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2bb00:	e0bff717 	ldw	r2,-36(fp)
   2bb04:	10800104 	addi	r2,r2,4
   2bb08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2bb0c:	e0bff817 	ldw	r2,-32(fp)
   2bb10:	1080800c 	andi	r2,r2,512
   2bb14:	103fac26 	beq	r2,zero,2b9c8 <__alt_data_end+0xfffec5c8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2bb18:	e0bff817 	ldw	r2,-32(fp)
   2bb1c:	1004d43a 	srli	r2,r2,16
   2bb20:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2bb24:	00002606 	br	2bbc0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2bb28:	e0bff717 	ldw	r2,-36(fp)
   2bb2c:	e0fff617 	ldw	r3,-40(fp)
   2bb30:	18c01017 	ldw	r3,64(r3)
   2bb34:	e13ff617 	ldw	r4,-40(fp)
   2bb38:	20c7883a 	add	r3,r4,r3
   2bb3c:	18c21104 	addi	r3,r3,2116
   2bb40:	18c00003 	ldbu	r3,0(r3)
   2bb44:	18c03fcc 	andi	r3,r3,255
   2bb48:	18c0201c 	xori	r3,r3,128
   2bb4c:	18ffe004 	addi	r3,r3,-128
   2bb50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2bb54:	e0bff617 	ldw	r2,-40(fp)
   2bb58:	10801017 	ldw	r2,64(r2)
   2bb5c:	10800044 	addi	r2,r2,1
   2bb60:	10c1ffcc 	andi	r3,r2,2047
   2bb64:	e0bff617 	ldw	r2,-40(fp)
   2bb68:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   2bb6c:	e0bff617 	ldw	r2,-40(fp)
   2bb70:	10800c17 	ldw	r2,48(r2)
   2bb74:	e0bffa15 	stw	r2,-24(fp)
   2bb78:	00800084 	movi	r2,2
   2bb7c:	e0bffd0d 	sth	r2,-12(fp)
   2bb80:	00800044 	movi	r2,1
   2bb84:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   2bb88:	d0a6f643 	ldbu	r2,-25639(gp)
   2bb8c:	10803fcc 	andi	r2,r2,255
   2bb90:	10000826 	beq	r2,zero,2bbb4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   2bb94:	e0bffd0b 	ldhu	r2,-12(fp)
   2bb98:	e0fffd83 	ldbu	r3,-10(fp)
   2bb9c:	e13ffe04 	addi	r4,fp,-8
   2bba0:	200f883a 	mov	r7,r4
   2bba4:	180d883a 	mov	r6,r3
   2bba8:	100b883a 	mov	r5,r2
   2bbac:	e13ffa17 	ldw	r4,-24(fp)
   2bbb0:	0026eb80 	call	26eb8 <OSFlagPost>

        space--;
   2bbb4:	e0bff517 	ldw	r2,-44(fp)
   2bbb8:	10bfffc4 	addi	r2,r2,-1
   2bbbc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2bbc0:	e0bff517 	ldw	r2,-44(fp)
   2bbc4:	10000526 	beq	r2,zero,2bbdc <altera_avalon_jtag_uart_irq+0x23c>
   2bbc8:	e0bff617 	ldw	r2,-40(fp)
   2bbcc:	10c01017 	ldw	r3,64(r2)
   2bbd0:	e0bff617 	ldw	r2,-40(fp)
   2bbd4:	10800f17 	ldw	r2,60(r2)
   2bbd8:	18bfd31e 	bne	r3,r2,2bb28 <__alt_data_end+0xfffec728>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2bbdc:	e0bff517 	ldw	r2,-44(fp)
   2bbe0:	103f7926 	beq	r2,zero,2b9c8 <__alt_data_end+0xfffec5c8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2bbe4:	e0bff617 	ldw	r2,-40(fp)
   2bbe8:	10c00817 	ldw	r3,32(r2)
   2bbec:	00bfff44 	movi	r2,-3
   2bbf0:	1886703a 	and	r3,r3,r2
   2bbf4:	e0bff617 	ldw	r2,-40(fp)
   2bbf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2bbfc:	e0bff617 	ldw	r2,-40(fp)
   2bc00:	10800017 	ldw	r2,0(r2)
   2bc04:	10800104 	addi	r2,r2,4
   2bc08:	1007883a 	mov	r3,r2
   2bc0c:	e0bff617 	ldw	r2,-40(fp)
   2bc10:	10800817 	ldw	r2,32(r2)
   2bc14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2bc18:	e0bff717 	ldw	r2,-36(fp)
   2bc1c:	10800104 	addi	r2,r2,4
   2bc20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2bc24:	003f6806 	br	2b9c8 <__alt_data_end+0xfffec5c8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2bc28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2bc2c:	0001883a 	nop
   2bc30:	e037883a 	mov	sp,fp
   2bc34:	dfc00117 	ldw	ra,4(sp)
   2bc38:	df000017 	ldw	fp,0(sp)
   2bc3c:	dec00204 	addi	sp,sp,8
   2bc40:	f800283a 	ret

0002bc44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2bc44:	defff904 	addi	sp,sp,-28
   2bc48:	dfc00615 	stw	ra,24(sp)
   2bc4c:	df000515 	stw	fp,20(sp)
   2bc50:	df000504 	addi	fp,sp,20
   2bc54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2bc58:	e0bfff17 	ldw	r2,-4(fp)
   2bc5c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2bc60:	e0bffb17 	ldw	r2,-20(fp)
   2bc64:	10800017 	ldw	r2,0(r2)
   2bc68:	10800104 	addi	r2,r2,4
   2bc6c:	10800037 	ldwio	r2,0(r2)
   2bc70:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2bc74:	e0bffc17 	ldw	r2,-16(fp)
   2bc78:	1081000c 	andi	r2,r2,1024
   2bc7c:	10000b26 	beq	r2,zero,2bcac <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2bc80:	e0bffb17 	ldw	r2,-20(fp)
   2bc84:	10800017 	ldw	r2,0(r2)
   2bc88:	10800104 	addi	r2,r2,4
   2bc8c:	1007883a 	mov	r3,r2
   2bc90:	e0bffb17 	ldw	r2,-20(fp)
   2bc94:	10800817 	ldw	r2,32(r2)
   2bc98:	10810014 	ori	r2,r2,1024
   2bc9c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2bca0:	e0bffb17 	ldw	r2,-20(fp)
   2bca4:	10000915 	stw	zero,36(r2)
   2bca8:	00002106 	br	2bd30 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2bcac:	e0bffb17 	ldw	r2,-20(fp)
   2bcb0:	10c00917 	ldw	r3,36(r2)
   2bcb4:	00a00034 	movhi	r2,32768
   2bcb8:	10bfff04 	addi	r2,r2,-4
   2bcbc:	10c01c36 	bltu	r2,r3,2bd30 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   2bcc0:	e0bffb17 	ldw	r2,-20(fp)
   2bcc4:	10800917 	ldw	r2,36(r2)
   2bcc8:	10c00044 	addi	r3,r2,1
   2bccc:	e0bffb17 	ldw	r2,-20(fp)
   2bcd0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   2bcd4:	e0bffb17 	ldw	r2,-20(fp)
   2bcd8:	10c00917 	ldw	r3,36(r2)
   2bcdc:	e0bffb17 	ldw	r2,-20(fp)
   2bce0:	10800117 	ldw	r2,4(r2)
   2bce4:	18801236 	bltu	r3,r2,2bd30 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   2bce8:	e0bffb17 	ldw	r2,-20(fp)
   2bcec:	10800c17 	ldw	r2,48(r2)
   2bcf0:	e0bffd15 	stw	r2,-12(fp)
   2bcf4:	00800104 	movi	r2,4
   2bcf8:	e0bffe0d 	sth	r2,-8(fp)
   2bcfc:	00800044 	movi	r2,1
   2bd00:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   2bd04:	d0a6f643 	ldbu	r2,-25639(gp)
   2bd08:	10803fcc 	andi	r2,r2,255
   2bd0c:	10000826 	beq	r2,zero,2bd30 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   2bd10:	e0bffe0b 	ldhu	r2,-8(fp)
   2bd14:	e0fffe83 	ldbu	r3,-6(fp)
   2bd18:	e13ffec4 	addi	r4,fp,-5
   2bd1c:	200f883a 	mov	r7,r4
   2bd20:	180d883a 	mov	r6,r3
   2bd24:	100b883a 	mov	r5,r2
   2bd28:	e13ffd17 	ldw	r4,-12(fp)
   2bd2c:	0026eb80 	call	26eb8 <OSFlagPost>
   2bd30:	d0a70b17 	ldw	r2,-25556(gp)
    }
  }

  return alt_ticks_per_second();
}
   2bd34:	e037883a 	mov	sp,fp
   2bd38:	dfc00117 	ldw	ra,4(sp)
   2bd3c:	df000017 	ldw	fp,0(sp)
   2bd40:	dec00204 	addi	sp,sp,8
   2bd44:	f800283a 	ret

0002bd48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2bd48:	defffd04 	addi	sp,sp,-12
   2bd4c:	df000215 	stw	fp,8(sp)
   2bd50:	df000204 	addi	fp,sp,8
   2bd54:	e13ffe15 	stw	r4,-8(fp)
   2bd58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2bd5c:	00000506 	br	2bd74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2bd60:	e0bfff17 	ldw	r2,-4(fp)
   2bd64:	1090000c 	andi	r2,r2,16384
   2bd68:	10000226 	beq	r2,zero,2bd74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2bd6c:	00bffd44 	movi	r2,-11
   2bd70:	00000b06 	br	2bda0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2bd74:	e0bffe17 	ldw	r2,-8(fp)
   2bd78:	10c01017 	ldw	r3,64(r2)
   2bd7c:	e0bffe17 	ldw	r2,-8(fp)
   2bd80:	10800f17 	ldw	r2,60(r2)
   2bd84:	18800526 	beq	r3,r2,2bd9c <altera_avalon_jtag_uart_close+0x54>
   2bd88:	e0bffe17 	ldw	r2,-8(fp)
   2bd8c:	10c00917 	ldw	r3,36(r2)
   2bd90:	e0bffe17 	ldw	r2,-8(fp)
   2bd94:	10800117 	ldw	r2,4(r2)
   2bd98:	18bff136 	bltu	r3,r2,2bd60 <__alt_data_end+0xfffec960>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2bd9c:	0005883a 	mov	r2,zero
}
   2bda0:	e037883a 	mov	sp,fp
   2bda4:	df000017 	ldw	fp,0(sp)
   2bda8:	dec00104 	addi	sp,sp,4
   2bdac:	f800283a 	ret

0002bdb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2bdb0:	defffa04 	addi	sp,sp,-24
   2bdb4:	df000515 	stw	fp,20(sp)
   2bdb8:	df000504 	addi	fp,sp,20
   2bdbc:	e13ffd15 	stw	r4,-12(fp)
   2bdc0:	e17ffe15 	stw	r5,-8(fp)
   2bdc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2bdc8:	00bff9c4 	movi	r2,-25
   2bdcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2bdd0:	e0bffe17 	ldw	r2,-8(fp)
   2bdd4:	10da8060 	cmpeqi	r3,r2,27137
   2bdd8:	1800031e 	bne	r3,zero,2bde8 <altera_avalon_jtag_uart_ioctl+0x38>
   2bddc:	109a80a0 	cmpeqi	r2,r2,27138
   2bde0:	1000181e 	bne	r2,zero,2be44 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2bde4:	00002906 	br	2be8c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2bde8:	e0bffd17 	ldw	r2,-12(fp)
   2bdec:	10c00117 	ldw	r3,4(r2)
   2bdf0:	00a00034 	movhi	r2,32768
   2bdf4:	10bfffc4 	addi	r2,r2,-1
   2bdf8:	18802126 	beq	r3,r2,2be80 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2bdfc:	e0bfff17 	ldw	r2,-4(fp)
   2be00:	10800017 	ldw	r2,0(r2)
   2be04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2be08:	e0bffc17 	ldw	r2,-16(fp)
   2be0c:	10800090 	cmplti	r2,r2,2
   2be10:	1000061e 	bne	r2,zero,2be2c <altera_avalon_jtag_uart_ioctl+0x7c>
   2be14:	e0fffc17 	ldw	r3,-16(fp)
   2be18:	00a00034 	movhi	r2,32768
   2be1c:	10bfffc4 	addi	r2,r2,-1
   2be20:	18800226 	beq	r3,r2,2be2c <altera_avalon_jtag_uart_ioctl+0x7c>
   2be24:	e0bffc17 	ldw	r2,-16(fp)
   2be28:	00000206 	br	2be34 <altera_avalon_jtag_uart_ioctl+0x84>
   2be2c:	00a00034 	movhi	r2,32768
   2be30:	10bfff84 	addi	r2,r2,-2
   2be34:	e0fffd17 	ldw	r3,-12(fp)
   2be38:	18800115 	stw	r2,4(r3)
      rc = 0;
   2be3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2be40:	00000f06 	br	2be80 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2be44:	e0bffd17 	ldw	r2,-12(fp)
   2be48:	10c00117 	ldw	r3,4(r2)
   2be4c:	00a00034 	movhi	r2,32768
   2be50:	10bfffc4 	addi	r2,r2,-1
   2be54:	18800c26 	beq	r3,r2,2be88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2be58:	e0bffd17 	ldw	r2,-12(fp)
   2be5c:	10c00917 	ldw	r3,36(r2)
   2be60:	e0bffd17 	ldw	r2,-12(fp)
   2be64:	10800117 	ldw	r2,4(r2)
   2be68:	1885803a 	cmpltu	r2,r3,r2
   2be6c:	10c03fcc 	andi	r3,r2,255
   2be70:	e0bfff17 	ldw	r2,-4(fp)
   2be74:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2be78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2be7c:	00000206 	br	2be88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2be80:	0001883a 	nop
   2be84:	00000106 	br	2be8c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2be88:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2be8c:	e0bffb17 	ldw	r2,-20(fp)
}
   2be90:	e037883a 	mov	sp,fp
   2be94:	df000017 	ldw	fp,0(sp)
   2be98:	dec00104 	addi	sp,sp,4
   2be9c:	f800283a 	ret

0002bea0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2bea0:	deffed04 	addi	sp,sp,-76
   2bea4:	dfc01215 	stw	ra,72(sp)
   2bea8:	df001115 	stw	fp,68(sp)
   2beac:	df001104 	addi	fp,sp,68
   2beb0:	e13ffc15 	stw	r4,-16(fp)
   2beb4:	e17ffd15 	stw	r5,-12(fp)
   2beb8:	e1bffe15 	stw	r6,-8(fp)
   2bebc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2bec0:	e0bffd17 	ldw	r2,-12(fp)
   2bec4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   2bec8:	e0bffc17 	ldw	r2,-16(fp)
   2becc:	10800a17 	ldw	r2,40(r2)
   2bed0:	e0bff815 	stw	r2,-32(fp)
   2bed4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   2bed8:	e0bff90b 	ldhu	r2,-28(fp)
   2bedc:	e0fffb04 	addi	r3,fp,-20
   2bee0:	180d883a 	mov	r6,r3
   2bee4:	100b883a 	mov	r5,r2
   2bee8:	e13ff817 	ldw	r4,-32(fp)
   2beec:	00293140 	call	29314 <OSSemPend>

  while (space > 0)
   2bef0:	00006106 	br	2c078 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2bef4:	e0bffc17 	ldw	r2,-16(fp)
   2bef8:	10800d17 	ldw	r2,52(r2)
   2befc:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   2bf00:	e0bffc17 	ldw	r2,-16(fp)
   2bf04:	10800e17 	ldw	r2,56(r2)
   2bf08:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   2bf0c:	e0fff317 	ldw	r3,-52(fp)
   2bf10:	e0bff417 	ldw	r2,-48(fp)
   2bf14:	18800536 	bltu	r3,r2,2bf2c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   2bf18:	e0fff317 	ldw	r3,-52(fp)
   2bf1c:	e0bff417 	ldw	r2,-48(fp)
   2bf20:	1885c83a 	sub	r2,r3,r2
   2bf24:	e0bff115 	stw	r2,-60(fp)
   2bf28:	00000406 	br	2bf3c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2bf2c:	00c20004 	movi	r3,2048
   2bf30:	e0bff417 	ldw	r2,-48(fp)
   2bf34:	1885c83a 	sub	r2,r3,r2
   2bf38:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   2bf3c:	e0bff117 	ldw	r2,-60(fp)
   2bf40:	10001e26 	beq	r2,zero,2bfbc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   2bf44:	e0fffe17 	ldw	r3,-8(fp)
   2bf48:	e0bff117 	ldw	r2,-60(fp)
   2bf4c:	1880022e 	bgeu	r3,r2,2bf58 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   2bf50:	e0bffe17 	ldw	r2,-8(fp)
   2bf54:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2bf58:	e0bffc17 	ldw	r2,-16(fp)
   2bf5c:	10c01104 	addi	r3,r2,68
   2bf60:	e0bff417 	ldw	r2,-48(fp)
   2bf64:	1885883a 	add	r2,r3,r2
   2bf68:	e1bff117 	ldw	r6,-60(fp)
   2bf6c:	100b883a 	mov	r5,r2
   2bf70:	e13ff017 	ldw	r4,-64(fp)
   2bf74:	00217e40 	call	217e4 <memcpy>
      ptr   += n;
   2bf78:	e0fff017 	ldw	r3,-64(fp)
   2bf7c:	e0bff117 	ldw	r2,-60(fp)
   2bf80:	1885883a 	add	r2,r3,r2
   2bf84:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   2bf88:	e0fffe17 	ldw	r3,-8(fp)
   2bf8c:	e0bff117 	ldw	r2,-60(fp)
   2bf90:	1885c83a 	sub	r2,r3,r2
   2bf94:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2bf98:	e0fff417 	ldw	r3,-48(fp)
   2bf9c:	e0bff117 	ldw	r2,-60(fp)
   2bfa0:	1885883a 	add	r2,r3,r2
   2bfa4:	10c1ffcc 	andi	r3,r2,2047
   2bfa8:	e0bffc17 	ldw	r2,-16(fp)
   2bfac:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   2bfb0:	e0bffe17 	ldw	r2,-8(fp)
   2bfb4:	00bfcf16 	blt	zero,r2,2bef4 <__alt_data_end+0xfffecaf4>
   2bfb8:	00000106 	br	2bfc0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2bfbc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2bfc0:	e0fff017 	ldw	r3,-64(fp)
   2bfc4:	e0bffd17 	ldw	r2,-12(fp)
   2bfc8:	18802e1e 	bne	r3,r2,2c084 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2bfcc:	e0bfff17 	ldw	r2,-4(fp)
   2bfd0:	1090000c 	andi	r2,r2,16384
   2bfd4:	10002d1e 	bne	r2,zero,2c08c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   2bfd8:	d0a6f643 	ldbu	r2,-25639(gp)
   2bfdc:	10803fcc 	andi	r2,r2,255
   2bfe0:	10800058 	cmpnei	r2,r2,1
   2bfe4:	1000161e 	bne	r2,zero,2c040 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   2bfe8:	e0bffc17 	ldw	r2,-16(fp)
   2bfec:	10800c17 	ldw	r2,48(r2)
   2bff0:	e0bff215 	stw	r2,-56(fp)
   2bff4:	00800144 	movi	r2,5
   2bff8:	e0bff98d 	sth	r2,-26(fp)
   2bffc:	00bfe0c4 	movi	r2,-125
   2c000:	e0bffa05 	stb	r2,-24(fp)
   2c004:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   2c008:	d0a6f643 	ldbu	r2,-25639(gp)
   2c00c:	10803fcc 	andi	r2,r2,255
   2c010:	10001526 	beq	r2,zero,2c068 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   2c014:	e0fff98b 	ldhu	r3,-26(fp)
   2c018:	e13ffa03 	ldbu	r4,-24(fp)
   2c01c:	e17ffa8b 	ldhu	r5,-22(fp)
   2c020:	e0bffb44 	addi	r2,fp,-19
   2c024:	d8800015 	stw	r2,0(sp)
   2c028:	280f883a 	mov	r7,r5
   2c02c:	200d883a 	mov	r6,r4
   2c030:	180b883a 	mov	r5,r3
   2c034:	e13ff217 	ldw	r4,-56(fp)
   2c038:	00268a00 	call	268a0 <OSFlagPend>
   2c03c:	00000a06 	br	2c068 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2c040:	0001883a 	nop
   2c044:	e0bffc17 	ldw	r2,-16(fp)
   2c048:	10c00d17 	ldw	r3,52(r2)
   2c04c:	e0bff317 	ldw	r2,-52(fp)
   2c050:	1880051e 	bne	r3,r2,2c068 <altera_avalon_jtag_uart_read+0x1c8>
   2c054:	e0bffc17 	ldw	r2,-16(fp)
   2c058:	10c00917 	ldw	r3,36(r2)
   2c05c:	e0bffc17 	ldw	r2,-16(fp)
   2c060:	10800117 	ldw	r2,4(r2)
   2c064:	18bff736 	bltu	r3,r2,2c044 <__alt_data_end+0xfffecc44>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2c068:	e0bffc17 	ldw	r2,-16(fp)
   2c06c:	10c00d17 	ldw	r3,52(r2)
   2c070:	e0bff317 	ldw	r2,-52(fp)
   2c074:	18800726 	beq	r3,r2,2c094 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2c078:	e0bffe17 	ldw	r2,-8(fp)
   2c07c:	00bf9d16 	blt	zero,r2,2bef4 <__alt_data_end+0xfffecaf4>
   2c080:	00000506 	br	2c098 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2c084:	0001883a 	nop
   2c088:	00000306 	br	2c098 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2c08c:	0001883a 	nop
   2c090:	00000106 	br	2c098 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2c094:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   2c098:	e0bffc17 	ldw	r2,-16(fp)
   2c09c:	10800a17 	ldw	r2,40(r2)
   2c0a0:	1009883a 	mov	r4,r2
   2c0a4:	002968c0 	call	2968c <OSSemPost>

  if (ptr != buffer)
   2c0a8:	e0fff017 	ldw	r3,-64(fp)
   2c0ac:	e0bffd17 	ldw	r2,-12(fp)
   2c0b0:	18801826 	beq	r3,r2,2c114 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c0b4:	0005303a 	rdctl	r2,status
   2c0b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c0bc:	e0fff717 	ldw	r3,-36(fp)
   2c0c0:	00bfff84 	movi	r2,-2
   2c0c4:	1884703a 	and	r2,r3,r2
   2c0c8:	1001703a 	wrctl	status,r2
  
  return context;
   2c0cc:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2c0d0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2c0d4:	e0bffc17 	ldw	r2,-16(fp)
   2c0d8:	10800817 	ldw	r2,32(r2)
   2c0dc:	10c00054 	ori	r3,r2,1
   2c0e0:	e0bffc17 	ldw	r2,-16(fp)
   2c0e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2c0e8:	e0bffc17 	ldw	r2,-16(fp)
   2c0ec:	10800017 	ldw	r2,0(r2)
   2c0f0:	10800104 	addi	r2,r2,4
   2c0f4:	1007883a 	mov	r3,r2
   2c0f8:	e0bffc17 	ldw	r2,-16(fp)
   2c0fc:	10800817 	ldw	r2,32(r2)
   2c100:	18800035 	stwio	r2,0(r3)
   2c104:	e0bff617 	ldw	r2,-40(fp)
   2c108:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c10c:	e0bff517 	ldw	r2,-44(fp)
   2c110:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2c114:	e0fff017 	ldw	r3,-64(fp)
   2c118:	e0bffd17 	ldw	r2,-12(fp)
   2c11c:	18800426 	beq	r3,r2,2c130 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   2c120:	e0fff017 	ldw	r3,-64(fp)
   2c124:	e0bffd17 	ldw	r2,-12(fp)
   2c128:	1885c83a 	sub	r2,r3,r2
   2c12c:	00000606 	br	2c148 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   2c130:	e0bfff17 	ldw	r2,-4(fp)
   2c134:	1090000c 	andi	r2,r2,16384
   2c138:	10000226 	beq	r2,zero,2c144 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   2c13c:	00bffd44 	movi	r2,-11
   2c140:	00000106 	br	2c148 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   2c144:	00bffec4 	movi	r2,-5
}
   2c148:	e037883a 	mov	sp,fp
   2c14c:	dfc00117 	ldw	ra,4(sp)
   2c150:	df000017 	ldw	fp,0(sp)
   2c154:	dec00204 	addi	sp,sp,8
   2c158:	f800283a 	ret

0002c15c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2c15c:	deffed04 	addi	sp,sp,-76
   2c160:	dfc01215 	stw	ra,72(sp)
   2c164:	df001115 	stw	fp,68(sp)
   2c168:	df001104 	addi	fp,sp,68
   2c16c:	e13ffc15 	stw	r4,-16(fp)
   2c170:	e17ffd15 	stw	r5,-12(fp)
   2c174:	e1bffe15 	stw	r6,-8(fp)
   2c178:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2c17c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2c180:	e0bffd17 	ldw	r2,-12(fp)
   2c184:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   2c188:	e0bffc17 	ldw	r2,-16(fp)
   2c18c:	10800b17 	ldw	r2,44(r2)
   2c190:	e0bff815 	stw	r2,-32(fp)
   2c194:	e03ff90d 	sth	zero,-28(fp)
   2c198:	e0bff90b 	ldhu	r2,-28(fp)
   2c19c:	e0fffb44 	addi	r3,fp,-19
   2c1a0:	180d883a 	mov	r6,r3
   2c1a4:	100b883a 	mov	r5,r2
   2c1a8:	e13ff817 	ldw	r4,-32(fp)
   2c1ac:	00293140 	call	29314 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2c1b0:	00003706 	br	2c290 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2c1b4:	e0bffc17 	ldw	r2,-16(fp)
   2c1b8:	10800f17 	ldw	r2,60(r2)
   2c1bc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   2c1c0:	e0bffc17 	ldw	r2,-16(fp)
   2c1c4:	10801017 	ldw	r2,64(r2)
   2c1c8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   2c1cc:	e0fff417 	ldw	r3,-48(fp)
   2c1d0:	e0bff017 	ldw	r2,-64(fp)
   2c1d4:	1880062e 	bgeu	r3,r2,2c1f0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   2c1d8:	e0fff017 	ldw	r3,-64(fp)
   2c1dc:	e0bff417 	ldw	r2,-48(fp)
   2c1e0:	1885c83a 	sub	r2,r3,r2
   2c1e4:	10bfffc4 	addi	r2,r2,-1
   2c1e8:	e0bff115 	stw	r2,-60(fp)
   2c1ec:	00000b06 	br	2c21c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   2c1f0:	e0bff017 	ldw	r2,-64(fp)
   2c1f4:	10000526 	beq	r2,zero,2c20c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2c1f8:	00c20004 	movi	r3,2048
   2c1fc:	e0bff417 	ldw	r2,-48(fp)
   2c200:	1885c83a 	sub	r2,r3,r2
   2c204:	e0bff115 	stw	r2,-60(fp)
   2c208:	00000406 	br	2c21c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2c20c:	00c1ffc4 	movi	r3,2047
   2c210:	e0bff417 	ldw	r2,-48(fp)
   2c214:	1885c83a 	sub	r2,r3,r2
   2c218:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   2c21c:	e0bff117 	ldw	r2,-60(fp)
   2c220:	10001e26 	beq	r2,zero,2c29c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   2c224:	e0fffe17 	ldw	r3,-8(fp)
   2c228:	e0bff117 	ldw	r2,-60(fp)
   2c22c:	1880022e 	bgeu	r3,r2,2c238 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   2c230:	e0bffe17 	ldw	r2,-8(fp)
   2c234:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2c238:	e0bffc17 	ldw	r2,-16(fp)
   2c23c:	10c21104 	addi	r3,r2,2116
   2c240:	e0bff417 	ldw	r2,-48(fp)
   2c244:	1885883a 	add	r2,r3,r2
   2c248:	e1bff117 	ldw	r6,-60(fp)
   2c24c:	e17ffd17 	ldw	r5,-12(fp)
   2c250:	1009883a 	mov	r4,r2
   2c254:	00217e40 	call	217e4 <memcpy>
      ptr   += n;
   2c258:	e0fffd17 	ldw	r3,-12(fp)
   2c25c:	e0bff117 	ldw	r2,-60(fp)
   2c260:	1885883a 	add	r2,r3,r2
   2c264:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2c268:	e0fffe17 	ldw	r3,-8(fp)
   2c26c:	e0bff117 	ldw	r2,-60(fp)
   2c270:	1885c83a 	sub	r2,r3,r2
   2c274:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2c278:	e0fff417 	ldw	r3,-48(fp)
   2c27c:	e0bff117 	ldw	r2,-60(fp)
   2c280:	1885883a 	add	r2,r3,r2
   2c284:	10c1ffcc 	andi	r3,r2,2047
   2c288:	e0bffc17 	ldw	r2,-16(fp)
   2c28c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2c290:	e0bffe17 	ldw	r2,-8(fp)
   2c294:	00bfc716 	blt	zero,r2,2c1b4 <__alt_data_end+0xfffecdb4>
   2c298:	00000106 	br	2c2a0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2c29c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c2a0:	0005303a 	rdctl	r2,status
   2c2a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c2a8:	e0fff717 	ldw	r3,-36(fp)
   2c2ac:	00bfff84 	movi	r2,-2
   2c2b0:	1884703a 	and	r2,r3,r2
   2c2b4:	1001703a 	wrctl	status,r2
  
  return context;
   2c2b8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2c2bc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2c2c0:	e0bffc17 	ldw	r2,-16(fp)
   2c2c4:	10800817 	ldw	r2,32(r2)
   2c2c8:	10c00094 	ori	r3,r2,2
   2c2cc:	e0bffc17 	ldw	r2,-16(fp)
   2c2d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2c2d4:	e0bffc17 	ldw	r2,-16(fp)
   2c2d8:	10800017 	ldw	r2,0(r2)
   2c2dc:	10800104 	addi	r2,r2,4
   2c2e0:	1007883a 	mov	r3,r2
   2c2e4:	e0bffc17 	ldw	r2,-16(fp)
   2c2e8:	10800817 	ldw	r2,32(r2)
   2c2ec:	18800035 	stwio	r2,0(r3)
   2c2f0:	e0bff617 	ldw	r2,-40(fp)
   2c2f4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c2f8:	e0bff317 	ldw	r2,-52(fp)
   2c2fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2c300:	e0bffe17 	ldw	r2,-8(fp)
   2c304:	00802a0e 	bge	zero,r2,2c3b0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   2c308:	e0bfff17 	ldw	r2,-4(fp)
   2c30c:	1090000c 	andi	r2,r2,16384
   2c310:	10002a1e 	bne	r2,zero,2c3bc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   2c314:	d0a6f643 	ldbu	r2,-25639(gp)
   2c318:	10803fcc 	andi	r2,r2,255
   2c31c:	10800058 	cmpnei	r2,r2,1
   2c320:	1000161e 	bne	r2,zero,2c37c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   2c324:	e0bffc17 	ldw	r2,-16(fp)
   2c328:	10800c17 	ldw	r2,48(r2)
   2c32c:	e0bff515 	stw	r2,-44(fp)
   2c330:	00800184 	movi	r2,6
   2c334:	e0bff98d 	sth	r2,-26(fp)
   2c338:	00bfe0c4 	movi	r2,-125
   2c33c:	e0bffa05 	stb	r2,-24(fp)
   2c340:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   2c344:	d0a6f643 	ldbu	r2,-25639(gp)
   2c348:	10803fcc 	andi	r2,r2,255
   2c34c:	10001526 	beq	r2,zero,2c3a4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   2c350:	e0fff98b 	ldhu	r3,-26(fp)
   2c354:	e13ffa03 	ldbu	r4,-24(fp)
   2c358:	e17ffa8b 	ldhu	r5,-22(fp)
   2c35c:	e0bffb04 	addi	r2,fp,-20
   2c360:	d8800015 	stw	r2,0(sp)
   2c364:	280f883a 	mov	r7,r5
   2c368:	200d883a 	mov	r6,r4
   2c36c:	180b883a 	mov	r5,r3
   2c370:	e13ff517 	ldw	r4,-44(fp)
   2c374:	00268a00 	call	268a0 <OSFlagPend>
   2c378:	00000a06 	br	2c3a4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2c37c:	0001883a 	nop
   2c380:	e0bffc17 	ldw	r2,-16(fp)
   2c384:	10c01017 	ldw	r3,64(r2)
   2c388:	e0bff017 	ldw	r2,-64(fp)
   2c38c:	1880051e 	bne	r3,r2,2c3a4 <altera_avalon_jtag_uart_write+0x248>
   2c390:	e0bffc17 	ldw	r2,-16(fp)
   2c394:	10c00917 	ldw	r3,36(r2)
   2c398:	e0bffc17 	ldw	r2,-16(fp)
   2c39c:	10800117 	ldw	r2,4(r2)
   2c3a0:	18bff736 	bltu	r3,r2,2c380 <__alt_data_end+0xfffecf80>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2c3a4:	e0bffc17 	ldw	r2,-16(fp)
   2c3a8:	10800917 	ldw	r2,36(r2)
   2c3ac:	1000051e 	bne	r2,zero,2c3c4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   2c3b0:	e0bffe17 	ldw	r2,-8(fp)
   2c3b4:	00bfb616 	blt	zero,r2,2c290 <__alt_data_end+0xfffece90>
   2c3b8:	00000306 	br	2c3c8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2c3bc:	0001883a 	nop
   2c3c0:	00000106 	br	2c3c8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2c3c4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   2c3c8:	e0bffc17 	ldw	r2,-16(fp)
   2c3cc:	10800b17 	ldw	r2,44(r2)
   2c3d0:	1009883a 	mov	r4,r2
   2c3d4:	002968c0 	call	2968c <OSSemPost>

  if (ptr != start)
   2c3d8:	e0fffd17 	ldw	r3,-12(fp)
   2c3dc:	e0bff217 	ldw	r2,-56(fp)
   2c3e0:	18800426 	beq	r3,r2,2c3f4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   2c3e4:	e0fffd17 	ldw	r3,-12(fp)
   2c3e8:	e0bff217 	ldw	r2,-56(fp)
   2c3ec:	1885c83a 	sub	r2,r3,r2
   2c3f0:	00000606 	br	2c40c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   2c3f4:	e0bfff17 	ldw	r2,-4(fp)
   2c3f8:	1090000c 	andi	r2,r2,16384
   2c3fc:	10000226 	beq	r2,zero,2c408 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   2c400:	00bffd44 	movi	r2,-11
   2c404:	00000106 	br	2c40c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2c408:	00bffec4 	movi	r2,-5
}
   2c40c:	e037883a 	mov	sp,fp
   2c410:	dfc00117 	ldw	ra,4(sp)
   2c414:	df000017 	ldw	fp,0(sp)
   2c418:	dec00204 	addi	sp,sp,8
   2c41c:	f800283a 	ret

0002c420 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2c420:	defffa04 	addi	sp,sp,-24
   2c424:	dfc00515 	stw	ra,20(sp)
   2c428:	df000415 	stw	fp,16(sp)
   2c42c:	df000404 	addi	fp,sp,16
   2c430:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2c434:	0007883a 	mov	r3,zero
   2c438:	e0bfff17 	ldw	r2,-4(fp)
   2c43c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2c440:	e0bfff17 	ldw	r2,-4(fp)
   2c444:	10800104 	addi	r2,r2,4
   2c448:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c44c:	0005303a 	rdctl	r2,status
   2c450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c454:	e0fffd17 	ldw	r3,-12(fp)
   2c458:	00bfff84 	movi	r2,-2
   2c45c:	1884703a 	and	r2,r3,r2
   2c460:	1001703a 	wrctl	status,r2
  
  return context;
   2c464:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2c468:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2c46c:	002cf400 	call	2cf40 <alt_tick>
   2c470:	e0bffc17 	ldw	r2,-16(fp)
   2c474:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c478:	e0bffe17 	ldw	r2,-8(fp)
   2c47c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2c480:	0001883a 	nop
   2c484:	e037883a 	mov	sp,fp
   2c488:	dfc00117 	ldw	ra,4(sp)
   2c48c:	df000017 	ldw	fp,0(sp)
   2c490:	dec00204 	addi	sp,sp,8
   2c494:	f800283a 	ret

0002c498 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2c498:	defff804 	addi	sp,sp,-32
   2c49c:	dfc00715 	stw	ra,28(sp)
   2c4a0:	df000615 	stw	fp,24(sp)
   2c4a4:	df000604 	addi	fp,sp,24
   2c4a8:	e13ffc15 	stw	r4,-16(fp)
   2c4ac:	e17ffd15 	stw	r5,-12(fp)
   2c4b0:	e1bffe15 	stw	r6,-8(fp)
   2c4b4:	e1ffff15 	stw	r7,-4(fp)
   2c4b8:	e0bfff17 	ldw	r2,-4(fp)
   2c4bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2c4c0:	d0a70b17 	ldw	r2,-25556(gp)
   2c4c4:	1000021e 	bne	r2,zero,2c4d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2c4c8:	e0bffb17 	ldw	r2,-20(fp)
   2c4cc:	d0a70b15 	stw	r2,-25556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2c4d0:	e0bffc17 	ldw	r2,-16(fp)
   2c4d4:	10800104 	addi	r2,r2,4
   2c4d8:	00c001c4 	movi	r3,7
   2c4dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2c4e0:	d8000015 	stw	zero,0(sp)
   2c4e4:	e1fffc17 	ldw	r7,-16(fp)
   2c4e8:	018000f4 	movhi	r6,3
   2c4ec:	31b10804 	addi	r6,r6,-15328
   2c4f0:	e17ffe17 	ldw	r5,-8(fp)
   2c4f4:	e13ffd17 	ldw	r4,-12(fp)
   2c4f8:	002c8200 	call	2c820 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2c4fc:	0001883a 	nop
   2c500:	e037883a 	mov	sp,fp
   2c504:	dfc00117 	ldw	ra,4(sp)
   2c508:	df000017 	ldw	fp,0(sp)
   2c50c:	dec00204 	addi	sp,sp,8
   2c510:	f800283a 	ret

0002c514 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2c514:	defff504 	addi	sp,sp,-44
   2c518:	df000a15 	stw	fp,40(sp)
   2c51c:	df000a04 	addi	fp,sp,40
   2c520:	e13ffc15 	stw	r4,-16(fp)
   2c524:	e17ffd15 	stw	r5,-12(fp)
   2c528:	e1bffe15 	stw	r6,-8(fp)
   2c52c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2c530:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2c534:	d0a70b17 	ldw	r2,-25556(gp)
  
  if (alt_ticks_per_second ())
   2c538:	10003c26 	beq	r2,zero,2c62c <alt_alarm_start+0x118>
  {
    if (alarm)
   2c53c:	e0bffc17 	ldw	r2,-16(fp)
   2c540:	10003826 	beq	r2,zero,2c624 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2c544:	e0bffc17 	ldw	r2,-16(fp)
   2c548:	e0fffe17 	ldw	r3,-8(fp)
   2c54c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2c550:	e0bffc17 	ldw	r2,-16(fp)
   2c554:	e0ffff17 	ldw	r3,-4(fp)
   2c558:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c55c:	0005303a 	rdctl	r2,status
   2c560:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c564:	e0fff917 	ldw	r3,-28(fp)
   2c568:	00bfff84 	movi	r2,-2
   2c56c:	1884703a 	and	r2,r3,r2
   2c570:	1001703a 	wrctl	status,r2
  
  return context;
   2c574:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2c578:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2c57c:	d0a70c17 	ldw	r2,-25552(gp)
      
      current_nticks = alt_nticks();
   2c580:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2c584:	e0fffd17 	ldw	r3,-12(fp)
   2c588:	e0bff617 	ldw	r2,-40(fp)
   2c58c:	1885883a 	add	r2,r3,r2
   2c590:	10c00044 	addi	r3,r2,1
   2c594:	e0bffc17 	ldw	r2,-16(fp)
   2c598:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2c59c:	e0bffc17 	ldw	r2,-16(fp)
   2c5a0:	10c00217 	ldw	r3,8(r2)
   2c5a4:	e0bff617 	ldw	r2,-40(fp)
   2c5a8:	1880042e 	bgeu	r3,r2,2c5bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2c5ac:	e0bffc17 	ldw	r2,-16(fp)
   2c5b0:	00c00044 	movi	r3,1
   2c5b4:	10c00405 	stb	r3,16(r2)
   2c5b8:	00000206 	br	2c5c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2c5bc:	e0bffc17 	ldw	r2,-16(fp)
   2c5c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2c5c4:	e0bffc17 	ldw	r2,-16(fp)
   2c5c8:	d0e02b04 	addi	r3,gp,-32596
   2c5cc:	e0fffa15 	stw	r3,-24(fp)
   2c5d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2c5d4:	e0bffb17 	ldw	r2,-20(fp)
   2c5d8:	e0fffa17 	ldw	r3,-24(fp)
   2c5dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2c5e0:	e0bffa17 	ldw	r2,-24(fp)
   2c5e4:	10c00017 	ldw	r3,0(r2)
   2c5e8:	e0bffb17 	ldw	r2,-20(fp)
   2c5ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2c5f0:	e0bffa17 	ldw	r2,-24(fp)
   2c5f4:	10800017 	ldw	r2,0(r2)
   2c5f8:	e0fffb17 	ldw	r3,-20(fp)
   2c5fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2c600:	e0bffa17 	ldw	r2,-24(fp)
   2c604:	e0fffb17 	ldw	r3,-20(fp)
   2c608:	10c00015 	stw	r3,0(r2)
   2c60c:	e0bff817 	ldw	r2,-32(fp)
   2c610:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c614:	e0bff717 	ldw	r2,-36(fp)
   2c618:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2c61c:	0005883a 	mov	r2,zero
   2c620:	00000306 	br	2c630 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2c624:	00bffa84 	movi	r2,-22
   2c628:	00000106 	br	2c630 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2c62c:	00bfde84 	movi	r2,-134
  }
}
   2c630:	e037883a 	mov	sp,fp
   2c634:	df000017 	ldw	fp,0(sp)
   2c638:	dec00104 	addi	sp,sp,4
   2c63c:	f800283a 	ret

0002c640 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2c640:	deffff04 	addi	sp,sp,-4
   2c644:	df000015 	stw	fp,0(sp)
   2c648:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2c64c:	0001883a 	nop
   2c650:	e037883a 	mov	sp,fp
   2c654:	df000017 	ldw	fp,0(sp)
   2c658:	dec00104 	addi	sp,sp,4
   2c65c:	f800283a 	ret

0002c660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c660:	defffe04 	addi	sp,sp,-8
   2c664:	dfc00115 	stw	ra,4(sp)
   2c668:	df000015 	stw	fp,0(sp)
   2c66c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c670:	d0a00917 	ldw	r2,-32732(gp)
   2c674:	10000326 	beq	r2,zero,2c684 <alt_get_errno+0x24>
   2c678:	d0a00917 	ldw	r2,-32732(gp)
   2c67c:	103ee83a 	callr	r2
   2c680:	00000106 	br	2c688 <alt_get_errno+0x28>
   2c684:	d0a6ed04 	addi	r2,gp,-25676
}
   2c688:	e037883a 	mov	sp,fp
   2c68c:	dfc00117 	ldw	ra,4(sp)
   2c690:	df000017 	ldw	fp,0(sp)
   2c694:	dec00204 	addi	sp,sp,8
   2c698:	f800283a 	ret

0002c69c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2c69c:	defffa04 	addi	sp,sp,-24
   2c6a0:	dfc00515 	stw	ra,20(sp)
   2c6a4:	df000415 	stw	fp,16(sp)
   2c6a8:	df000404 	addi	fp,sp,16
   2c6ac:	e13ffe15 	stw	r4,-8(fp)
   2c6b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2c6b4:	e0bffe17 	ldw	r2,-8(fp)
   2c6b8:	10000326 	beq	r2,zero,2c6c8 <alt_dev_llist_insert+0x2c>
   2c6bc:	e0bffe17 	ldw	r2,-8(fp)
   2c6c0:	10800217 	ldw	r2,8(r2)
   2c6c4:	1000061e 	bne	r2,zero,2c6e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2c6c8:	002c6600 	call	2c660 <alt_get_errno>
   2c6cc:	1007883a 	mov	r3,r2
   2c6d0:	00800584 	movi	r2,22
   2c6d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2c6d8:	00bffa84 	movi	r2,-22
   2c6dc:	00001306 	br	2c72c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2c6e0:	e0bffe17 	ldw	r2,-8(fp)
   2c6e4:	e0ffff17 	ldw	r3,-4(fp)
   2c6e8:	e0fffc15 	stw	r3,-16(fp)
   2c6ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2c6f0:	e0bffd17 	ldw	r2,-12(fp)
   2c6f4:	e0fffc17 	ldw	r3,-16(fp)
   2c6f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2c6fc:	e0bffc17 	ldw	r2,-16(fp)
   2c700:	10c00017 	ldw	r3,0(r2)
   2c704:	e0bffd17 	ldw	r2,-12(fp)
   2c708:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2c70c:	e0bffc17 	ldw	r2,-16(fp)
   2c710:	10800017 	ldw	r2,0(r2)
   2c714:	e0fffd17 	ldw	r3,-12(fp)
   2c718:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2c71c:	e0bffc17 	ldw	r2,-16(fp)
   2c720:	e0fffd17 	ldw	r3,-12(fp)
   2c724:	10c00015 	stw	r3,0(r2)

  return 0;  
   2c728:	0005883a 	mov	r2,zero
}
   2c72c:	e037883a 	mov	sp,fp
   2c730:	dfc00117 	ldw	ra,4(sp)
   2c734:	df000017 	ldw	fp,0(sp)
   2c738:	dec00204 	addi	sp,sp,8
   2c73c:	f800283a 	ret

0002c740 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2c740:	defffd04 	addi	sp,sp,-12
   2c744:	dfc00215 	stw	ra,8(sp)
   2c748:	df000115 	stw	fp,4(sp)
   2c74c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2c750:	008000f4 	movhi	r2,3
   2c754:	10b69f04 	addi	r2,r2,-9604
   2c758:	e0bfff15 	stw	r2,-4(fp)
   2c75c:	00000606 	br	2c778 <_do_ctors+0x38>
        (*ctor) (); 
   2c760:	e0bfff17 	ldw	r2,-4(fp)
   2c764:	10800017 	ldw	r2,0(r2)
   2c768:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2c76c:	e0bfff17 	ldw	r2,-4(fp)
   2c770:	10bfff04 	addi	r2,r2,-4
   2c774:	e0bfff15 	stw	r2,-4(fp)
   2c778:	e0ffff17 	ldw	r3,-4(fp)
   2c77c:	008000f4 	movhi	r2,3
   2c780:	10b6a004 	addi	r2,r2,-9600
   2c784:	18bff62e 	bgeu	r3,r2,2c760 <__alt_data_end+0xfffed360>
        (*ctor) (); 
}
   2c788:	0001883a 	nop
   2c78c:	e037883a 	mov	sp,fp
   2c790:	dfc00117 	ldw	ra,4(sp)
   2c794:	df000017 	ldw	fp,0(sp)
   2c798:	dec00204 	addi	sp,sp,8
   2c79c:	f800283a 	ret

0002c7a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2c7a0:	defffd04 	addi	sp,sp,-12
   2c7a4:	dfc00215 	stw	ra,8(sp)
   2c7a8:	df000115 	stw	fp,4(sp)
   2c7ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2c7b0:	008000f4 	movhi	r2,3
   2c7b4:	10b69f04 	addi	r2,r2,-9604
   2c7b8:	e0bfff15 	stw	r2,-4(fp)
   2c7bc:	00000606 	br	2c7d8 <_do_dtors+0x38>
        (*dtor) (); 
   2c7c0:	e0bfff17 	ldw	r2,-4(fp)
   2c7c4:	10800017 	ldw	r2,0(r2)
   2c7c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2c7cc:	e0bfff17 	ldw	r2,-4(fp)
   2c7d0:	10bfff04 	addi	r2,r2,-4
   2c7d4:	e0bfff15 	stw	r2,-4(fp)
   2c7d8:	e0ffff17 	ldw	r3,-4(fp)
   2c7dc:	008000f4 	movhi	r2,3
   2c7e0:	10b6a004 	addi	r2,r2,-9600
   2c7e4:	18bff62e 	bgeu	r3,r2,2c7c0 <__alt_data_end+0xfffed3c0>
        (*dtor) (); 
}
   2c7e8:	0001883a 	nop
   2c7ec:	e037883a 	mov	sp,fp
   2c7f0:	dfc00117 	ldw	ra,4(sp)
   2c7f4:	df000017 	ldw	fp,0(sp)
   2c7f8:	dec00204 	addi	sp,sp,8
   2c7fc:	f800283a 	ret

0002c800 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2c800:	deffff04 	addi	sp,sp,-4
   2c804:	df000015 	stw	fp,0(sp)
   2c808:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2c80c:	0001883a 	nop
   2c810:	e037883a 	mov	sp,fp
   2c814:	df000017 	ldw	fp,0(sp)
   2c818:	dec00104 	addi	sp,sp,4
   2c81c:	f800283a 	ret

0002c820 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2c820:	defff904 	addi	sp,sp,-28
   2c824:	dfc00615 	stw	ra,24(sp)
   2c828:	df000515 	stw	fp,20(sp)
   2c82c:	df000504 	addi	fp,sp,20
   2c830:	e13ffc15 	stw	r4,-16(fp)
   2c834:	e17ffd15 	stw	r5,-12(fp)
   2c838:	e1bffe15 	stw	r6,-8(fp)
   2c83c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2c840:	e0800217 	ldw	r2,8(fp)
   2c844:	d8800015 	stw	r2,0(sp)
   2c848:	e1ffff17 	ldw	r7,-4(fp)
   2c84c:	e1bffe17 	ldw	r6,-8(fp)
   2c850:	e17ffd17 	ldw	r5,-12(fp)
   2c854:	e13ffc17 	ldw	r4,-16(fp)
   2c858:	002c9d00 	call	2c9d0 <alt_iic_isr_register>
}  
   2c85c:	e037883a 	mov	sp,fp
   2c860:	dfc00117 	ldw	ra,4(sp)
   2c864:	df000017 	ldw	fp,0(sp)
   2c868:	dec00204 	addi	sp,sp,8
   2c86c:	f800283a 	ret

0002c870 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2c870:	defff904 	addi	sp,sp,-28
   2c874:	df000615 	stw	fp,24(sp)
   2c878:	df000604 	addi	fp,sp,24
   2c87c:	e13ffe15 	stw	r4,-8(fp)
   2c880:	e17fff15 	stw	r5,-4(fp)
   2c884:	e0bfff17 	ldw	r2,-4(fp)
   2c888:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c88c:	0005303a 	rdctl	r2,status
   2c890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c894:	e0fffb17 	ldw	r3,-20(fp)
   2c898:	00bfff84 	movi	r2,-2
   2c89c:	1884703a 	and	r2,r3,r2
   2c8a0:	1001703a 	wrctl	status,r2
  
  return context;
   2c8a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2c8a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2c8ac:	00c00044 	movi	r3,1
   2c8b0:	e0bffa17 	ldw	r2,-24(fp)
   2c8b4:	1884983a 	sll	r2,r3,r2
   2c8b8:	1007883a 	mov	r3,r2
   2c8bc:	d0a70a17 	ldw	r2,-25560(gp)
   2c8c0:	1884b03a 	or	r2,r3,r2
   2c8c4:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2c8c8:	d0a70a17 	ldw	r2,-25560(gp)
   2c8cc:	100170fa 	wrctl	ienable,r2
   2c8d0:	e0bffc17 	ldw	r2,-16(fp)
   2c8d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c8d8:	e0bffd17 	ldw	r2,-12(fp)
   2c8dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2c8e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2c8e4:	0001883a 	nop
}
   2c8e8:	e037883a 	mov	sp,fp
   2c8ec:	df000017 	ldw	fp,0(sp)
   2c8f0:	dec00104 	addi	sp,sp,4
   2c8f4:	f800283a 	ret

0002c8f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2c8f8:	defff904 	addi	sp,sp,-28
   2c8fc:	df000615 	stw	fp,24(sp)
   2c900:	df000604 	addi	fp,sp,24
   2c904:	e13ffe15 	stw	r4,-8(fp)
   2c908:	e17fff15 	stw	r5,-4(fp)
   2c90c:	e0bfff17 	ldw	r2,-4(fp)
   2c910:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c914:	0005303a 	rdctl	r2,status
   2c918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c91c:	e0fffb17 	ldw	r3,-20(fp)
   2c920:	00bfff84 	movi	r2,-2
   2c924:	1884703a 	and	r2,r3,r2
   2c928:	1001703a 	wrctl	status,r2
  
  return context;
   2c92c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2c930:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2c934:	00c00044 	movi	r3,1
   2c938:	e0bffa17 	ldw	r2,-24(fp)
   2c93c:	1884983a 	sll	r2,r3,r2
   2c940:	0084303a 	nor	r2,zero,r2
   2c944:	1007883a 	mov	r3,r2
   2c948:	d0a70a17 	ldw	r2,-25560(gp)
   2c94c:	1884703a 	and	r2,r3,r2
   2c950:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2c954:	d0a70a17 	ldw	r2,-25560(gp)
   2c958:	100170fa 	wrctl	ienable,r2
   2c95c:	e0bffc17 	ldw	r2,-16(fp)
   2c960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c964:	e0bffd17 	ldw	r2,-12(fp)
   2c968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2c96c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2c970:	0001883a 	nop
}
   2c974:	e037883a 	mov	sp,fp
   2c978:	df000017 	ldw	fp,0(sp)
   2c97c:	dec00104 	addi	sp,sp,4
   2c980:	f800283a 	ret

0002c984 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2c984:	defffc04 	addi	sp,sp,-16
   2c988:	df000315 	stw	fp,12(sp)
   2c98c:	df000304 	addi	fp,sp,12
   2c990:	e13ffe15 	stw	r4,-8(fp)
   2c994:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2c998:	000530fa 	rdctl	r2,ienable
   2c99c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2c9a0:	00c00044 	movi	r3,1
   2c9a4:	e0bfff17 	ldw	r2,-4(fp)
   2c9a8:	1884983a 	sll	r2,r3,r2
   2c9ac:	1007883a 	mov	r3,r2
   2c9b0:	e0bffd17 	ldw	r2,-12(fp)
   2c9b4:	1884703a 	and	r2,r3,r2
   2c9b8:	1004c03a 	cmpne	r2,r2,zero
   2c9bc:	10803fcc 	andi	r2,r2,255
}
   2c9c0:	e037883a 	mov	sp,fp
   2c9c4:	df000017 	ldw	fp,0(sp)
   2c9c8:	dec00104 	addi	sp,sp,4
   2c9cc:	f800283a 	ret

0002c9d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2c9d0:	defff504 	addi	sp,sp,-44
   2c9d4:	dfc00a15 	stw	ra,40(sp)
   2c9d8:	df000915 	stw	fp,36(sp)
   2c9dc:	df000904 	addi	fp,sp,36
   2c9e0:	e13ffc15 	stw	r4,-16(fp)
   2c9e4:	e17ffd15 	stw	r5,-12(fp)
   2c9e8:	e1bffe15 	stw	r6,-8(fp)
   2c9ec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2c9f0:	00bffa84 	movi	r2,-22
   2c9f4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2c9f8:	e0bffd17 	ldw	r2,-12(fp)
   2c9fc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2ca00:	e0bff817 	ldw	r2,-32(fp)
   2ca04:	10800808 	cmpgei	r2,r2,32
   2ca08:	1000271e 	bne	r2,zero,2caa8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ca0c:	0005303a 	rdctl	r2,status
   2ca10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ca14:	e0fffb17 	ldw	r3,-20(fp)
   2ca18:	00bfff84 	movi	r2,-2
   2ca1c:	1884703a 	and	r2,r3,r2
   2ca20:	1001703a 	wrctl	status,r2
  
  return context;
   2ca24:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2ca28:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2ca2c:	00800134 	movhi	r2,4
   2ca30:	10a13104 	addi	r2,r2,-31548
   2ca34:	e0fff817 	ldw	r3,-32(fp)
   2ca38:	180690fa 	slli	r3,r3,3
   2ca3c:	10c5883a 	add	r2,r2,r3
   2ca40:	e0fffe17 	ldw	r3,-8(fp)
   2ca44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2ca48:	00800134 	movhi	r2,4
   2ca4c:	10a13104 	addi	r2,r2,-31548
   2ca50:	e0fff817 	ldw	r3,-32(fp)
   2ca54:	180690fa 	slli	r3,r3,3
   2ca58:	10c5883a 	add	r2,r2,r3
   2ca5c:	10800104 	addi	r2,r2,4
   2ca60:	e0ffff17 	ldw	r3,-4(fp)
   2ca64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2ca68:	e0bffe17 	ldw	r2,-8(fp)
   2ca6c:	10000526 	beq	r2,zero,2ca84 <alt_iic_isr_register+0xb4>
   2ca70:	e0bff817 	ldw	r2,-32(fp)
   2ca74:	100b883a 	mov	r5,r2
   2ca78:	e13ffc17 	ldw	r4,-16(fp)
   2ca7c:	002c8700 	call	2c870 <alt_ic_irq_enable>
   2ca80:	00000406 	br	2ca94 <alt_iic_isr_register+0xc4>
   2ca84:	e0bff817 	ldw	r2,-32(fp)
   2ca88:	100b883a 	mov	r5,r2
   2ca8c:	e13ffc17 	ldw	r4,-16(fp)
   2ca90:	002c8f80 	call	2c8f8 <alt_ic_irq_disable>
   2ca94:	e0bff715 	stw	r2,-36(fp)
   2ca98:	e0bffa17 	ldw	r2,-24(fp)
   2ca9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2caa0:	e0bff917 	ldw	r2,-28(fp)
   2caa4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2caa8:	e0bff717 	ldw	r2,-36(fp)
}
   2caac:	e037883a 	mov	sp,fp
   2cab0:	dfc00117 	ldw	ra,4(sp)
   2cab4:	df000017 	ldw	fp,0(sp)
   2cab8:	dec00204 	addi	sp,sp,8
   2cabc:	f800283a 	ret

0002cac0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2cac0:	defff804 	addi	sp,sp,-32
   2cac4:	dfc00715 	stw	ra,28(sp)
   2cac8:	df000615 	stw	fp,24(sp)
   2cacc:	dc000515 	stw	r16,20(sp)
   2cad0:	df000604 	addi	fp,sp,24
   2cad4:	e13ffb15 	stw	r4,-20(fp)
   2cad8:	e17ffc15 	stw	r5,-16(fp)
   2cadc:	e1bffd15 	stw	r6,-12(fp)
   2cae0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2cae4:	e1bffe17 	ldw	r6,-8(fp)
   2cae8:	e17ffd17 	ldw	r5,-12(fp)
   2caec:	e13ffc17 	ldw	r4,-16(fp)
   2caf0:	002cd480 	call	2cd48 <open>
   2caf4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2caf8:	e0bffa17 	ldw	r2,-24(fp)
   2cafc:	10002216 	blt	r2,zero,2cb88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2cb00:	040000f4 	movhi	r16,3
   2cb04:	84391504 	addi	r16,r16,-7084
   2cb08:	e0bffa17 	ldw	r2,-24(fp)
   2cb0c:	01400304 	movi	r5,12
   2cb10:	1009883a 	mov	r4,r2
   2cb14:	002316c0 	call	2316c <__mulsi3>
   2cb18:	8085883a 	add	r2,r16,r2
   2cb1c:	10c00017 	ldw	r3,0(r2)
   2cb20:	e0bffb17 	ldw	r2,-20(fp)
   2cb24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2cb28:	040000f4 	movhi	r16,3
   2cb2c:	84391504 	addi	r16,r16,-7084
   2cb30:	e0bffa17 	ldw	r2,-24(fp)
   2cb34:	01400304 	movi	r5,12
   2cb38:	1009883a 	mov	r4,r2
   2cb3c:	002316c0 	call	2316c <__mulsi3>
   2cb40:	8085883a 	add	r2,r16,r2
   2cb44:	10800104 	addi	r2,r2,4
   2cb48:	10c00017 	ldw	r3,0(r2)
   2cb4c:	e0bffb17 	ldw	r2,-20(fp)
   2cb50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2cb54:	040000f4 	movhi	r16,3
   2cb58:	84391504 	addi	r16,r16,-7084
   2cb5c:	e0bffa17 	ldw	r2,-24(fp)
   2cb60:	01400304 	movi	r5,12
   2cb64:	1009883a 	mov	r4,r2
   2cb68:	002316c0 	call	2316c <__mulsi3>
   2cb6c:	8085883a 	add	r2,r16,r2
   2cb70:	10800204 	addi	r2,r2,8
   2cb74:	10c00017 	ldw	r3,0(r2)
   2cb78:	e0bffb17 	ldw	r2,-20(fp)
   2cb7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2cb80:	e13ffa17 	ldw	r4,-24(fp)
   2cb84:	00238b00 	call	238b0 <alt_release_fd>
  }
} 
   2cb88:	0001883a 	nop
   2cb8c:	e6ffff04 	addi	sp,fp,-4
   2cb90:	dfc00217 	ldw	ra,8(sp)
   2cb94:	df000117 	ldw	fp,4(sp)
   2cb98:	dc000017 	ldw	r16,0(sp)
   2cb9c:	dec00304 	addi	sp,sp,12
   2cba0:	f800283a 	ret

0002cba4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2cba4:	defffb04 	addi	sp,sp,-20
   2cba8:	dfc00415 	stw	ra,16(sp)
   2cbac:	df000315 	stw	fp,12(sp)
   2cbb0:	df000304 	addi	fp,sp,12
   2cbb4:	e13ffd15 	stw	r4,-12(fp)
   2cbb8:	e17ffe15 	stw	r5,-8(fp)
   2cbbc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2cbc0:	01c07fc4 	movi	r7,511
   2cbc4:	01800044 	movi	r6,1
   2cbc8:	e17ffd17 	ldw	r5,-12(fp)
   2cbcc:	010000f4 	movhi	r4,3
   2cbd0:	21391804 	addi	r4,r4,-7072
   2cbd4:	002cac00 	call	2cac0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2cbd8:	01c07fc4 	movi	r7,511
   2cbdc:	000d883a 	mov	r6,zero
   2cbe0:	e17ffe17 	ldw	r5,-8(fp)
   2cbe4:	010000f4 	movhi	r4,3
   2cbe8:	21391504 	addi	r4,r4,-7084
   2cbec:	002cac00 	call	2cac0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2cbf0:	01c07fc4 	movi	r7,511
   2cbf4:	01800044 	movi	r6,1
   2cbf8:	e17fff17 	ldw	r5,-4(fp)
   2cbfc:	010000f4 	movhi	r4,3
   2cc00:	21391b04 	addi	r4,r4,-7060
   2cc04:	002cac00 	call	2cac0 <alt_open_fd>
}  
   2cc08:	0001883a 	nop
   2cc0c:	e037883a 	mov	sp,fp
   2cc10:	dfc00117 	ldw	ra,4(sp)
   2cc14:	df000017 	ldw	fp,0(sp)
   2cc18:	dec00204 	addi	sp,sp,8
   2cc1c:	f800283a 	ret

0002cc20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cc20:	defffe04 	addi	sp,sp,-8
   2cc24:	dfc00115 	stw	ra,4(sp)
   2cc28:	df000015 	stw	fp,0(sp)
   2cc2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cc30:	d0a00917 	ldw	r2,-32732(gp)
   2cc34:	10000326 	beq	r2,zero,2cc44 <alt_get_errno+0x24>
   2cc38:	d0a00917 	ldw	r2,-32732(gp)
   2cc3c:	103ee83a 	callr	r2
   2cc40:	00000106 	br	2cc48 <alt_get_errno+0x28>
   2cc44:	d0a6ed04 	addi	r2,gp,-25676
}
   2cc48:	e037883a 	mov	sp,fp
   2cc4c:	dfc00117 	ldw	ra,4(sp)
   2cc50:	df000017 	ldw	fp,0(sp)
   2cc54:	dec00204 	addi	sp,sp,8
   2cc58:	f800283a 	ret

0002cc5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2cc5c:	defffb04 	addi	sp,sp,-20
   2cc60:	dfc00415 	stw	ra,16(sp)
   2cc64:	df000315 	stw	fp,12(sp)
   2cc68:	dc000215 	stw	r16,8(sp)
   2cc6c:	df000304 	addi	fp,sp,12
   2cc70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2cc74:	e0bffe17 	ldw	r2,-8(fp)
   2cc78:	10800217 	ldw	r2,8(r2)
   2cc7c:	10d00034 	orhi	r3,r2,16384
   2cc80:	e0bffe17 	ldw	r2,-8(fp)
   2cc84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2cc88:	e03ffd15 	stw	zero,-12(fp)
   2cc8c:	00002306 	br	2cd1c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2cc90:	040000f4 	movhi	r16,3
   2cc94:	84391504 	addi	r16,r16,-7084
   2cc98:	e0bffd17 	ldw	r2,-12(fp)
   2cc9c:	01400304 	movi	r5,12
   2cca0:	1009883a 	mov	r4,r2
   2cca4:	002316c0 	call	2316c <__mulsi3>
   2cca8:	8085883a 	add	r2,r16,r2
   2ccac:	10c00017 	ldw	r3,0(r2)
   2ccb0:	e0bffe17 	ldw	r2,-8(fp)
   2ccb4:	10800017 	ldw	r2,0(r2)
   2ccb8:	1880151e 	bne	r3,r2,2cd10 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2ccbc:	040000f4 	movhi	r16,3
   2ccc0:	84391504 	addi	r16,r16,-7084
   2ccc4:	e0bffd17 	ldw	r2,-12(fp)
   2ccc8:	01400304 	movi	r5,12
   2cccc:	1009883a 	mov	r4,r2
   2ccd0:	002316c0 	call	2316c <__mulsi3>
   2ccd4:	8085883a 	add	r2,r16,r2
   2ccd8:	10800204 	addi	r2,r2,8
   2ccdc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2cce0:	10000b0e 	bge	r2,zero,2cd10 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2cce4:	01400304 	movi	r5,12
   2cce8:	e13ffd17 	ldw	r4,-12(fp)
   2ccec:	002316c0 	call	2316c <__mulsi3>
   2ccf0:	1007883a 	mov	r3,r2
   2ccf4:	008000f4 	movhi	r2,3
   2ccf8:	10b91504 	addi	r2,r2,-7084
   2ccfc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2cd00:	e0bffe17 	ldw	r2,-8(fp)
   2cd04:	18800226 	beq	r3,r2,2cd10 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2cd08:	00bffcc4 	movi	r2,-13
   2cd0c:	00000806 	br	2cd30 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2cd10:	e0bffd17 	ldw	r2,-12(fp)
   2cd14:	10800044 	addi	r2,r2,1
   2cd18:	e0bffd15 	stw	r2,-12(fp)
   2cd1c:	d0a00817 	ldw	r2,-32736(gp)
   2cd20:	1007883a 	mov	r3,r2
   2cd24:	e0bffd17 	ldw	r2,-12(fp)
   2cd28:	18bfd92e 	bgeu	r3,r2,2cc90 <__alt_data_end+0xfffed890>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2cd2c:	0005883a 	mov	r2,zero
}
   2cd30:	e6ffff04 	addi	sp,fp,-4
   2cd34:	dfc00217 	ldw	ra,8(sp)
   2cd38:	df000117 	ldw	fp,4(sp)
   2cd3c:	dc000017 	ldw	r16,0(sp)
   2cd40:	dec00304 	addi	sp,sp,12
   2cd44:	f800283a 	ret

0002cd48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2cd48:	defff604 	addi	sp,sp,-40
   2cd4c:	dfc00915 	stw	ra,36(sp)
   2cd50:	df000815 	stw	fp,32(sp)
   2cd54:	df000804 	addi	fp,sp,32
   2cd58:	e13ffd15 	stw	r4,-12(fp)
   2cd5c:	e17ffe15 	stw	r5,-8(fp)
   2cd60:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2cd64:	00bfffc4 	movi	r2,-1
   2cd68:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2cd6c:	00bffb44 	movi	r2,-19
   2cd70:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2cd74:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2cd78:	d1600604 	addi	r5,gp,-32744
   2cd7c:	e13ffd17 	ldw	r4,-12(fp)
   2cd80:	002d3c40 	call	2d3c4 <alt_find_dev>
   2cd84:	e0bff815 	stw	r2,-32(fp)
   2cd88:	e0bff817 	ldw	r2,-32(fp)
   2cd8c:	1000051e 	bne	r2,zero,2cda4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2cd90:	e13ffd17 	ldw	r4,-12(fp)
   2cd94:	002d4540 	call	2d454 <alt_find_file>
   2cd98:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2cd9c:	00800044 	movi	r2,1
   2cda0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2cda4:	e0bff817 	ldw	r2,-32(fp)
   2cda8:	10002b26 	beq	r2,zero,2ce58 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2cdac:	e13ff817 	ldw	r4,-32(fp)
   2cdb0:	002d55c0 	call	2d55c <alt_get_fd>
   2cdb4:	e0bff915 	stw	r2,-28(fp)
   2cdb8:	e0bff917 	ldw	r2,-28(fp)
   2cdbc:	1000030e 	bge	r2,zero,2cdcc <open+0x84>
    {
      status = index;
   2cdc0:	e0bff917 	ldw	r2,-28(fp)
   2cdc4:	e0bffa15 	stw	r2,-24(fp)
   2cdc8:	00002506 	br	2ce60 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2cdcc:	01400304 	movi	r5,12
   2cdd0:	e13ff917 	ldw	r4,-28(fp)
   2cdd4:	002316c0 	call	2316c <__mulsi3>
   2cdd8:	1007883a 	mov	r3,r2
   2cddc:	008000f4 	movhi	r2,3
   2cde0:	10b91504 	addi	r2,r2,-7084
   2cde4:	1885883a 	add	r2,r3,r2
   2cde8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2cdec:	e0fffe17 	ldw	r3,-8(fp)
   2cdf0:	00900034 	movhi	r2,16384
   2cdf4:	10bfffc4 	addi	r2,r2,-1
   2cdf8:	1886703a 	and	r3,r3,r2
   2cdfc:	e0bffc17 	ldw	r2,-16(fp)
   2ce00:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2ce04:	e0bffb17 	ldw	r2,-20(fp)
   2ce08:	1000051e 	bne	r2,zero,2ce20 <open+0xd8>
   2ce0c:	e13ffc17 	ldw	r4,-16(fp)
   2ce10:	002cc5c0 	call	2cc5c <alt_file_locked>
   2ce14:	e0bffa15 	stw	r2,-24(fp)
   2ce18:	e0bffa17 	ldw	r2,-24(fp)
   2ce1c:	10001016 	blt	r2,zero,2ce60 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2ce20:	e0bff817 	ldw	r2,-32(fp)
   2ce24:	10800317 	ldw	r2,12(r2)
   2ce28:	10000826 	beq	r2,zero,2ce4c <open+0x104>
   2ce2c:	e0bff817 	ldw	r2,-32(fp)
   2ce30:	10800317 	ldw	r2,12(r2)
   2ce34:	e1ffff17 	ldw	r7,-4(fp)
   2ce38:	e1bffe17 	ldw	r6,-8(fp)
   2ce3c:	e17ffd17 	ldw	r5,-12(fp)
   2ce40:	e13ffc17 	ldw	r4,-16(fp)
   2ce44:	103ee83a 	callr	r2
   2ce48:	00000106 	br	2ce50 <open+0x108>
   2ce4c:	0005883a 	mov	r2,zero
   2ce50:	e0bffa15 	stw	r2,-24(fp)
   2ce54:	00000206 	br	2ce60 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2ce58:	00bffb44 	movi	r2,-19
   2ce5c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2ce60:	e0bffa17 	ldw	r2,-24(fp)
   2ce64:	1000090e 	bge	r2,zero,2ce8c <open+0x144>
  {
    alt_release_fd (index);  
   2ce68:	e13ff917 	ldw	r4,-28(fp)
   2ce6c:	00238b00 	call	238b0 <alt_release_fd>
    ALT_ERRNO = -status;
   2ce70:	002cc200 	call	2cc20 <alt_get_errno>
   2ce74:	1007883a 	mov	r3,r2
   2ce78:	e0bffa17 	ldw	r2,-24(fp)
   2ce7c:	0085c83a 	sub	r2,zero,r2
   2ce80:	18800015 	stw	r2,0(r3)
    return -1;
   2ce84:	00bfffc4 	movi	r2,-1
   2ce88:	00000106 	br	2ce90 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   2ce8c:	e0bff917 	ldw	r2,-28(fp)
}
   2ce90:	e037883a 	mov	sp,fp
   2ce94:	dfc00117 	ldw	ra,4(sp)
   2ce98:	df000017 	ldw	fp,0(sp)
   2ce9c:	dec00204 	addi	sp,sp,8
   2cea0:	f800283a 	ret

0002cea4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2cea4:	defffa04 	addi	sp,sp,-24
   2cea8:	df000515 	stw	fp,20(sp)
   2ceac:	df000504 	addi	fp,sp,20
   2ceb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ceb4:	0005303a 	rdctl	r2,status
   2ceb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2cebc:	e0fffc17 	ldw	r3,-16(fp)
   2cec0:	00bfff84 	movi	r2,-2
   2cec4:	1884703a 	and	r2,r3,r2
   2cec8:	1001703a 	wrctl	status,r2
  
  return context;
   2cecc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2ced0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2ced4:	e0bfff17 	ldw	r2,-4(fp)
   2ced8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2cedc:	e0bffd17 	ldw	r2,-12(fp)
   2cee0:	10800017 	ldw	r2,0(r2)
   2cee4:	e0fffd17 	ldw	r3,-12(fp)
   2cee8:	18c00117 	ldw	r3,4(r3)
   2ceec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2cef0:	e0bffd17 	ldw	r2,-12(fp)
   2cef4:	10800117 	ldw	r2,4(r2)
   2cef8:	e0fffd17 	ldw	r3,-12(fp)
   2cefc:	18c00017 	ldw	r3,0(r3)
   2cf00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2cf04:	e0bffd17 	ldw	r2,-12(fp)
   2cf08:	e0fffd17 	ldw	r3,-12(fp)
   2cf0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2cf10:	e0bffd17 	ldw	r2,-12(fp)
   2cf14:	e0fffd17 	ldw	r3,-12(fp)
   2cf18:	10c00015 	stw	r3,0(r2)
   2cf1c:	e0bffb17 	ldw	r2,-20(fp)
   2cf20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2cf24:	e0bffe17 	ldw	r2,-8(fp)
   2cf28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2cf2c:	0001883a 	nop
   2cf30:	e037883a 	mov	sp,fp
   2cf34:	df000017 	ldw	fp,0(sp)
   2cf38:	dec00104 	addi	sp,sp,4
   2cf3c:	f800283a 	ret

0002cf40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2cf40:	defffb04 	addi	sp,sp,-20
   2cf44:	dfc00415 	stw	ra,16(sp)
   2cf48:	df000315 	stw	fp,12(sp)
   2cf4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2cf50:	d0a02b17 	ldw	r2,-32596(gp)
   2cf54:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2cf58:	d0a70c17 	ldw	r2,-25552(gp)
   2cf5c:	10800044 	addi	r2,r2,1
   2cf60:	d0a70c15 	stw	r2,-25552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2cf64:	00002e06 	br	2d020 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2cf68:	e0bffd17 	ldw	r2,-12(fp)
   2cf6c:	10800017 	ldw	r2,0(r2)
   2cf70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2cf74:	e0bffd17 	ldw	r2,-12(fp)
   2cf78:	10800403 	ldbu	r2,16(r2)
   2cf7c:	10803fcc 	andi	r2,r2,255
   2cf80:	10000426 	beq	r2,zero,2cf94 <alt_tick+0x54>
   2cf84:	d0a70c17 	ldw	r2,-25552(gp)
   2cf88:	1000021e 	bne	r2,zero,2cf94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2cf8c:	e0bffd17 	ldw	r2,-12(fp)
   2cf90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2cf94:	e0bffd17 	ldw	r2,-12(fp)
   2cf98:	10800217 	ldw	r2,8(r2)
   2cf9c:	d0e70c17 	ldw	r3,-25552(gp)
   2cfa0:	18801d36 	bltu	r3,r2,2d018 <alt_tick+0xd8>
   2cfa4:	e0bffd17 	ldw	r2,-12(fp)
   2cfa8:	10800403 	ldbu	r2,16(r2)
   2cfac:	10803fcc 	andi	r2,r2,255
   2cfb0:	1000191e 	bne	r2,zero,2d018 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2cfb4:	e0bffd17 	ldw	r2,-12(fp)
   2cfb8:	10800317 	ldw	r2,12(r2)
   2cfbc:	e0fffd17 	ldw	r3,-12(fp)
   2cfc0:	18c00517 	ldw	r3,20(r3)
   2cfc4:	1809883a 	mov	r4,r3
   2cfc8:	103ee83a 	callr	r2
   2cfcc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2cfd0:	e0bfff17 	ldw	r2,-4(fp)
   2cfd4:	1000031e 	bne	r2,zero,2cfe4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2cfd8:	e13ffd17 	ldw	r4,-12(fp)
   2cfdc:	002cea40 	call	2cea4 <alt_alarm_stop>
   2cfe0:	00000d06 	br	2d018 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2cfe4:	e0bffd17 	ldw	r2,-12(fp)
   2cfe8:	10c00217 	ldw	r3,8(r2)
   2cfec:	e0bfff17 	ldw	r2,-4(fp)
   2cff0:	1887883a 	add	r3,r3,r2
   2cff4:	e0bffd17 	ldw	r2,-12(fp)
   2cff8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2cffc:	e0bffd17 	ldw	r2,-12(fp)
   2d000:	10c00217 	ldw	r3,8(r2)
   2d004:	d0a70c17 	ldw	r2,-25552(gp)
   2d008:	1880032e 	bgeu	r3,r2,2d018 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2d00c:	e0bffd17 	ldw	r2,-12(fp)
   2d010:	00c00044 	movi	r3,1
   2d014:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2d018:	e0bffe17 	ldw	r2,-8(fp)
   2d01c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2d020:	e0fffd17 	ldw	r3,-12(fp)
   2d024:	d0a02b04 	addi	r2,gp,-32596
   2d028:	18bfcf1e 	bne	r3,r2,2cf68 <__alt_data_end+0xfffedb68>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2d02c:	0024ac40 	call	24ac4 <OSTimeTick>
}
   2d030:	0001883a 	nop
   2d034:	e037883a 	mov	sp,fp
   2d038:	dfc00117 	ldw	ra,4(sp)
   2d03c:	df000017 	ldw	fp,0(sp)
   2d040:	dec00204 	addi	sp,sp,8
   2d044:	f800283a 	ret

0002d048 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2d048:	deffff04 	addi	sp,sp,-4
   2d04c:	df000015 	stw	fp,0(sp)
   2d050:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2d054:	000170fa 	wrctl	ienable,zero
}
   2d058:	0001883a 	nop
   2d05c:	e037883a 	mov	sp,fp
   2d060:	df000017 	ldw	fp,0(sp)
   2d064:	dec00104 	addi	sp,sp,4
   2d068:	f800283a 	ret

0002d06c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   2d06c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   2d070:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   2d074:	d1270517 	ldw	r4,-25580(gp)

      stw ra,  0(sp)
   2d078:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   2d07c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   2d080:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   2d084:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   2d088:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   2d08c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   2d090:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   2d094:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   2d098:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   2d09c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   2d0a0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   2d0a4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   2d0a8:	002d2e00 	call	2d2e0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   2d0ac:	d1270017 	ldw	r4,-25600(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   2d0b0:	d166f807 	ldb	r5,-25632(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   2d0b4:	d1270515 	stw	r4,-25580(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   2d0b8:	d166f845 	stb	r5,-25631(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   2d0bc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   2d0c0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   2d0c4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   2d0c8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   2d0cc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   2d0d0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   2d0d4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   2d0d8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   2d0dc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   2d0e0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   2d0e4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   2d0e8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   2d0ec:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   2d0f0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   2d0f4:	f800283a 	ret

0002d0f8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   2d0f8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   2d0fc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   2d100:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   2d104:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   2d108:	002d2e00 	call	2d2e0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   2d10c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   2d110:	d4a6f645 	stb	r18,-25639(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   2d114:	003fe506 	br	2d0ac <__alt_data_end+0xfffedcac>

0002d118 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   2d118:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   2d11c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   2d120:	10800054 	ori	r2,r2,1
      wrctl status, r2
   2d124:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   2d128:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   2d12c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   2d130:	dec00204 	addi	sp,sp,8

      callr r2
   2d134:	103ee83a 	callr	r2

      nop
   2d138:	0001883a 	nop

0002d13c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   2d13c:	defff704 	addi	sp,sp,-36
   2d140:	dfc00815 	stw	ra,32(sp)
   2d144:	df000715 	stw	fp,28(sp)
   2d148:	df000704 	addi	fp,sp,28
   2d14c:	e13ffc15 	stw	r4,-16(fp)
   2d150:	e17ffd15 	stw	r5,-12(fp)
   2d154:	e1bffe15 	stw	r6,-8(fp)
   2d158:	3805883a 	mov	r2,r7
   2d15c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   2d160:	e0fffe17 	ldw	r3,-8(fp)
   2d164:	00bfff04 	movi	r2,-4
   2d168:	1884703a 	and	r2,r3,r2
   2d16c:	10bef704 	addi	r2,r2,-1060
   2d170:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   2d174:	01810904 	movi	r6,1060
   2d178:	000b883a 	mov	r5,zero
   2d17c:	e13ff917 	ldw	r4,-28(fp)
   2d180:	0021a880 	call	21a88 <memset>
   2d184:	e0bff917 	ldw	r2,-28(fp)
   2d188:	10c0bb04 	addi	r3,r2,748
   2d18c:	e0bff917 	ldw	r2,-28(fp)
   2d190:	10c00115 	stw	r3,4(r2)
   2d194:	e0bff917 	ldw	r2,-28(fp)
   2d198:	10c0d504 	addi	r3,r2,852
   2d19c:	e0bff917 	ldw	r2,-28(fp)
   2d1a0:	10c00215 	stw	r3,8(r2)
   2d1a4:	e0bff917 	ldw	r2,-28(fp)
   2d1a8:	10c0ef04 	addi	r3,r2,956
   2d1ac:	e0bff917 	ldw	r2,-28(fp)
   2d1b0:	10c00315 	stw	r3,12(r2)
   2d1b4:	e0fff917 	ldw	r3,-28(fp)
   2d1b8:	008000f4 	movhi	r2,3
   2d1bc:	10b6ff04 	addi	r2,r2,-9220
   2d1c0:	18800d15 	stw	r2,52(r3)
   2d1c4:	e0bff917 	ldw	r2,-28(fp)
   2d1c8:	00c00044 	movi	r3,1
   2d1cc:	10c02915 	stw	r3,164(r2)
   2d1d0:	10002a15 	stw	zero,168(r2)
   2d1d4:	e0bff917 	ldw	r2,-28(fp)
   2d1d8:	00ccc384 	movi	r3,13070
   2d1dc:	10c02b0d 	sth	r3,172(r2)
   2d1e0:	e0bff917 	ldw	r2,-28(fp)
   2d1e4:	00eaf344 	movi	r3,-21555
   2d1e8:	10c02b8d 	sth	r3,174(r2)
   2d1ec:	e0bff917 	ldw	r2,-28(fp)
   2d1f0:	00c48d04 	movi	r3,4660
   2d1f4:	10c02c0d 	sth	r3,176(r2)
   2d1f8:	e0bff917 	ldw	r2,-28(fp)
   2d1fc:	00f99b44 	movi	r3,-6547
   2d200:	10c02c8d 	sth	r3,178(r2)
   2d204:	e0bff917 	ldw	r2,-28(fp)
   2d208:	00f7bb04 	movi	r3,-8468
   2d20c:	10c02d0d 	sth	r3,180(r2)
   2d210:	e0bff917 	ldw	r2,-28(fp)
   2d214:	00c00144 	movi	r3,5
   2d218:	10c02d8d 	sth	r3,182(r2)
   2d21c:	e0bff917 	ldw	r2,-28(fp)
   2d220:	00c002c4 	movi	r3,11
   2d224:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   2d228:	e0bff917 	ldw	r2,-28(fp)
   2d22c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   2d230:	e0bffa17 	ldw	r2,-24(fp)
   2d234:	10bff304 	addi	r2,r2,-52
   2d238:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   2d23c:	e0bffb17 	ldw	r2,-20(fp)
   2d240:	10800c04 	addi	r2,r2,48
   2d244:	e0fffc17 	ldw	r3,-16(fp)
   2d248:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   2d24c:	e0bffb17 	ldw	r2,-20(fp)
   2d250:	10800b04 	addi	r2,r2,44
   2d254:	e0fffd17 	ldw	r3,-12(fp)
   2d258:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   2d25c:	e0bffb17 	ldw	r2,-20(fp)
   2d260:	10800a04 	addi	r2,r2,40
   2d264:	e0fff917 	ldw	r3,-28(fp)
   2d268:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   2d26c:	008000f4 	movhi	r2,3
   2d270:	10b44604 	addi	r2,r2,-12008
   2d274:	10c00104 	addi	r3,r2,4
   2d278:	e0bffb17 	ldw	r2,-20(fp)
   2d27c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   2d280:	e0bffb17 	ldw	r2,-20(fp)
}
   2d284:	e037883a 	mov	sp,fp
   2d288:	dfc00117 	ldw	ra,4(sp)
   2d28c:	df000017 	ldw	fp,0(sp)
   2d290:	dec00204 	addi	sp,sp,8
   2d294:	f800283a 	ret

0002d298 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   2d298:	defffe04 	addi	sp,sp,-8
   2d29c:	df000115 	stw	fp,4(sp)
   2d2a0:	df000104 	addi	fp,sp,4
   2d2a4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   2d2a8:	0001883a 	nop
   2d2ac:	e037883a 	mov	sp,fp
   2d2b0:	df000017 	ldw	fp,0(sp)
   2d2b4:	dec00104 	addi	sp,sp,4
   2d2b8:	f800283a 	ret

0002d2bc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   2d2bc:	defffe04 	addi	sp,sp,-8
   2d2c0:	df000115 	stw	fp,4(sp)
   2d2c4:	df000104 	addi	fp,sp,4
   2d2c8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   2d2cc:	0001883a 	nop
   2d2d0:	e037883a 	mov	sp,fp
   2d2d4:	df000017 	ldw	fp,0(sp)
   2d2d8:	dec00104 	addi	sp,sp,4
   2d2dc:	f800283a 	ret

0002d2e0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   2d2e0:	deffff04 	addi	sp,sp,-4
   2d2e4:	df000015 	stw	fp,0(sp)
   2d2e8:	d839883a 	mov	fp,sp
}
   2d2ec:	0001883a 	nop
   2d2f0:	e037883a 	mov	sp,fp
   2d2f4:	df000017 	ldw	fp,0(sp)
   2d2f8:	dec00104 	addi	sp,sp,4
   2d2fc:	f800283a 	ret

0002d300 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   2d300:	deffff04 	addi	sp,sp,-4
   2d304:	df000015 	stw	fp,0(sp)
   2d308:	d839883a 	mov	fp,sp
}
   2d30c:	0001883a 	nop
   2d310:	e037883a 	mov	sp,fp
   2d314:	df000017 	ldw	fp,0(sp)
   2d318:	dec00104 	addi	sp,sp,4
   2d31c:	f800283a 	ret

0002d320 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   2d320:	deffff04 	addi	sp,sp,-4
   2d324:	df000015 	stw	fp,0(sp)
   2d328:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   2d32c:	0001883a 	nop
   2d330:	e037883a 	mov	sp,fp
   2d334:	df000017 	ldw	fp,0(sp)
   2d338:	dec00104 	addi	sp,sp,4
   2d33c:	f800283a 	ret

0002d340 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   2d340:	deffff04 	addi	sp,sp,-4
   2d344:	df000015 	stw	fp,0(sp)
   2d348:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   2d34c:	0001883a 	nop
   2d350:	e037883a 	mov	sp,fp
   2d354:	df000017 	ldw	fp,0(sp)
   2d358:	dec00104 	addi	sp,sp,4
   2d35c:	f800283a 	ret

0002d360 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   2d360:	deffff04 	addi	sp,sp,-4
   2d364:	df000015 	stw	fp,0(sp)
   2d368:	d839883a 	mov	fp,sp
}
   2d36c:	0001883a 	nop
   2d370:	e037883a 	mov	sp,fp
   2d374:	df000017 	ldw	fp,0(sp)
   2d378:	dec00104 	addi	sp,sp,4
   2d37c:	f800283a 	ret

0002d380 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   2d380:	deffff04 	addi	sp,sp,-4
   2d384:	df000015 	stw	fp,0(sp)
   2d388:	d839883a 	mov	fp,sp
}
   2d38c:	0001883a 	nop
   2d390:	e037883a 	mov	sp,fp
   2d394:	df000017 	ldw	fp,0(sp)
   2d398:	dec00104 	addi	sp,sp,4
   2d39c:	f800283a 	ret

0002d3a0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   2d3a0:	defffe04 	addi	sp,sp,-8
   2d3a4:	df000115 	stw	fp,4(sp)
   2d3a8:	df000104 	addi	fp,sp,4
   2d3ac:	e13fff15 	stw	r4,-4(fp)
}
   2d3b0:	0001883a 	nop
   2d3b4:	e037883a 	mov	sp,fp
   2d3b8:	df000017 	ldw	fp,0(sp)
   2d3bc:	dec00104 	addi	sp,sp,4
   2d3c0:	f800283a 	ret

0002d3c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2d3c4:	defffa04 	addi	sp,sp,-24
   2d3c8:	dfc00515 	stw	ra,20(sp)
   2d3cc:	df000415 	stw	fp,16(sp)
   2d3d0:	df000404 	addi	fp,sp,16
   2d3d4:	e13ffe15 	stw	r4,-8(fp)
   2d3d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2d3dc:	e0bfff17 	ldw	r2,-4(fp)
   2d3e0:	10800017 	ldw	r2,0(r2)
   2d3e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2d3e8:	e13ffe17 	ldw	r4,-8(fp)
   2d3ec:	002045c0 	call	2045c <strlen>
   2d3f0:	10800044 	addi	r2,r2,1
   2d3f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2d3f8:	00000d06 	br	2d430 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2d3fc:	e0bffc17 	ldw	r2,-16(fp)
   2d400:	10800217 	ldw	r2,8(r2)
   2d404:	e0fffd17 	ldw	r3,-12(fp)
   2d408:	180d883a 	mov	r6,r3
   2d40c:	e17ffe17 	ldw	r5,-8(fp)
   2d410:	1009883a 	mov	r4,r2
   2d414:	002d7380 	call	2d738 <memcmp>
   2d418:	1000021e 	bne	r2,zero,2d424 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2d41c:	e0bffc17 	ldw	r2,-16(fp)
   2d420:	00000706 	br	2d440 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2d424:	e0bffc17 	ldw	r2,-16(fp)
   2d428:	10800017 	ldw	r2,0(r2)
   2d42c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2d430:	e0fffc17 	ldw	r3,-16(fp)
   2d434:	e0bfff17 	ldw	r2,-4(fp)
   2d438:	18bff01e 	bne	r3,r2,2d3fc <__alt_data_end+0xfffedffc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2d43c:	0005883a 	mov	r2,zero
}
   2d440:	e037883a 	mov	sp,fp
   2d444:	dfc00117 	ldw	ra,4(sp)
   2d448:	df000017 	ldw	fp,0(sp)
   2d44c:	dec00204 	addi	sp,sp,8
   2d450:	f800283a 	ret

0002d454 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2d454:	defffb04 	addi	sp,sp,-20
   2d458:	dfc00415 	stw	ra,16(sp)
   2d45c:	df000315 	stw	fp,12(sp)
   2d460:	df000304 	addi	fp,sp,12
   2d464:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2d468:	d0a00417 	ldw	r2,-32752(gp)
   2d46c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2d470:	00003106 	br	2d538 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2d474:	e0bffd17 	ldw	r2,-12(fp)
   2d478:	10800217 	ldw	r2,8(r2)
   2d47c:	1009883a 	mov	r4,r2
   2d480:	002045c0 	call	2045c <strlen>
   2d484:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2d488:	e0bffd17 	ldw	r2,-12(fp)
   2d48c:	10c00217 	ldw	r3,8(r2)
   2d490:	e0bffe17 	ldw	r2,-8(fp)
   2d494:	10bfffc4 	addi	r2,r2,-1
   2d498:	1885883a 	add	r2,r3,r2
   2d49c:	10800003 	ldbu	r2,0(r2)
   2d4a0:	10803fcc 	andi	r2,r2,255
   2d4a4:	1080201c 	xori	r2,r2,128
   2d4a8:	10bfe004 	addi	r2,r2,-128
   2d4ac:	10800bd8 	cmpnei	r2,r2,47
   2d4b0:	1000031e 	bne	r2,zero,2d4c0 <alt_find_file+0x6c>
    {
      len -= 1;
   2d4b4:	e0bffe17 	ldw	r2,-8(fp)
   2d4b8:	10bfffc4 	addi	r2,r2,-1
   2d4bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d4c0:	e0bffe17 	ldw	r2,-8(fp)
   2d4c4:	e0ffff17 	ldw	r3,-4(fp)
   2d4c8:	1885883a 	add	r2,r3,r2
   2d4cc:	10800003 	ldbu	r2,0(r2)
   2d4d0:	10803fcc 	andi	r2,r2,255
   2d4d4:	1080201c 	xori	r2,r2,128
   2d4d8:	10bfe004 	addi	r2,r2,-128
   2d4dc:	10800be0 	cmpeqi	r2,r2,47
   2d4e0:	1000081e 	bne	r2,zero,2d504 <alt_find_file+0xb0>
   2d4e4:	e0bffe17 	ldw	r2,-8(fp)
   2d4e8:	e0ffff17 	ldw	r3,-4(fp)
   2d4ec:	1885883a 	add	r2,r3,r2
   2d4f0:	10800003 	ldbu	r2,0(r2)
   2d4f4:	10803fcc 	andi	r2,r2,255
   2d4f8:	1080201c 	xori	r2,r2,128
   2d4fc:	10bfe004 	addi	r2,r2,-128
   2d500:	10000a1e 	bne	r2,zero,2d52c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2d504:	e0bffd17 	ldw	r2,-12(fp)
   2d508:	10800217 	ldw	r2,8(r2)
   2d50c:	e0fffe17 	ldw	r3,-8(fp)
   2d510:	180d883a 	mov	r6,r3
   2d514:	e17fff17 	ldw	r5,-4(fp)
   2d518:	1009883a 	mov	r4,r2
   2d51c:	002d7380 	call	2d738 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d520:	1000021e 	bne	r2,zero,2d52c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2d524:	e0bffd17 	ldw	r2,-12(fp)
   2d528:	00000706 	br	2d548 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2d52c:	e0bffd17 	ldw	r2,-12(fp)
   2d530:	10800017 	ldw	r2,0(r2)
   2d534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2d538:	e0fffd17 	ldw	r3,-12(fp)
   2d53c:	d0a00404 	addi	r2,gp,-32752
   2d540:	18bfcc1e 	bne	r3,r2,2d474 <__alt_data_end+0xfffee074>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2d544:	0005883a 	mov	r2,zero
}
   2d548:	e037883a 	mov	sp,fp
   2d54c:	dfc00117 	ldw	ra,4(sp)
   2d550:	df000017 	ldw	fp,0(sp)
   2d554:	dec00204 	addi	sp,sp,8
   2d558:	f800283a 	ret

0002d55c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2d55c:	defff804 	addi	sp,sp,-32
   2d560:	dfc00715 	stw	ra,28(sp)
   2d564:	df000615 	stw	fp,24(sp)
   2d568:	dc000515 	stw	r16,20(sp)
   2d56c:	df000604 	addi	fp,sp,24
   2d570:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2d574:	00bffa04 	movi	r2,-24
   2d578:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   2d57c:	d0a6ee17 	ldw	r2,-25672(gp)
   2d580:	e0bffc15 	stw	r2,-16(fp)
   2d584:	e03ffd0d 	sth	zero,-12(fp)
   2d588:	e0bffd0b 	ldhu	r2,-12(fp)
   2d58c:	e0fffd84 	addi	r3,fp,-10
   2d590:	180d883a 	mov	r6,r3
   2d594:	100b883a 	mov	r5,r2
   2d598:	e13ffc17 	ldw	r4,-16(fp)
   2d59c:	00293140 	call	29314 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d5a0:	e03ffa15 	stw	zero,-24(fp)
   2d5a4:	00001d06 	br	2d61c <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   2d5a8:	040000f4 	movhi	r16,3
   2d5ac:	84391504 	addi	r16,r16,-7084
   2d5b0:	e0bffa17 	ldw	r2,-24(fp)
   2d5b4:	01400304 	movi	r5,12
   2d5b8:	1009883a 	mov	r4,r2
   2d5bc:	002316c0 	call	2316c <__mulsi3>
   2d5c0:	8085883a 	add	r2,r16,r2
   2d5c4:	10800017 	ldw	r2,0(r2)
   2d5c8:	1000111e 	bne	r2,zero,2d610 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   2d5cc:	040000f4 	movhi	r16,3
   2d5d0:	84391504 	addi	r16,r16,-7084
   2d5d4:	e0bffa17 	ldw	r2,-24(fp)
   2d5d8:	01400304 	movi	r5,12
   2d5dc:	1009883a 	mov	r4,r2
   2d5e0:	002316c0 	call	2316c <__mulsi3>
   2d5e4:	8085883a 	add	r2,r16,r2
   2d5e8:	e0fffe17 	ldw	r3,-8(fp)
   2d5ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2d5f0:	d0e00817 	ldw	r3,-32736(gp)
   2d5f4:	e0bffa17 	ldw	r2,-24(fp)
   2d5f8:	1880020e 	bge	r3,r2,2d604 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   2d5fc:	e0bffa17 	ldw	r2,-24(fp)
   2d600:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   2d604:	e0bffa17 	ldw	r2,-24(fp)
   2d608:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   2d60c:	00000606 	br	2d628 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d610:	e0bffa17 	ldw	r2,-24(fp)
   2d614:	10800044 	addi	r2,r2,1
   2d618:	e0bffa15 	stw	r2,-24(fp)
   2d61c:	e0bffa17 	ldw	r2,-24(fp)
   2d620:	10800810 	cmplti	r2,r2,32
   2d624:	103fe01e 	bne	r2,zero,2d5a8 <__alt_data_end+0xfffee1a8>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   2d628:	d0a6ee17 	ldw	r2,-25672(gp)
   2d62c:	1009883a 	mov	r4,r2
   2d630:	002968c0 	call	2968c <OSSemPost>

  return rc;
   2d634:	e0bffb17 	ldw	r2,-20(fp)
}
   2d638:	e6ffff04 	addi	sp,fp,-4
   2d63c:	dfc00217 	ldw	ra,8(sp)
   2d640:	df000117 	ldw	fp,4(sp)
   2d644:	dc000017 	ldw	r16,0(sp)
   2d648:	dec00304 	addi	sp,sp,12
   2d64c:	f800283a 	ret

0002d650 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2d650:	defffe04 	addi	sp,sp,-8
   2d654:	df000115 	stw	fp,4(sp)
   2d658:	df000104 	addi	fp,sp,4
   2d65c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2d660:	e0bfff17 	ldw	r2,-4(fp)
   2d664:	10bffe84 	addi	r2,r2,-6
   2d668:	10c00428 	cmpgeui	r3,r2,16
   2d66c:	18001a1e 	bne	r3,zero,2d6d8 <alt_exception_cause_generated_bad_addr+0x88>
   2d670:	100690ba 	slli	r3,r2,2
   2d674:	008000f4 	movhi	r2,3
   2d678:	10b5a204 	addi	r2,r2,-10616
   2d67c:	1885883a 	add	r2,r3,r2
   2d680:	10800017 	ldw	r2,0(r2)
   2d684:	1000683a 	jmp	r2
   2d688:	0002d6c8 	cmpgei	zero,zero,2907
   2d68c:	0002d6c8 	cmpgei	zero,zero,2907
   2d690:	0002d6d8 	cmpnei	zero,zero,2907
   2d694:	0002d6d8 	cmpnei	zero,zero,2907
   2d698:	0002d6d8 	cmpnei	zero,zero,2907
   2d69c:	0002d6c8 	cmpgei	zero,zero,2907
   2d6a0:	0002d6d0 	cmplti	zero,zero,2907
   2d6a4:	0002d6d8 	cmpnei	zero,zero,2907
   2d6a8:	0002d6c8 	cmpgei	zero,zero,2907
   2d6ac:	0002d6c8 	cmpgei	zero,zero,2907
   2d6b0:	0002d6d8 	cmpnei	zero,zero,2907
   2d6b4:	0002d6c8 	cmpgei	zero,zero,2907
   2d6b8:	0002d6d0 	cmplti	zero,zero,2907
   2d6bc:	0002d6d8 	cmpnei	zero,zero,2907
   2d6c0:	0002d6d8 	cmpnei	zero,zero,2907
   2d6c4:	0002d6c8 	cmpgei	zero,zero,2907
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2d6c8:	00800044 	movi	r2,1
   2d6cc:	00000306 	br	2d6dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2d6d0:	0005883a 	mov	r2,zero
   2d6d4:	00000106 	br	2d6dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2d6d8:	0005883a 	mov	r2,zero
  }
}
   2d6dc:	e037883a 	mov	sp,fp
   2d6e0:	df000017 	ldw	fp,0(sp)
   2d6e4:	dec00104 	addi	sp,sp,4
   2d6e8:	f800283a 	ret

0002d6ec <atexit>:
   2d6ec:	200b883a 	mov	r5,r4
   2d6f0:	000f883a 	mov	r7,zero
   2d6f4:	000d883a 	mov	r6,zero
   2d6f8:	0009883a 	mov	r4,zero
   2d6fc:	002d7b41 	jmpi	2d7b4 <__register_exitproc>

0002d700 <exit>:
   2d700:	defffe04 	addi	sp,sp,-8
   2d704:	000b883a 	mov	r5,zero
   2d708:	dc000015 	stw	r16,0(sp)
   2d70c:	dfc00115 	stw	ra,4(sp)
   2d710:	2021883a 	mov	r16,r4
   2d714:	002d8cc0 	call	2d8cc <__call_exitprocs>
   2d718:	008000f4 	movhi	r2,3
   2d71c:	10bd9004 	addi	r2,r2,-2496
   2d720:	11000017 	ldw	r4,0(r2)
   2d724:	20800f17 	ldw	r2,60(r4)
   2d728:	10000126 	beq	r2,zero,2d730 <exit+0x30>
   2d72c:	103ee83a 	callr	r2
   2d730:	8009883a 	mov	r4,r16
   2d734:	002da4c0 	call	2da4c <_exit>

0002d738 <memcmp>:
   2d738:	01c000c4 	movi	r7,3
   2d73c:	3980192e 	bgeu	r7,r6,2d7a4 <memcmp+0x6c>
   2d740:	2144b03a 	or	r2,r4,r5
   2d744:	11c4703a 	and	r2,r2,r7
   2d748:	10000f26 	beq	r2,zero,2d788 <memcmp+0x50>
   2d74c:	20800003 	ldbu	r2,0(r4)
   2d750:	28c00003 	ldbu	r3,0(r5)
   2d754:	10c0151e 	bne	r2,r3,2d7ac <memcmp+0x74>
   2d758:	31bfff84 	addi	r6,r6,-2
   2d75c:	01ffffc4 	movi	r7,-1
   2d760:	00000406 	br	2d774 <memcmp+0x3c>
   2d764:	20800003 	ldbu	r2,0(r4)
   2d768:	28c00003 	ldbu	r3,0(r5)
   2d76c:	31bfffc4 	addi	r6,r6,-1
   2d770:	10c00e1e 	bne	r2,r3,2d7ac <memcmp+0x74>
   2d774:	21000044 	addi	r4,r4,1
   2d778:	29400044 	addi	r5,r5,1
   2d77c:	31fff91e 	bne	r6,r7,2d764 <__alt_data_end+0xfffee364>
   2d780:	0005883a 	mov	r2,zero
   2d784:	f800283a 	ret
   2d788:	20c00017 	ldw	r3,0(r4)
   2d78c:	28800017 	ldw	r2,0(r5)
   2d790:	18bfee1e 	bne	r3,r2,2d74c <__alt_data_end+0xfffee34c>
   2d794:	31bfff04 	addi	r6,r6,-4
   2d798:	21000104 	addi	r4,r4,4
   2d79c:	29400104 	addi	r5,r5,4
   2d7a0:	39bff936 	bltu	r7,r6,2d788 <__alt_data_end+0xfffee388>
   2d7a4:	303fe91e 	bne	r6,zero,2d74c <__alt_data_end+0xfffee34c>
   2d7a8:	003ff506 	br	2d780 <__alt_data_end+0xfffee380>
   2d7ac:	10c5c83a 	sub	r2,r2,r3
   2d7b0:	f800283a 	ret

0002d7b4 <__register_exitproc>:
   2d7b4:	defffa04 	addi	sp,sp,-24
   2d7b8:	dc000315 	stw	r16,12(sp)
   2d7bc:	040000f4 	movhi	r16,3
   2d7c0:	843d9004 	addi	r16,r16,-2496
   2d7c4:	80c00017 	ldw	r3,0(r16)
   2d7c8:	dc400415 	stw	r17,16(sp)
   2d7cc:	dfc00515 	stw	ra,20(sp)
   2d7d0:	18805217 	ldw	r2,328(r3)
   2d7d4:	2023883a 	mov	r17,r4
   2d7d8:	10003726 	beq	r2,zero,2d8b8 <__register_exitproc+0x104>
   2d7dc:	10c00117 	ldw	r3,4(r2)
   2d7e0:	010007c4 	movi	r4,31
   2d7e4:	20c00e16 	blt	r4,r3,2d820 <__register_exitproc+0x6c>
   2d7e8:	1a000044 	addi	r8,r3,1
   2d7ec:	8800221e 	bne	r17,zero,2d878 <__register_exitproc+0xc4>
   2d7f0:	18c00084 	addi	r3,r3,2
   2d7f4:	18c7883a 	add	r3,r3,r3
   2d7f8:	18c7883a 	add	r3,r3,r3
   2d7fc:	12000115 	stw	r8,4(r2)
   2d800:	10c7883a 	add	r3,r2,r3
   2d804:	19400015 	stw	r5,0(r3)
   2d808:	0005883a 	mov	r2,zero
   2d80c:	dfc00517 	ldw	ra,20(sp)
   2d810:	dc400417 	ldw	r17,16(sp)
   2d814:	dc000317 	ldw	r16,12(sp)
   2d818:	dec00604 	addi	sp,sp,24
   2d81c:	f800283a 	ret
   2d820:	00800034 	movhi	r2,0
   2d824:	10800004 	addi	r2,r2,0
   2d828:	10002626 	beq	r2,zero,2d8c4 <__register_exitproc+0x110>
   2d82c:	01006404 	movi	r4,400
   2d830:	d9400015 	stw	r5,0(sp)
   2d834:	d9800115 	stw	r6,4(sp)
   2d838:	d9c00215 	stw	r7,8(sp)
   2d83c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   2d840:	d9400017 	ldw	r5,0(sp)
   2d844:	d9800117 	ldw	r6,4(sp)
   2d848:	d9c00217 	ldw	r7,8(sp)
   2d84c:	10001d26 	beq	r2,zero,2d8c4 <__register_exitproc+0x110>
   2d850:	81000017 	ldw	r4,0(r16)
   2d854:	10000115 	stw	zero,4(r2)
   2d858:	02000044 	movi	r8,1
   2d85c:	22405217 	ldw	r9,328(r4)
   2d860:	0007883a 	mov	r3,zero
   2d864:	12400015 	stw	r9,0(r2)
   2d868:	20805215 	stw	r2,328(r4)
   2d86c:	10006215 	stw	zero,392(r2)
   2d870:	10006315 	stw	zero,396(r2)
   2d874:	883fde26 	beq	r17,zero,2d7f0 <__alt_data_end+0xfffee3f0>
   2d878:	18c9883a 	add	r4,r3,r3
   2d87c:	2109883a 	add	r4,r4,r4
   2d880:	1109883a 	add	r4,r2,r4
   2d884:	21802215 	stw	r6,136(r4)
   2d888:	01800044 	movi	r6,1
   2d88c:	12406217 	ldw	r9,392(r2)
   2d890:	30cc983a 	sll	r6,r6,r3
   2d894:	4992b03a 	or	r9,r9,r6
   2d898:	12406215 	stw	r9,392(r2)
   2d89c:	21c04215 	stw	r7,264(r4)
   2d8a0:	01000084 	movi	r4,2
   2d8a4:	893fd21e 	bne	r17,r4,2d7f0 <__alt_data_end+0xfffee3f0>
   2d8a8:	11006317 	ldw	r4,396(r2)
   2d8ac:	218cb03a 	or	r6,r4,r6
   2d8b0:	11806315 	stw	r6,396(r2)
   2d8b4:	003fce06 	br	2d7f0 <__alt_data_end+0xfffee3f0>
   2d8b8:	18805304 	addi	r2,r3,332
   2d8bc:	18805215 	stw	r2,328(r3)
   2d8c0:	003fc606 	br	2d7dc <__alt_data_end+0xfffee3dc>
   2d8c4:	00bfffc4 	movi	r2,-1
   2d8c8:	003fd006 	br	2d80c <__alt_data_end+0xfffee40c>

0002d8cc <__call_exitprocs>:
   2d8cc:	defff504 	addi	sp,sp,-44
   2d8d0:	df000915 	stw	fp,36(sp)
   2d8d4:	dd400615 	stw	r21,24(sp)
   2d8d8:	dc800315 	stw	r18,12(sp)
   2d8dc:	dfc00a15 	stw	ra,40(sp)
   2d8e0:	ddc00815 	stw	r23,32(sp)
   2d8e4:	dd800715 	stw	r22,28(sp)
   2d8e8:	dd000515 	stw	r20,20(sp)
   2d8ec:	dcc00415 	stw	r19,16(sp)
   2d8f0:	dc400215 	stw	r17,8(sp)
   2d8f4:	dc000115 	stw	r16,4(sp)
   2d8f8:	d9000015 	stw	r4,0(sp)
   2d8fc:	2839883a 	mov	fp,r5
   2d900:	04800044 	movi	r18,1
   2d904:	057fffc4 	movi	r21,-1
   2d908:	008000f4 	movhi	r2,3
   2d90c:	10bd9004 	addi	r2,r2,-2496
   2d910:	12000017 	ldw	r8,0(r2)
   2d914:	45005217 	ldw	r20,328(r8)
   2d918:	44c05204 	addi	r19,r8,328
   2d91c:	a0001c26 	beq	r20,zero,2d990 <__call_exitprocs+0xc4>
   2d920:	a0800117 	ldw	r2,4(r20)
   2d924:	15ffffc4 	addi	r23,r2,-1
   2d928:	b8000d16 	blt	r23,zero,2d960 <__call_exitprocs+0x94>
   2d92c:	14000044 	addi	r16,r2,1
   2d930:	8421883a 	add	r16,r16,r16
   2d934:	8421883a 	add	r16,r16,r16
   2d938:	84402004 	addi	r17,r16,128
   2d93c:	a463883a 	add	r17,r20,r17
   2d940:	a421883a 	add	r16,r20,r16
   2d944:	e0001e26 	beq	fp,zero,2d9c0 <__call_exitprocs+0xf4>
   2d948:	80804017 	ldw	r2,256(r16)
   2d94c:	e0801c26 	beq	fp,r2,2d9c0 <__call_exitprocs+0xf4>
   2d950:	bdffffc4 	addi	r23,r23,-1
   2d954:	843fff04 	addi	r16,r16,-4
   2d958:	8c7fff04 	addi	r17,r17,-4
   2d95c:	bd7ff91e 	bne	r23,r21,2d944 <__alt_data_end+0xfffee544>
   2d960:	00800034 	movhi	r2,0
   2d964:	10800004 	addi	r2,r2,0
   2d968:	10000926 	beq	r2,zero,2d990 <__call_exitprocs+0xc4>
   2d96c:	a0800117 	ldw	r2,4(r20)
   2d970:	1000301e 	bne	r2,zero,2da34 <__call_exitprocs+0x168>
   2d974:	a0800017 	ldw	r2,0(r20)
   2d978:	10003226 	beq	r2,zero,2da44 <__call_exitprocs+0x178>
   2d97c:	a009883a 	mov	r4,r20
   2d980:	98800015 	stw	r2,0(r19)
   2d984:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   2d988:	9d000017 	ldw	r20,0(r19)
   2d98c:	a03fe41e 	bne	r20,zero,2d920 <__alt_data_end+0xfffee520>
   2d990:	dfc00a17 	ldw	ra,40(sp)
   2d994:	df000917 	ldw	fp,36(sp)
   2d998:	ddc00817 	ldw	r23,32(sp)
   2d99c:	dd800717 	ldw	r22,28(sp)
   2d9a0:	dd400617 	ldw	r21,24(sp)
   2d9a4:	dd000517 	ldw	r20,20(sp)
   2d9a8:	dcc00417 	ldw	r19,16(sp)
   2d9ac:	dc800317 	ldw	r18,12(sp)
   2d9b0:	dc400217 	ldw	r17,8(sp)
   2d9b4:	dc000117 	ldw	r16,4(sp)
   2d9b8:	dec00b04 	addi	sp,sp,44
   2d9bc:	f800283a 	ret
   2d9c0:	a0800117 	ldw	r2,4(r20)
   2d9c4:	80c00017 	ldw	r3,0(r16)
   2d9c8:	10bfffc4 	addi	r2,r2,-1
   2d9cc:	15c01426 	beq	r2,r23,2da20 <__call_exitprocs+0x154>
   2d9d0:	80000015 	stw	zero,0(r16)
   2d9d4:	183fde26 	beq	r3,zero,2d950 <__alt_data_end+0xfffee550>
   2d9d8:	95c8983a 	sll	r4,r18,r23
   2d9dc:	a0806217 	ldw	r2,392(r20)
   2d9e0:	a5800117 	ldw	r22,4(r20)
   2d9e4:	2084703a 	and	r2,r4,r2
   2d9e8:	10000b26 	beq	r2,zero,2da18 <__call_exitprocs+0x14c>
   2d9ec:	a0806317 	ldw	r2,396(r20)
   2d9f0:	2088703a 	and	r4,r4,r2
   2d9f4:	20000c1e 	bne	r4,zero,2da28 <__call_exitprocs+0x15c>
   2d9f8:	89400017 	ldw	r5,0(r17)
   2d9fc:	d9000017 	ldw	r4,0(sp)
   2da00:	183ee83a 	callr	r3
   2da04:	a0800117 	ldw	r2,4(r20)
   2da08:	15bfbf1e 	bne	r2,r22,2d908 <__alt_data_end+0xfffee508>
   2da0c:	98800017 	ldw	r2,0(r19)
   2da10:	153fcf26 	beq	r2,r20,2d950 <__alt_data_end+0xfffee550>
   2da14:	003fbc06 	br	2d908 <__alt_data_end+0xfffee508>
   2da18:	183ee83a 	callr	r3
   2da1c:	003ff906 	br	2da04 <__alt_data_end+0xfffee604>
   2da20:	a5c00115 	stw	r23,4(r20)
   2da24:	003feb06 	br	2d9d4 <__alt_data_end+0xfffee5d4>
   2da28:	89000017 	ldw	r4,0(r17)
   2da2c:	183ee83a 	callr	r3
   2da30:	003ff406 	br	2da04 <__alt_data_end+0xfffee604>
   2da34:	a0800017 	ldw	r2,0(r20)
   2da38:	a027883a 	mov	r19,r20
   2da3c:	1029883a 	mov	r20,r2
   2da40:	003fb606 	br	2d91c <__alt_data_end+0xfffee51c>
   2da44:	0005883a 	mov	r2,zero
   2da48:	003ffb06 	br	2da38 <__alt_data_end+0xfffee638>

0002da4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2da4c:	defffd04 	addi	sp,sp,-12
   2da50:	df000215 	stw	fp,8(sp)
   2da54:	df000204 	addi	fp,sp,8
   2da58:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2da5c:	d026f645 	stb	zero,-25639(gp)
   2da60:	e0bfff17 	ldw	r2,-4(fp)
   2da64:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2da68:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2da6c:	10000226 	beq	r2,zero,2da78 <_exit+0x2c>
    ALT_SIM_FAIL();
   2da70:	002af070 	cmpltui	zero,zero,43969
   2da74:	00000106 	br	2da7c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2da78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2da7c:	003fff06 	br	2da7c <__alt_data_end+0xfffee67c>
